//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_aw_canPeek     O     1 reg
// cpu_imem_master_aw_peek        O    98 reg
// RDY_cpu_imem_master_aw_peek    O     1 reg
// RDY_cpu_imem_master_aw_drop    O     1 reg
// cpu_imem_master_w_canPeek      O     1 reg
// cpu_imem_master_w_peek         O    73 reg
// RDY_cpu_imem_master_w_peek     O     1 reg
// RDY_cpu_imem_master_w_drop     O     1 reg
// cpu_imem_master_b_canPut       O     1 reg
// RDY_cpu_imem_master_b_put      O     1 reg
// cpu_imem_master_ar_canPeek     O     1 reg
// cpu_imem_master_ar_peek        O    98 reg
// RDY_cpu_imem_master_ar_peek    O     1 reg
// RDY_cpu_imem_master_ar_drop    O     1 reg
// cpu_imem_master_r_canPut       O     1 reg
// RDY_cpu_imem_master_r_put      O     1 reg
// cpu_dmem_master_aw_canPeek     O     1
// cpu_dmem_master_aw_peek        O    99
// RDY_cpu_dmem_master_aw_peek    O     1
// RDY_cpu_dmem_master_aw_drop    O     1
// cpu_dmem_master_w_canPeek      O     1
// cpu_dmem_master_w_peek         O    73
// RDY_cpu_dmem_master_w_peek     O     1
// RDY_cpu_dmem_master_w_drop     O     1
// cpu_dmem_master_b_canPut       O     1
// RDY_cpu_dmem_master_b_put      O     1
// cpu_dmem_master_ar_canPeek     O     1
// cpu_dmem_master_ar_peek        O    99
// RDY_cpu_dmem_master_ar_peek    O     1
// RDY_cpu_dmem_master_ar_drop    O     1
// cpu_dmem_master_r_canPut       O     1
// RDY_cpu_dmem_master_r_put      O     1
// RDY_dm_dmi_read_addr           O     1
// dm_dmi_read_data               O    32
// RDY_dm_dmi_read_data           O     1
// RDY_dm_dmi_write               O     1
// ndm_reset_client_request_get   O     1 reg
// RDY_ndm_reset_client_request_get  O     1 reg
// RDY_ndm_reset_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_b_put_val      I     7 reg
// cpu_imem_master_r_put_val      I    72 reg
// cpu_dmem_master_b_put_val      I     8
// cpu_dmem_master_r_put_val      I    73
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// dm_dmi_read_addr_dm_addr       I     7 reg
// dm_dmi_write_dm_addr           I     7
// dm_dmi_write_dm_word           I    32
// ndm_reset_client_response_put  I     1 reg
// EN_set_verbosity               I     1
// EN_cpu_reset_server_request_put  I     1
// EN_cpu_imem_master_aw_drop     I     1
// EN_cpu_imem_master_w_drop      I     1
// EN_cpu_imem_master_b_put       I     1
// EN_cpu_imem_master_ar_drop     I     1
// EN_cpu_imem_master_r_put       I     1
// EN_cpu_dmem_master_aw_drop     I     1
// EN_cpu_dmem_master_w_drop      I     1
// EN_cpu_dmem_master_b_put       I     1
// EN_cpu_dmem_master_ar_drop     I     1
// EN_cpu_dmem_master_r_put       I     1
// EN_dm_dmi_read_addr            I     1
// EN_dm_dmi_write                I     1
// EN_ndm_reset_client_response_put  I     1
// EN_cpu_reset_server_response_get  I     1
// EN_dm_dmi_read_data            I     1
// EN_ndm_reset_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   EN_dm_dmi_read_data -> dm_dmi_read_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      set_verbosity_verbosity,
	      set_verbosity_logdelay,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      cpu_imem_master_aw_canPeek,

	      cpu_imem_master_aw_peek,
	      RDY_cpu_imem_master_aw_peek,

	      EN_cpu_imem_master_aw_drop,
	      RDY_cpu_imem_master_aw_drop,

	      cpu_imem_master_w_canPeek,

	      cpu_imem_master_w_peek,
	      RDY_cpu_imem_master_w_peek,

	      EN_cpu_imem_master_w_drop,
	      RDY_cpu_imem_master_w_drop,

	      cpu_imem_master_b_canPut,

	      cpu_imem_master_b_put_val,
	      EN_cpu_imem_master_b_put,
	      RDY_cpu_imem_master_b_put,

	      cpu_imem_master_ar_canPeek,

	      cpu_imem_master_ar_peek,
	      RDY_cpu_imem_master_ar_peek,

	      EN_cpu_imem_master_ar_drop,
	      RDY_cpu_imem_master_ar_drop,

	      cpu_imem_master_r_canPut,

	      cpu_imem_master_r_put_val,
	      EN_cpu_imem_master_r_put,
	      RDY_cpu_imem_master_r_put,

	      cpu_dmem_master_aw_canPeek,

	      cpu_dmem_master_aw_peek,
	      RDY_cpu_dmem_master_aw_peek,

	      EN_cpu_dmem_master_aw_drop,
	      RDY_cpu_dmem_master_aw_drop,

	      cpu_dmem_master_w_canPeek,

	      cpu_dmem_master_w_peek,
	      RDY_cpu_dmem_master_w_peek,

	      EN_cpu_dmem_master_w_drop,
	      RDY_cpu_dmem_master_w_drop,

	      cpu_dmem_master_b_canPut,

	      cpu_dmem_master_b_put_val,
	      EN_cpu_dmem_master_b_put,
	      RDY_cpu_dmem_master_b_put,

	      cpu_dmem_master_ar_canPeek,

	      cpu_dmem_master_ar_peek,
	      RDY_cpu_dmem_master_ar_peek,

	      EN_cpu_dmem_master_ar_drop,
	      RDY_cpu_dmem_master_ar_drop,

	      cpu_dmem_master_r_canPut,

	      cpu_dmem_master_r_put_val,
	      EN_cpu_dmem_master_r_put,
	      RDY_cpu_dmem_master_r_put,

	      core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	      nmi_req_set_not_clear,

	      dm_dmi_read_addr_dm_addr,
	      EN_dm_dmi_read_addr,
	      RDY_dm_dmi_read_addr,

	      EN_dm_dmi_read_data,
	      dm_dmi_read_data,
	      RDY_dm_dmi_read_data,

	      dm_dmi_write_dm_addr,
	      dm_dmi_write_dm_word,
	      EN_dm_dmi_write,
	      RDY_dm_dmi_write,

	      EN_ndm_reset_client_request_get,
	      ndm_reset_client_request_get,
	      RDY_ndm_reset_client_request_get,

	      ndm_reset_client_response_put,
	      EN_ndm_reset_client_response_put,
	      RDY_ndm_reset_client_response_put);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_canPeek
  output cpu_imem_master_aw_canPeek;

  // value method cpu_imem_master_aw_peek
  output [97 : 0] cpu_imem_master_aw_peek;
  output RDY_cpu_imem_master_aw_peek;

  // action method cpu_imem_master_aw_drop
  input  EN_cpu_imem_master_aw_drop;
  output RDY_cpu_imem_master_aw_drop;

  // value method cpu_imem_master_w_canPeek
  output cpu_imem_master_w_canPeek;

  // value method cpu_imem_master_w_peek
  output [72 : 0] cpu_imem_master_w_peek;
  output RDY_cpu_imem_master_w_peek;

  // action method cpu_imem_master_w_drop
  input  EN_cpu_imem_master_w_drop;
  output RDY_cpu_imem_master_w_drop;

  // value method cpu_imem_master_b_canPut
  output cpu_imem_master_b_canPut;

  // action method cpu_imem_master_b_put
  input  [6 : 0] cpu_imem_master_b_put_val;
  input  EN_cpu_imem_master_b_put;
  output RDY_cpu_imem_master_b_put;

  // value method cpu_imem_master_ar_canPeek
  output cpu_imem_master_ar_canPeek;

  // value method cpu_imem_master_ar_peek
  output [97 : 0] cpu_imem_master_ar_peek;
  output RDY_cpu_imem_master_ar_peek;

  // action method cpu_imem_master_ar_drop
  input  EN_cpu_imem_master_ar_drop;
  output RDY_cpu_imem_master_ar_drop;

  // value method cpu_imem_master_r_canPut
  output cpu_imem_master_r_canPut;

  // action method cpu_imem_master_r_put
  input  [71 : 0] cpu_imem_master_r_put_val;
  input  EN_cpu_imem_master_r_put;
  output RDY_cpu_imem_master_r_put;

  // value method cpu_dmem_master_aw_canPeek
  output cpu_dmem_master_aw_canPeek;

  // value method cpu_dmem_master_aw_peek
  output [98 : 0] cpu_dmem_master_aw_peek;
  output RDY_cpu_dmem_master_aw_peek;

  // action method cpu_dmem_master_aw_drop
  input  EN_cpu_dmem_master_aw_drop;
  output RDY_cpu_dmem_master_aw_drop;

  // value method cpu_dmem_master_w_canPeek
  output cpu_dmem_master_w_canPeek;

  // value method cpu_dmem_master_w_peek
  output [72 : 0] cpu_dmem_master_w_peek;
  output RDY_cpu_dmem_master_w_peek;

  // action method cpu_dmem_master_w_drop
  input  EN_cpu_dmem_master_w_drop;
  output RDY_cpu_dmem_master_w_drop;

  // value method cpu_dmem_master_b_canPut
  output cpu_dmem_master_b_canPut;

  // action method cpu_dmem_master_b_put
  input  [7 : 0] cpu_dmem_master_b_put_val;
  input  EN_cpu_dmem_master_b_put;
  output RDY_cpu_dmem_master_b_put;

  // value method cpu_dmem_master_ar_canPeek
  output cpu_dmem_master_ar_canPeek;

  // value method cpu_dmem_master_ar_peek
  output [98 : 0] cpu_dmem_master_ar_peek;
  output RDY_cpu_dmem_master_ar_peek;

  // action method cpu_dmem_master_ar_drop
  input  EN_cpu_dmem_master_ar_drop;
  output RDY_cpu_dmem_master_ar_drop;

  // value method cpu_dmem_master_r_canPut
  output cpu_dmem_master_r_canPut;

  // action method cpu_dmem_master_r_put
  input  [72 : 0] cpu_dmem_master_r_put_val;
  input  EN_cpu_dmem_master_r_put;
  output RDY_cpu_dmem_master_r_put;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method dm_dmi_read_addr
  input  [6 : 0] dm_dmi_read_addr_dm_addr;
  input  EN_dm_dmi_read_addr;
  output RDY_dm_dmi_read_addr;

  // actionvalue method dm_dmi_read_data
  input  EN_dm_dmi_read_data;
  output [31 : 0] dm_dmi_read_data;
  output RDY_dm_dmi_read_data;

  // action method dm_dmi_write
  input  [6 : 0] dm_dmi_write_dm_addr;
  input  [31 : 0] dm_dmi_write_dm_word;
  input  EN_dm_dmi_write;
  output RDY_dm_dmi_write;

  // actionvalue method ndm_reset_client_request_get
  input  EN_ndm_reset_client_request_get;
  output ndm_reset_client_request_get;
  output RDY_ndm_reset_client_request_get;

  // action method ndm_reset_client_response_put
  input  ndm_reset_client_response_put;
  input  EN_ndm_reset_client_response_put;
  output RDY_ndm_reset_client_response_put;

  // signals for module outputs
  wire [98 : 0] cpu_dmem_master_ar_peek, cpu_dmem_master_aw_peek;
  wire [97 : 0] cpu_imem_master_ar_peek, cpu_imem_master_aw_peek;
  wire [72 : 0] cpu_dmem_master_w_peek, cpu_imem_master_w_peek;
  wire [31 : 0] dm_dmi_read_data;
  wire RDY_cpu_dmem_master_ar_drop,
       RDY_cpu_dmem_master_ar_peek,
       RDY_cpu_dmem_master_aw_drop,
       RDY_cpu_dmem_master_aw_peek,
       RDY_cpu_dmem_master_b_put,
       RDY_cpu_dmem_master_r_put,
       RDY_cpu_dmem_master_w_drop,
       RDY_cpu_dmem_master_w_peek,
       RDY_cpu_imem_master_ar_drop,
       RDY_cpu_imem_master_ar_peek,
       RDY_cpu_imem_master_aw_drop,
       RDY_cpu_imem_master_aw_peek,
       RDY_cpu_imem_master_b_put,
       RDY_cpu_imem_master_r_put,
       RDY_cpu_imem_master_w_drop,
       RDY_cpu_imem_master_w_peek,
       RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_dm_dmi_read_addr,
       RDY_dm_dmi_read_data,
       RDY_dm_dmi_write,
       RDY_ndm_reset_client_request_get,
       RDY_ndm_reset_client_response_put,
       RDY_set_verbosity,
       cpu_dmem_master_ar_canPeek,
       cpu_dmem_master_aw_canPeek,
       cpu_dmem_master_b_canPut,
       cpu_dmem_master_r_canPut,
       cpu_dmem_master_w_canPeek,
       cpu_imem_master_ar_canPeek,
       cpu_imem_master_aw_canPeek,
       cpu_imem_master_b_canPut,
       cpu_imem_master_r_canPut,
       cpu_imem_master_w_canPeek,
       cpu_reset_server_response_get,
       ndm_reset_client_request_get;

  // inlined wires
  wire [172 : 0] split_0_doPut$wget, split_1_doPut$wget, split_2_doPut$wget;
  wire [171 : 0] merged_0_outflit$wget, merged_1_outflit$wget;
  wire [99 : 0] axi4_dmem_shim_tmp_shimMaster_arff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read,
		axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1,
		axi4_dmem_shim_tmp_shimMaster_arff_rv$port2__read,
		axi4_dmem_shim_tmp_shimMaster_arff_rv$port3__read,
		axi4_dmem_shim_tmp_shimMaster_awff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read,
		axi4_dmem_shim_tmp_shimMaster_awff_rv$port2__read,
		axi4_dmem_shim_tmp_shimMaster_awff_rv$port3__read;
  wire [98 : 0] axi4_dmem_shim_tmp_shimSlave_arff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read,
		axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1,
		axi4_dmem_shim_tmp_shimSlave_arff_rv$port2__read,
		axi4_dmem_shim_tmp_shimSlave_arff_rv$port3__read,
		axi4_dmem_shim_tmp_shimSlave_awff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimSlave_awff_rv$port1__read,
		axi4_dmem_shim_tmp_shimSlave_awff_rv$port2__read,
		axi4_dmem_shim_tmp_shimSlave_awff_rv$port3__read;
  wire [97 : 0] sinks_1_0_putWire_1$wget,
		sinks_1_1_putWire_1$wget,
		sinks_1_2_putWire$wget;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$port1__read,
		ifcs_0_noRoute_inner_currentReq$port1__read,
		ifcs_1_1_noRoute_currentReq$port1__read,
		ifcs_1_noRoute_inner_currentReq$port1__read;
  wire [74 : 0] axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read,
		axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__write_1,
		axi4_dmem_shim_tmp_shimSlave_wff_rv$port2__read,
		axi4_dmem_shim_tmp_shimSlave_wff_rv$port3__read;
  wire [73 : 0] axi4_dmem_shim_tmp_shimMaster_rff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read,
		axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1,
		axi4_dmem_shim_tmp_shimMaster_rff_rv$port2__read,
		axi4_dmem_shim_tmp_shimMaster_rff_rv$port3__read,
		axi4_dmem_shim_tmp_shimMaster_wff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read,
		axi4_dmem_shim_tmp_shimMaster_wff_rv$port2__read,
		axi4_dmem_shim_tmp_shimMaster_wff_rv$port3__read,
		axi4_dmem_shim_tmp_shimSlave_rff_rv$port0__write_1,
		axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read,
		axi4_dmem_shim_tmp_shimSlave_rff_rv$port2__read,
		axi4_dmem_shim_tmp_shimSlave_rff_rv$port3__read;
  wire [71 : 0] ifcs_0_1_snk_putWire$wget, ifcs_1_1_snk_putWire$wget;
  wire [8 : 0] axi4_dmem_shim_tmp_shimMaster_bff_rv$port0__write_1,
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__read,
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__write_1,
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port2__read,
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port3__read,
	       ifcs_0_1_noRoute_flitCount$port0__write_1,
	       ifcs_0_1_noRoute_flitCount$port1__write_1,
	       ifcs_0_1_noRoute_flitCount$port2__read,
	       ifcs_1_1_noRoute_flitCount$port0__write_1,
	       ifcs_1_1_noRoute_flitCount$port1__write_1,
	       ifcs_1_1_noRoute_flitCount$port2__read;
  wire [7 : 0] axi4_dmem_shim_tmp_shimSlave_bff_rv$port0__write_1,
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read,
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__write_1,
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port2__read,
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port3__read;
  wire [5 : 0] ifcs_0_snk_putWire$wget, ifcs_1_snk_putWire$wget;
  wire axi4_dmem_shim_tmp_shimMaster_arff_rv$EN_port0__write,
       axi4_dmem_shim_tmp_shimMaster_awff_rv$EN_port0__write,
       axi4_dmem_shim_tmp_shimMaster_wff_rv$EN_port0__write,
       axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port0__write,
       axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port1__write,
       axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port0__write,
       axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port1__write,
       axi4_dmem_shim_tmp_shimSlave_wff_rv$EN_port0__write,
       flitToSink_0$whas,
       flitToSink_1$whas,
       flitToSink_1_0$whas,
       flitToSink_1_0_1$whas,
       flitToSink_1_1$whas,
       flitToSink_1_1_0$whas,
       flitToSink_1_1_1$whas,
       flitToSink_1_1_1_1$whas,
       flitToSink_1_2$whas,
       flitToSink_2$whas,
       ifcs_0_1_snk_putWire$whas,
       ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$port1__read,
       ifcs_0_noRoute_inner_pendingReq$port2__read,
       ifcs_0_snk_putWire$whas,
       ifcs_1_1_snk_putWire$whas,
       ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$port1__read,
       ifcs_1_noRoute_inner_pendingReq$port2__read,
       ifcs_1_snk_putWire$whas,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       reqWires_0$wget,
       reqWires_1$wget,
       reqWires_1_0$wget,
       reqWires_1_0_1$wget,
       reqWires_1_1$wget,
       reqWires_1_1_0$wget,
       reqWires_1_1_1$wget,
       reqWires_1_1_1_1$wget,
       reqWires_1_1_2$wget,
       reqWires_1_2$wget,
       sourceSelect_1_0$whas,
       sourceSelect_1_0_1$whas,
       sourceSelect_1_1$whas,
       sourceSelect_1_1_1$whas,
       sourceSelect_1_2$whas;

  // register activeSource_0
  reg activeSource_0;
  wire activeSource_0$D_IN, activeSource_0$EN;

  // register activeSource_1
  reg activeSource_1;
  wire activeSource_1$D_IN, activeSource_1$EN;

  // register activeSource_1_0
  reg activeSource_1_0;
  wire activeSource_1_0$D_IN, activeSource_1_0$EN;

  // register activeSource_1_0_1
  reg activeSource_1_0_1;
  wire activeSource_1_0_1$D_IN, activeSource_1_0_1$EN;

  // register activeSource_1_1
  reg activeSource_1_1;
  wire activeSource_1_1$D_IN, activeSource_1_1$EN;

  // register activeSource_1_1_0
  reg activeSource_1_1_0;
  reg activeSource_1_1_0$D_IN;
  wire activeSource_1_1_0$EN;

  // register activeSource_1_1_1
  reg activeSource_1_1_1;
  wire activeSource_1_1_1$D_IN, activeSource_1_1_1$EN;

  // register activeSource_1_1_1_1
  reg activeSource_1_1_1_1;
  reg activeSource_1_1_1_1$D_IN;
  wire activeSource_1_1_1_1$EN;

  // register activeSource_1_1_2
  reg activeSource_1_1_2;
  reg activeSource_1_1_2$D_IN;
  wire activeSource_1_1_2$EN;

  // register activeSource_1_2
  reg activeSource_1_2;
  wire activeSource_1_2$D_IN, activeSource_1_2$EN;

  // register arbiter_1_1_firstHot
  reg arbiter_1_1_firstHot;
  wire arbiter_1_1_firstHot$D_IN, arbiter_1_1_firstHot$EN;

  // register arbiter_1_1_lastSelect
  reg arbiter_1_1_lastSelect;
  wire arbiter_1_1_lastSelect$D_IN, arbiter_1_1_lastSelect$EN;

  // register arbiter_1_1_lastSelect_1
  reg arbiter_1_1_lastSelect_1;
  wire arbiter_1_1_lastSelect_1$D_IN, arbiter_1_1_lastSelect_1$EN;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register axi4_dmem_shim_tmp_addrOffset
  reg [63 : 0] axi4_dmem_shim_tmp_addrOffset;
  wire [63 : 0] axi4_dmem_shim_tmp_addrOffset$D_IN;
  wire axi4_dmem_shim_tmp_addrOffset$EN;

  // register axi4_dmem_shim_tmp_doneSendingAW
  reg axi4_dmem_shim_tmp_doneSendingAW;
  wire axi4_dmem_shim_tmp_doneSendingAW$D_IN,
       axi4_dmem_shim_tmp_doneSendingAW$EN;

  // register axi4_dmem_shim_tmp_reset_done
  reg axi4_dmem_shim_tmp_reset_done;
  wire axi4_dmem_shim_tmp_reset_done$D_IN, axi4_dmem_shim_tmp_reset_done$EN;

  // register axi4_dmem_shim_tmp_shimMaster_arff_rv
  reg [99 : 0] axi4_dmem_shim_tmp_shimMaster_arff_rv;
  wire [99 : 0] axi4_dmem_shim_tmp_shimMaster_arff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimMaster_arff_rv$EN;

  // register axi4_dmem_shim_tmp_shimMaster_awff_rv
  reg [99 : 0] axi4_dmem_shim_tmp_shimMaster_awff_rv;
  wire [99 : 0] axi4_dmem_shim_tmp_shimMaster_awff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimMaster_awff_rv$EN;

  // register axi4_dmem_shim_tmp_shimMaster_bff_rv
  reg [8 : 0] axi4_dmem_shim_tmp_shimMaster_bff_rv;
  wire [8 : 0] axi4_dmem_shim_tmp_shimMaster_bff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimMaster_bff_rv$EN;

  // register axi4_dmem_shim_tmp_shimMaster_rff_rv
  reg [73 : 0] axi4_dmem_shim_tmp_shimMaster_rff_rv;
  wire [73 : 0] axi4_dmem_shim_tmp_shimMaster_rff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimMaster_rff_rv$EN;

  // register axi4_dmem_shim_tmp_shimMaster_wff_rv
  reg [73 : 0] axi4_dmem_shim_tmp_shimMaster_wff_rv;
  wire [73 : 0] axi4_dmem_shim_tmp_shimMaster_wff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimMaster_wff_rv$EN;

  // register axi4_dmem_shim_tmp_shimSlave_arff_rv
  reg [98 : 0] axi4_dmem_shim_tmp_shimSlave_arff_rv;
  wire [98 : 0] axi4_dmem_shim_tmp_shimSlave_arff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimSlave_arff_rv$EN;

  // register axi4_dmem_shim_tmp_shimSlave_awff_rv
  reg [98 : 0] axi4_dmem_shim_tmp_shimSlave_awff_rv;
  wire [98 : 0] axi4_dmem_shim_tmp_shimSlave_awff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimSlave_awff_rv$EN;

  // register axi4_dmem_shim_tmp_shimSlave_bff_rv
  reg [7 : 0] axi4_dmem_shim_tmp_shimSlave_bff_rv;
  wire [7 : 0] axi4_dmem_shim_tmp_shimSlave_bff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimSlave_bff_rv$EN;

  // register axi4_dmem_shim_tmp_shimSlave_rff_rv
  reg [73 : 0] axi4_dmem_shim_tmp_shimSlave_rff_rv;
  wire [73 : 0] axi4_dmem_shim_tmp_shimSlave_rff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimSlave_rff_rv$EN;

  // register axi4_dmem_shim_tmp_shimSlave_wff_rv
  reg [74 : 0] axi4_dmem_shim_tmp_shimSlave_wff_rv;
  wire [74 : 0] axi4_dmem_shim_tmp_shimSlave_wff_rv$D_IN;
  wire axi4_dmem_shim_tmp_shimSlave_wff_rv$EN;

  // register ifcs_0_1_noRoute_currentReq
  reg [96 : 0] ifcs_0_1_noRoute_currentReq;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$D_IN;
  wire ifcs_0_1_noRoute_currentReq$EN;

  // register ifcs_0_1_noRoute_flitCount
  reg [8 : 0] ifcs_0_1_noRoute_flitCount;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$D_IN;
  wire ifcs_0_1_noRoute_flitCount$EN;

  // register ifcs_0_1_state
  reg [1 : 0] ifcs_0_1_state;
  wire [1 : 0] ifcs_0_1_state$D_IN;
  wire ifcs_0_1_state$EN;

  // register ifcs_0_1_state_1
  reg ifcs_0_1_state_1;
  wire ifcs_0_1_state_1$D_IN, ifcs_0_1_state_1$EN;

  // register ifcs_0_noRoute_inner_currentReq
  reg [96 : 0] ifcs_0_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_0_noRoute_inner_currentReq$D_IN;
  wire ifcs_0_noRoute_inner_currentReq$EN;

  // register ifcs_0_noRoute_inner_pendingReq
  reg ifcs_0_noRoute_inner_pendingReq;
  wire ifcs_0_noRoute_inner_pendingReq$D_IN,
       ifcs_0_noRoute_inner_pendingReq$EN;

  // register ifcs_0_state
  reg [1 : 0] ifcs_0_state;
  reg [1 : 0] ifcs_0_state$D_IN;
  wire ifcs_0_state$EN;

  // register ifcs_0_state_1
  reg ifcs_0_state_1;
  wire ifcs_0_state_1$D_IN, ifcs_0_state_1$EN;

  // register ifcs_1_1_noRoute_currentReq
  reg [96 : 0] ifcs_1_1_noRoute_currentReq;
  wire [96 : 0] ifcs_1_1_noRoute_currentReq$D_IN;
  wire ifcs_1_1_noRoute_currentReq$EN;

  // register ifcs_1_1_noRoute_flitCount
  reg [8 : 0] ifcs_1_1_noRoute_flitCount;
  wire [8 : 0] ifcs_1_1_noRoute_flitCount$D_IN;
  wire ifcs_1_1_noRoute_flitCount$EN;

  // register ifcs_1_1_state
  reg [1 : 0] ifcs_1_1_state;
  wire [1 : 0] ifcs_1_1_state$D_IN;
  wire ifcs_1_1_state$EN;

  // register ifcs_1_1_state_1
  reg ifcs_1_1_state_1;
  wire ifcs_1_1_state_1$D_IN, ifcs_1_1_state_1$EN;

  // register ifcs_1_noRoute_inner_currentReq
  reg [96 : 0] ifcs_1_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_1_noRoute_inner_currentReq$D_IN;
  wire ifcs_1_noRoute_inner_currentReq$EN;

  // register ifcs_1_noRoute_inner_pendingReq
  reg ifcs_1_noRoute_inner_pendingReq;
  wire ifcs_1_noRoute_inner_pendingReq$D_IN,
       ifcs_1_noRoute_inner_pendingReq$EN;

  // register ifcs_1_state
  reg [1 : 0] ifcs_1_state;
  reg [1 : 0] ifcs_1_state$D_IN;
  wire ifcs_1_state$EN;

  // register ifcs_1_state_1
  reg ifcs_1_state_1;
  wire ifcs_1_state_1$D_IN, ifcs_1_state_1$EN;

  // register ifcs_2_1_state
  reg ifcs_2_1_state;
  wire ifcs_2_1_state$D_IN, ifcs_2_1_state$EN;

  // register ifcs_2_state
  reg ifcs_2_state;
  wire ifcs_2_state$D_IN, ifcs_2_state$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // register state_1_1
  reg state_1_1;
  wire state_1_1$D_IN, state_1_1$EN;

  // register state_1_1_1
  reg state_1_1_1;
  wire state_1_1_1$D_IN, state_1_1_1$EN;

  // ports of submodule axi4_dmem_shim_tmp_awreqff
  wire [97 : 0] axi4_dmem_shim_tmp_awreqff$D_IN,
		axi4_dmem_shim_tmp_awreqff$D_OUT;
  wire axi4_dmem_shim_tmp_awreqff$CLR,
       axi4_dmem_shim_tmp_awreqff$DEQ,
       axi4_dmem_shim_tmp_awreqff$EMPTY_N,
       axi4_dmem_shim_tmp_awreqff$ENQ,
       axi4_dmem_shim_tmp_awreqff$FULL_N;

  // ports of submodule axi4_dmem_shim_tmp_newRst
  wire axi4_dmem_shim_tmp_newRst$ASSERT_IN, axi4_dmem_shim_tmp_newRst$OUT_RST;

  // ports of submodule axi4_dmem_shim_tmp_tagCon
  wire [140 : 0] axi4_dmem_shim_tmp_tagCon$cache_request_put_val,
		 axi4_dmem_shim_tmp_tagCon$memory_request_get;
  wire [76 : 0] axi4_dmem_shim_tmp_tagCon$cache_response_get,
		axi4_dmem_shim_tmp_tagCon$memory_response_put_val;
  wire axi4_dmem_shim_tmp_tagCon$EN_cache_request_put,
       axi4_dmem_shim_tmp_tagCon$EN_cache_response_get,
       axi4_dmem_shim_tmp_tagCon$EN_memory_request_get,
       axi4_dmem_shim_tmp_tagCon$EN_memory_response_put,
       axi4_dmem_shim_tmp_tagCon$RDY_cache_request_put,
       axi4_dmem_shim_tmp_tagCon$RDY_cache_response_get,
       axi4_dmem_shim_tmp_tagCon$RDY_memory_request_get,
       axi4_dmem_shim_tmp_tagCon$RDY_memory_response_put;

  // ports of submodule cpu
  wire [97 : 0] cpu$imem_master_ar_peek, cpu$imem_master_aw_peek;
  wire [96 : 0] cpu$dmem_master_ar_peek, cpu$dmem_master_aw_peek;
  wire [76 : 0] cpu$hart0_csr_mem_server_request_put;
  wire [73 : 0] cpu$dmem_master_w_peek, cpu$imem_master_w_peek;
  wire [72 : 0] cpu$imem_master_r_put_val;
  wire [71 : 0] cpu$dmem_master_r_put_val;
  wire [69 : 0] cpu$hart0_fpr_mem_server_request_put,
		cpu$hart0_gpr_mem_server_request_put;
  wire [64 : 0] cpu$hart0_csr_mem_server_response_get,
		cpu$hart0_fpr_mem_server_response_get,
		cpu$hart0_gpr_mem_server_response_get;
  wire [63 : 0] cpu$set_verbosity_logdelay;
  wire [6 : 0] cpu$imem_master_b_put_val;
  wire [5 : 0] cpu$dmem_master_b_put_val;
  wire [3 : 0] cpu$hart0_put_other_req_put, cpu$set_verbosity_verbosity;
  wire cpu$EN_dmem_master_ar_drop,
       cpu$EN_dmem_master_aw_drop,
       cpu$EN_dmem_master_b_put,
       cpu$EN_dmem_master_r_put,
       cpu$EN_dmem_master_w_drop,
       cpu$EN_hart0_csr_mem_server_request_put,
       cpu$EN_hart0_csr_mem_server_response_get,
       cpu$EN_hart0_fpr_mem_server_request_put,
       cpu$EN_hart0_fpr_mem_server_response_get,
       cpu$EN_hart0_gpr_mem_server_request_put,
       cpu$EN_hart0_gpr_mem_server_response_get,
       cpu$EN_hart0_put_other_req_put,
       cpu$EN_hart0_server_reset_request_put,
       cpu$EN_hart0_server_reset_response_get,
       cpu$EN_hart0_server_run_halt_request_put,
       cpu$EN_hart0_server_run_halt_response_get,
       cpu$EN_imem_master_ar_drop,
       cpu$EN_imem_master_aw_drop,
       cpu$EN_imem_master_b_put,
       cpu$EN_imem_master_r_put,
       cpu$EN_imem_master_w_drop,
       cpu$EN_set_verbosity,
       cpu$RDY_dmem_master_ar_drop,
       cpu$RDY_dmem_master_ar_peek,
       cpu$RDY_dmem_master_aw_drop,
       cpu$RDY_dmem_master_aw_peek,
       cpu$RDY_dmem_master_b_put,
       cpu$RDY_dmem_master_r_put,
       cpu$RDY_dmem_master_w_drop,
       cpu$RDY_dmem_master_w_peek,
       cpu$RDY_hart0_csr_mem_server_request_put,
       cpu$RDY_hart0_csr_mem_server_response_get,
       cpu$RDY_hart0_fpr_mem_server_request_put,
       cpu$RDY_hart0_fpr_mem_server_response_get,
       cpu$RDY_hart0_gpr_mem_server_request_put,
       cpu$RDY_hart0_gpr_mem_server_response_get,
       cpu$RDY_hart0_server_reset_request_put,
       cpu$RDY_hart0_server_reset_response_get,
       cpu$RDY_hart0_server_run_halt_request_put,
       cpu$RDY_hart0_server_run_halt_response_get,
       cpu$RDY_imem_master_ar_drop,
       cpu$RDY_imem_master_ar_peek,
       cpu$RDY_imem_master_aw_drop,
       cpu$RDY_imem_master_aw_peek,
       cpu$RDY_imem_master_b_put,
       cpu$RDY_imem_master_r_put,
       cpu$RDY_imem_master_w_drop,
       cpu$RDY_imem_master_w_peek,
       cpu$dmem_master_ar_canPeek,
       cpu$dmem_master_b_canPut,
       cpu$dmem_master_r_canPut,
       cpu$hart0_server_reset_request_put,
       cpu$hart0_server_reset_response_get,
       cpu$hart0_server_run_halt_request_put,
       cpu$hart0_server_run_halt_response_get,
       cpu$imem_master_ar_canPeek,
       cpu$imem_master_aw_canPeek,
       cpu$imem_master_b_canPut,
       cpu$imem_master_r_canPut,
       cpu$imem_master_w_canPeek,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$nmi_req_set_not_clear,
       cpu$s_external_interrupt_req_set_not_clear,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule debug_module
  wire [96 : 0] debug_module$master_ar_peek, debug_module$master_aw_peek;
  wire [76 : 0] debug_module$hart0_csr_mem_client_request_get;
  wire [73 : 0] debug_module$master_w_peek;
  wire [71 : 0] debug_module$master_r_put_val;
  wire [69 : 0] debug_module$hart0_fpr_mem_client_request_get,
		debug_module$hart0_gpr_mem_client_request_get;
  wire [64 : 0] debug_module$hart0_csr_mem_client_response_put,
		debug_module$hart0_fpr_mem_client_response_put,
		debug_module$hart0_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data, debug_module$dmi_write_dm_word;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire [5 : 0] debug_module$master_b_put_val;
  wire [3 : 0] debug_module$hart0_get_other_req_get;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_client_run_halt_request_get,
       debug_module$EN_hart0_client_run_halt_response_put,
       debug_module$EN_hart0_csr_mem_client_request_get,
       debug_module$EN_hart0_csr_mem_client_response_put,
       debug_module$EN_hart0_fpr_mem_client_request_get,
       debug_module$EN_hart0_fpr_mem_client_response_put,
       debug_module$EN_hart0_get_other_req_get,
       debug_module$EN_hart0_gpr_mem_client_request_get,
       debug_module$EN_hart0_gpr_mem_client_response_put,
       debug_module$EN_hart0_reset_client_request_get,
       debug_module$EN_hart0_reset_client_response_put,
       debug_module$EN_master_ar_drop,
       debug_module$EN_master_aw_drop,
       debug_module$EN_master_b_put,
       debug_module$EN_master_r_put,
       debug_module$EN_master_w_drop,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_client_run_halt_request_get,
       debug_module$RDY_hart0_client_run_halt_response_put,
       debug_module$RDY_hart0_csr_mem_client_request_get,
       debug_module$RDY_hart0_csr_mem_client_response_put,
       debug_module$RDY_hart0_fpr_mem_client_request_get,
       debug_module$RDY_hart0_fpr_mem_client_response_put,
       debug_module$RDY_hart0_get_other_req_get,
       debug_module$RDY_hart0_gpr_mem_client_request_get,
       debug_module$RDY_hart0_gpr_mem_client_response_put,
       debug_module$RDY_hart0_reset_client_request_get,
       debug_module$RDY_hart0_reset_client_response_put,
       debug_module$RDY_master_ar_drop,
       debug_module$RDY_master_ar_peek,
       debug_module$RDY_master_aw_drop,
       debug_module$RDY_master_aw_peek,
       debug_module$RDY_master_b_put,
       debug_module$RDY_master_r_put,
       debug_module$RDY_master_w_drop,
       debug_module$RDY_master_w_peek,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$hart0_client_run_halt_request_get,
       debug_module$hart0_client_run_halt_response_put,
       debug_module$hart0_reset_client_request_get,
       debug_module$hart0_reset_client_response_put,
       debug_module$master_ar_canPeek,
       debug_module$master_b_canPut,
       debug_module$master_r_canPut,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule delay_shim_arff
  wire [97 : 0] delay_shim_arff$D_IN, delay_shim_arff$D_OUT;
  wire delay_shim_arff$CLR,
       delay_shim_arff$DEQ,
       delay_shim_arff$EMPTY_N,
       delay_shim_arff$ENQ,
       delay_shim_arff$FULL_N;

  // ports of submodule delay_shim_awff
  wire [97 : 0] delay_shim_awff$D_IN, delay_shim_awff$D_OUT;
  wire delay_shim_awff$CLR,
       delay_shim_awff$DEQ,
       delay_shim_awff$EMPTY_N,
       delay_shim_awff$ENQ,
       delay_shim_awff$FULL_N;

  // ports of submodule delay_shim_bff
  wire [6 : 0] delay_shim_bff$D_IN, delay_shim_bff$D_OUT;
  wire delay_shim_bff$CLR,
       delay_shim_bff$DEQ,
       delay_shim_bff$EMPTY_N,
       delay_shim_bff$ENQ,
       delay_shim_bff$FULL_N;

  // ports of submodule delay_shim_rff
  wire [72 : 0] delay_shim_rff$D_IN, delay_shim_rff$D_OUT;
  wire delay_shim_rff$CLR,
       delay_shim_rff$DEQ,
       delay_shim_rff$EMPTY_N,
       delay_shim_rff$ENQ,
       delay_shim_rff$FULL_N;

  // ports of submodule delay_shim_wff
  wire [73 : 0] delay_shim_wff$D_IN, delay_shim_wff$D_OUT;
  wire delay_shim_wff$CLR,
       delay_shim_wff$DEQ,
       delay_shim_wff$EMPTY_N,
       delay_shim_wff$ENQ,
       delay_shim_wff$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ifcs_0_1_innerReq
  wire [97 : 0] ifcs_0_1_innerReq$D_IN, ifcs_0_1_innerReq$D_OUT;
  wire ifcs_0_1_innerReq$CLR,
       ifcs_0_1_innerReq$DEQ,
       ifcs_0_1_innerReq$EMPTY_N,
       ifcs_0_1_innerReq$ENQ,
       ifcs_0_1_innerReq$FULL_N;

  // ports of submodule ifcs_0_1_innerRoute
  wire [2 : 0] ifcs_0_1_innerRoute$D_IN, ifcs_0_1_innerRoute$D_OUT;
  wire ifcs_0_1_innerRoute$CLR,
       ifcs_0_1_innerRoute$DEQ,
       ifcs_0_1_innerRoute$EMPTY_N,
       ifcs_0_1_innerRoute$ENQ,
       ifcs_0_1_innerRoute$FULL_N;

  // ports of submodule ifcs_0_1_noRouteRsp
  wire [71 : 0] ifcs_0_1_noRouteRsp$D_IN, ifcs_0_1_noRouteRsp$D_OUT;
  wire ifcs_0_1_noRouteRsp$CLR,
       ifcs_0_1_noRouteRsp$DEQ,
       ifcs_0_1_noRouteRsp$EMPTY_N,
       ifcs_0_1_noRouteRsp$ENQ,
       ifcs_0_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_1_routeBack
  wire [1 : 0] ifcs_0_1_routeBack$D_IN, ifcs_0_1_routeBack$D_OUT;
  wire ifcs_0_1_routeBack$CLR,
       ifcs_0_1_routeBack$DEQ,
       ifcs_0_1_routeBack$EMPTY_N,
       ifcs_0_1_routeBack$ENQ,
       ifcs_0_1_routeBack$FULL_N;

  // ports of submodule ifcs_0_1_rspBack
  wire [71 : 0] ifcs_0_1_rspBack$D_IN, ifcs_0_1_rspBack$D_OUT;
  wire ifcs_0_1_rspBack$CLR,
       ifcs_0_1_rspBack$DEQ,
       ifcs_0_1_rspBack$EMPTY_N,
       ifcs_0_1_rspBack$ENQ,
       ifcs_0_1_rspBack$FULL_N;

  // ports of submodule ifcs_0_innerReq
  wire [172 : 0] ifcs_0_innerReq$D_IN, ifcs_0_innerReq$D_OUT;
  wire ifcs_0_innerReq$CLR,
       ifcs_0_innerReq$DEQ,
       ifcs_0_innerReq$EMPTY_N,
       ifcs_0_innerReq$ENQ,
       ifcs_0_innerReq$FULL_N;

  // ports of submodule ifcs_0_innerRoute
  wire [2 : 0] ifcs_0_innerRoute$D_IN, ifcs_0_innerRoute$D_OUT;
  wire ifcs_0_innerRoute$CLR,
       ifcs_0_innerRoute$DEQ,
       ifcs_0_innerRoute$EMPTY_N,
       ifcs_0_innerRoute$ENQ,
       ifcs_0_innerRoute$FULL_N;

  // ports of submodule ifcs_0_noRouteRsp
  wire [5 : 0] ifcs_0_noRouteRsp$D_IN, ifcs_0_noRouteRsp$D_OUT;
  wire ifcs_0_noRouteRsp$CLR,
       ifcs_0_noRouteRsp$DEQ,
       ifcs_0_noRouteRsp$EMPTY_N,
       ifcs_0_noRouteRsp$ENQ,
       ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_routeBack
  wire [1 : 0] ifcs_0_routeBack$D_IN, ifcs_0_routeBack$D_OUT;
  wire ifcs_0_routeBack$CLR,
       ifcs_0_routeBack$DEQ,
       ifcs_0_routeBack$EMPTY_N,
       ifcs_0_routeBack$ENQ,
       ifcs_0_routeBack$FULL_N;

  // ports of submodule ifcs_0_rspBack
  wire [5 : 0] ifcs_0_rspBack$D_IN, ifcs_0_rspBack$D_OUT;
  wire ifcs_0_rspBack$CLR,
       ifcs_0_rspBack$DEQ,
       ifcs_0_rspBack$EMPTY_N,
       ifcs_0_rspBack$ENQ,
       ifcs_0_rspBack$FULL_N;

  // ports of submodule ifcs_1_1_innerReq
  wire [97 : 0] ifcs_1_1_innerReq$D_IN, ifcs_1_1_innerReq$D_OUT;
  wire ifcs_1_1_innerReq$CLR,
       ifcs_1_1_innerReq$DEQ,
       ifcs_1_1_innerReq$EMPTY_N,
       ifcs_1_1_innerReq$ENQ,
       ifcs_1_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_1_innerRoute
  wire [2 : 0] ifcs_1_1_innerRoute$D_IN, ifcs_1_1_innerRoute$D_OUT;
  wire ifcs_1_1_innerRoute$CLR,
       ifcs_1_1_innerRoute$DEQ,
       ifcs_1_1_innerRoute$EMPTY_N,
       ifcs_1_1_innerRoute$ENQ,
       ifcs_1_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_1_noRouteRsp
  wire [71 : 0] ifcs_1_1_noRouteRsp$D_IN, ifcs_1_1_noRouteRsp$D_OUT;
  wire ifcs_1_1_noRouteRsp$CLR,
       ifcs_1_1_noRouteRsp$DEQ,
       ifcs_1_1_noRouteRsp$EMPTY_N,
       ifcs_1_1_noRouteRsp$ENQ,
       ifcs_1_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_1_routeBack
  wire [1 : 0] ifcs_1_1_routeBack$D_IN, ifcs_1_1_routeBack$D_OUT;
  wire ifcs_1_1_routeBack$CLR,
       ifcs_1_1_routeBack$DEQ,
       ifcs_1_1_routeBack$EMPTY_N,
       ifcs_1_1_routeBack$ENQ,
       ifcs_1_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_1_rspBack
  wire [71 : 0] ifcs_1_1_rspBack$D_IN, ifcs_1_1_rspBack$D_OUT;
  wire ifcs_1_1_rspBack$CLR,
       ifcs_1_1_rspBack$DEQ,
       ifcs_1_1_rspBack$EMPTY_N,
       ifcs_1_1_rspBack$ENQ,
       ifcs_1_1_rspBack$FULL_N;

  // ports of submodule ifcs_1_innerReq
  wire [172 : 0] ifcs_1_innerReq$D_IN, ifcs_1_innerReq$D_OUT;
  wire ifcs_1_innerReq$CLR,
       ifcs_1_innerReq$DEQ,
       ifcs_1_innerReq$EMPTY_N,
       ifcs_1_innerReq$ENQ,
       ifcs_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_innerRoute
  wire [2 : 0] ifcs_1_innerRoute$D_IN, ifcs_1_innerRoute$D_OUT;
  wire ifcs_1_innerRoute$CLR,
       ifcs_1_innerRoute$DEQ,
       ifcs_1_innerRoute$EMPTY_N,
       ifcs_1_innerRoute$ENQ,
       ifcs_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_noRouteRsp
  wire [5 : 0] ifcs_1_noRouteRsp$D_IN, ifcs_1_noRouteRsp$D_OUT;
  wire ifcs_1_noRouteRsp$CLR,
       ifcs_1_noRouteRsp$DEQ,
       ifcs_1_noRouteRsp$EMPTY_N,
       ifcs_1_noRouteRsp$ENQ,
       ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_routeBack
  wire [1 : 0] ifcs_1_routeBack$D_IN, ifcs_1_routeBack$D_OUT;
  wire ifcs_1_routeBack$CLR,
       ifcs_1_routeBack$DEQ,
       ifcs_1_routeBack$EMPTY_N,
       ifcs_1_routeBack$ENQ,
       ifcs_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_rspBack
  wire [5 : 0] ifcs_1_rspBack$D_IN, ifcs_1_rspBack$D_OUT;
  wire ifcs_1_rspBack$CLR,
       ifcs_1_rspBack$DEQ,
       ifcs_1_rspBack$EMPTY_N,
       ifcs_1_rspBack$ENQ,
       ifcs_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_1_routeBack
  wire [1 : 0] ifcs_2_1_routeBack$D_IN, ifcs_2_1_routeBack$D_OUT;
  wire ifcs_2_1_routeBack$CLR,
       ifcs_2_1_routeBack$DEQ,
       ifcs_2_1_routeBack$EMPTY_N,
       ifcs_2_1_routeBack$ENQ,
       ifcs_2_1_routeBack$FULL_N;

  // ports of submodule ifcs_2_1_rspBack
  wire [71 : 0] ifcs_2_1_rspBack$D_IN, ifcs_2_1_rspBack$D_OUT;
  wire ifcs_2_1_rspBack$CLR,
       ifcs_2_1_rspBack$DEQ,
       ifcs_2_1_rspBack$EMPTY_N,
       ifcs_2_1_rspBack$ENQ,
       ifcs_2_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_routeBack
  wire [1 : 0] ifcs_2_routeBack$D_IN, ifcs_2_routeBack$D_OUT;
  wire ifcs_2_routeBack$CLR,
       ifcs_2_routeBack$DEQ,
       ifcs_2_routeBack$EMPTY_N,
       ifcs_2_routeBack$ENQ,
       ifcs_2_routeBack$FULL_N;

  // ports of submodule ifcs_2_rspBack
  wire [5 : 0] ifcs_2_rspBack$D_IN, ifcs_2_rspBack$D_OUT;
  wire ifcs_2_rspBack$CLR,
       ifcs_2_rspBack$DEQ,
       ifcs_2_rspBack$EMPTY_N,
       ifcs_2_rspBack$ENQ,
       ifcs_2_rspBack$FULL_N;

  // ports of submodule merged_0_awff
  wire [96 : 0] merged_0_awff$D_IN, merged_0_awff$D_OUT;
  wire merged_0_awff$CLR,
       merged_0_awff$DEQ,
       merged_0_awff$EMPTY_N,
       merged_0_awff$ENQ,
       merged_0_awff$FULL_N;

  // ports of submodule merged_0_wff
  wire [73 : 0] merged_0_wff$D_IN, merged_0_wff$D_OUT;
  wire merged_0_wff$CLR,
       merged_0_wff$DEQ,
       merged_0_wff$EMPTY_N,
       merged_0_wff$ENQ,
       merged_0_wff$FULL_N;

  // ports of submodule merged_1_awff
  wire [96 : 0] merged_1_awff$D_IN, merged_1_awff$D_OUT;
  wire merged_1_awff$CLR,
       merged_1_awff$DEQ,
       merged_1_awff$EMPTY_N,
       merged_1_awff$ENQ,
       merged_1_awff$FULL_N;

  // ports of submodule merged_1_wff
  wire [73 : 0] merged_1_wff$D_IN, merged_1_wff$D_OUT;
  wire merged_1_wff$CLR,
       merged_1_wff$DEQ,
       merged_1_wff$EMPTY_N,
       merged_1_wff$ENQ,
       merged_1_wff$FULL_N;

  // ports of submodule near_mem_io
  wire [97 : 0] near_mem_io$axi4_slave_ar_put_val,
		near_mem_io$axi4_slave_aw_put_val;
  wire [72 : 0] near_mem_io$axi4_slave_w_put_val;
  wire [71 : 0] near_mem_io$axi4_slave_r_peek;
  wire [63 : 0] near_mem_io$set_addr_map_addr_base,
		near_mem_io$set_addr_map_addr_lim;
  wire [6 : 0] near_mem_io$axi4_slave_b_peek;
  wire near_mem_io$EN_axi4_slave_ar_put,
       near_mem_io$EN_axi4_slave_aw_put,
       near_mem_io$EN_axi4_slave_b_drop,
       near_mem_io$EN_axi4_slave_r_drop,
       near_mem_io$EN_axi4_slave_w_put,
       near_mem_io$EN_get_sw_interrupt_req_get,
       near_mem_io$EN_get_timer_interrupt_req_get,
       near_mem_io$EN_server_reset_request_put,
       near_mem_io$EN_server_reset_response_get,
       near_mem_io$EN_set_addr_map,
       near_mem_io$RDY_axi4_slave_ar_put,
       near_mem_io$RDY_axi4_slave_aw_put,
       near_mem_io$RDY_axi4_slave_b_drop,
       near_mem_io$RDY_axi4_slave_b_peek,
       near_mem_io$RDY_axi4_slave_r_drop,
       near_mem_io$RDY_axi4_slave_r_peek,
       near_mem_io$RDY_axi4_slave_w_put,
       near_mem_io$RDY_get_sw_interrupt_req_get,
       near_mem_io$RDY_get_timer_interrupt_req_get,
       near_mem_io$RDY_server_reset_request_put,
       near_mem_io$RDY_server_reset_response_get,
       near_mem_io$axi4_slave_ar_canPut,
       near_mem_io$axi4_slave_aw_canPut,
       near_mem_io$axi4_slave_b_canPeek,
       near_mem_io$axi4_slave_r_canPeek,
       near_mem_io$axi4_slave_w_canPut,
       near_mem_io$get_sw_interrupt_req_get,
       near_mem_io$get_timer_interrupt_req_get;

  // ports of submodule plic
  wire [97 : 0] plic$axi4_slave_ar_put_val, plic$axi4_slave_aw_put_val;
  wire [72 : 0] plic$axi4_slave_w_put_val;
  wire [71 : 0] plic$axi4_slave_r_peek;
  wire [63 : 0] plic$set_addr_map_addr_base, plic$set_addr_map_addr_lim;
  wire [6 : 0] plic$axi4_slave_b_peek;
  wire [3 : 0] plic$set_verbosity_verbosity;
  wire plic$EN_axi4_slave_ar_put,
       plic$EN_axi4_slave_aw_put,
       plic$EN_axi4_slave_b_drop,
       plic$EN_axi4_slave_r_drop,
       plic$EN_axi4_slave_w_put,
       plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$RDY_axi4_slave_ar_put,
       plic$RDY_axi4_slave_aw_put,
       plic$RDY_axi4_slave_b_drop,
       plic$RDY_axi4_slave_b_peek,
       plic$RDY_axi4_slave_r_drop,
       plic$RDY_axi4_slave_r_peek,
       plic$RDY_axi4_slave_w_put,
       plic$RDY_server_reset_request_put,
       plic$RDY_server_reset_response_get,
       plic$axi4_slave_ar_canPut,
       plic$axi4_slave_aw_canPut,
       plic$axi4_slave_b_canPeek,
       plic$axi4_slave_r_canPeek,
       plic$axi4_slave_w_canPut,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_near_mem_io_addr_range, soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite,
       CAN_FIRE_RL_axi4_dmem_shim_tmp_propagateReset,
       CAN_FIRE_RL_burst,
       CAN_FIRE_RL_burst_1,
       CAN_FIRE_RL_burst_2,
       CAN_FIRE_RL_burst_3,
       CAN_FIRE_RL_burst_4,
       CAN_FIRE_RL_burst_5,
       CAN_FIRE_RL_burst_6,
       CAN_FIRE_RL_burst_7,
       CAN_FIRE_RL_burst_8,
       CAN_FIRE_RL_burst_9,
       CAN_FIRE_RL_checkSinkReady,
       CAN_FIRE_RL_checkSinkReady_1,
       CAN_FIRE_RL_checkSinkReady_2,
       CAN_FIRE_RL_checkSinkReady_3,
       CAN_FIRE_RL_checkSinkReady_4,
       CAN_FIRE_RL_checkSinkReady_5,
       CAN_FIRE_RL_checkSinkReady_6,
       CAN_FIRE_RL_checkSinkReady_7,
       CAN_FIRE_RL_checkSinkReady_8,
       CAN_FIRE_RL_checkSinkReady_9,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_2,
       CAN_FIRE_RL_connect_3,
       CAN_FIRE_RL_connect_4,
       CAN_FIRE_RL_craftReq,
       CAN_FIRE_RL_craftReq_1,
       CAN_FIRE_RL_craftReq_2,
       CAN_FIRE_RL_craftReq_3,
       CAN_FIRE_RL_craftReq_4,
       CAN_FIRE_RL_craftReq_5,
       CAN_FIRE_RL_craftReq_6,
       CAN_FIRE_RL_craftReq_7,
       CAN_FIRE_RL_craftReq_8,
       CAN_FIRE_RL_craftReq_9,
       CAN_FIRE_RL_ifcs_0_1_drainFlits,
       CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_1_firstFlit,
       CAN_FIRE_RL_ifcs_0_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_1_followFlits,
       CAN_FIRE_RL_ifcs_0_1_followFlits_1,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_1_snk_doPut,
       CAN_FIRE_RL_ifcs_0_1_snk_warnDoPut,
       CAN_FIRE_RL_ifcs_0_drainFlits,
       CAN_FIRE_RL_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_firstFlit,
       CAN_FIRE_RL_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_followFlits,
       CAN_FIRE_RL_ifcs_0_followFlits_1,
       CAN_FIRE_RL_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_snk_doPut,
       CAN_FIRE_RL_ifcs_0_snk_warnDoPut,
       CAN_FIRE_RL_ifcs_1_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_1_followFlits,
       CAN_FIRE_RL_ifcs_1_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_1_snk_doPut,
       CAN_FIRE_RL_ifcs_1_1_snk_warnDoPut,
       CAN_FIRE_RL_ifcs_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_followFlits,
       CAN_FIRE_RL_ifcs_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_snk_doPut,
       CAN_FIRE_RL_ifcs_1_snk_warnDoPut,
       CAN_FIRE_RL_ifcs_2_1_firstFlit,
       CAN_FIRE_RL_ifcs_2_1_followFlits,
       CAN_FIRE_RL_ifcs_2_firstFlit,
       CAN_FIRE_RL_ifcs_2_followFlits,
       CAN_FIRE_RL_merged_0_awFlit,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_0_passFlit,
       CAN_FIRE_RL_merged_0_wFlit,
       CAN_FIRE_RL_merged_1_awFlit,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_merged_1_passFlit,
       CAN_FIRE_RL_merged_1_wFlit,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_sink_selected,
       CAN_FIRE_RL_sink_selected_1,
       CAN_FIRE_RL_sink_selected_2,
       CAN_FIRE_RL_sink_selected_3,
       CAN_FIRE_RL_sink_selected_4,
       CAN_FIRE_RL_sink_selected_5,
       CAN_FIRE_RL_sink_selected_6,
       CAN_FIRE_RL_sink_selected_7,
       CAN_FIRE_RL_sink_selected_8,
       CAN_FIRE_RL_sink_selected_9,
       CAN_FIRE_RL_sinks_0_doPut,
       CAN_FIRE_RL_sinks_0_warnDoPut,
       CAN_FIRE_RL_sinks_1_0_doPut,
       CAN_FIRE_RL_sinks_1_0_doPut_1,
       CAN_FIRE_RL_sinks_1_0_warnDoPut,
       CAN_FIRE_RL_sinks_1_0_warnDoPut_1,
       CAN_FIRE_RL_sinks_1_1_0_doPut,
       CAN_FIRE_RL_sinks_1_1_0_warnDoPut,
       CAN_FIRE_RL_sinks_1_1_1_doPut,
       CAN_FIRE_RL_sinks_1_1_1_warnDoPut,
       CAN_FIRE_RL_sinks_1_1_doPut,
       CAN_FIRE_RL_sinks_1_1_doPut_1,
       CAN_FIRE_RL_sinks_1_1_warnDoPut,
       CAN_FIRE_RL_sinks_1_1_warnDoPut_1,
       CAN_FIRE_RL_sinks_1_2_doPut,
       CAN_FIRE_RL_sinks_1_2_warnDoPut,
       CAN_FIRE_RL_sinks_1_doPut,
       CAN_FIRE_RL_sinks_1_warnDoPut,
       CAN_FIRE_RL_sinks_2_doPut,
       CAN_FIRE_RL_sinks_2_warnDoPut,
       CAN_FIRE_RL_source_selected,
       CAN_FIRE_RL_source_selected_1,
       CAN_FIRE_RL_source_selected_2,
       CAN_FIRE_RL_source_selected_3,
       CAN_FIRE_RL_source_selected_4,
       CAN_FIRE_RL_source_selected_5,
       CAN_FIRE_RL_source_selected_6,
       CAN_FIRE_RL_source_selected_7,
       CAN_FIRE_RL_source_selected_8,
       CAN_FIRE_RL_source_selected_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_ug_snk_1_doPut,
       CAN_FIRE_RL_ug_snk_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_doPut,
       CAN_FIRE_RL_ug_snk_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_doPut,
       CAN_FIRE_RL_ug_snk_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_4_doPut,
       CAN_FIRE_RL_ug_snk_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_doPut,
       CAN_FIRE_RL_ug_snk_warnDoPut,
       CAN_FIRE_RL_ug_src_1_doDrop,
       CAN_FIRE_RL_ug_src_1_setPeek,
       CAN_FIRE_RL_ug_src_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_doDrop,
       CAN_FIRE_RL_ug_src_2_setPeek,
       CAN_FIRE_RL_ug_src_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_doDrop,
       CAN_FIRE_RL_ug_src_3_setPeek,
       CAN_FIRE_RL_ug_src_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_4_doDrop,
       CAN_FIRE_RL_ug_src_4_setPeek,
       CAN_FIRE_RL_ug_src_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_doDrop,
       CAN_FIRE_RL_ug_src_setPeek,
       CAN_FIRE_RL_ug_src_warnDoDrop,
       CAN_FIRE___me_check_100,
       CAN_FIRE___me_check_102,
       CAN_FIRE___me_check_104,
       CAN_FIRE___me_check_117,
       CAN_FIRE___me_check_119,
       CAN_FIRE___me_check_121,
       CAN_FIRE___me_check_123,
       CAN_FIRE___me_check_127,
       CAN_FIRE___me_check_128,
       CAN_FIRE___me_check_129,
       CAN_FIRE___me_check_131,
       CAN_FIRE___me_check_135,
       CAN_FIRE___me_check_136,
       CAN_FIRE___me_check_137,
       CAN_FIRE___me_check_139,
       CAN_FIRE___me_check_141,
       CAN_FIRE___me_check_143,
       CAN_FIRE___me_check_145,
       CAN_FIRE___me_check_159,
       CAN_FIRE___me_check_161,
       CAN_FIRE___me_check_163,
       CAN_FIRE___me_check_176,
       CAN_FIRE___me_check_178,
       CAN_FIRE___me_check_180,
       CAN_FIRE___me_check_182,
       CAN_FIRE___me_check_68,
       CAN_FIRE___me_check_69,
       CAN_FIRE___me_check_70,
       CAN_FIRE___me_check_72,
       CAN_FIRE___me_check_76,
       CAN_FIRE___me_check_77,
       CAN_FIRE___me_check_78,
       CAN_FIRE___me_check_80,
       CAN_FIRE___me_check_82,
       CAN_FIRE___me_check_84,
       CAN_FIRE___me_check_86,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_cpu_dmem_master_ar_drop,
       CAN_FIRE_cpu_dmem_master_aw_drop,
       CAN_FIRE_cpu_dmem_master_b_put,
       CAN_FIRE_cpu_dmem_master_r_put,
       CAN_FIRE_cpu_dmem_master_w_drop,
       CAN_FIRE_cpu_imem_master_ar_drop,
       CAN_FIRE_cpu_imem_master_aw_drop,
       CAN_FIRE_cpu_imem_master_b_put,
       CAN_FIRE_cpu_imem_master_r_put,
       CAN_FIRE_cpu_imem_master_w_drop,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dm_dmi_read_addr,
       CAN_FIRE_dm_dmi_read_data,
       CAN_FIRE_dm_dmi_write,
       CAN_FIRE_ndm_reset_client_request_get,
       CAN_FIRE_ndm_reset_client_response_put,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite,
       WILL_FIRE_RL_axi4_dmem_shim_tmp_propagateReset,
       WILL_FIRE_RL_burst,
       WILL_FIRE_RL_burst_1,
       WILL_FIRE_RL_burst_2,
       WILL_FIRE_RL_burst_3,
       WILL_FIRE_RL_burst_4,
       WILL_FIRE_RL_burst_5,
       WILL_FIRE_RL_burst_6,
       WILL_FIRE_RL_burst_7,
       WILL_FIRE_RL_burst_8,
       WILL_FIRE_RL_burst_9,
       WILL_FIRE_RL_checkSinkReady,
       WILL_FIRE_RL_checkSinkReady_1,
       WILL_FIRE_RL_checkSinkReady_2,
       WILL_FIRE_RL_checkSinkReady_3,
       WILL_FIRE_RL_checkSinkReady_4,
       WILL_FIRE_RL_checkSinkReady_5,
       WILL_FIRE_RL_checkSinkReady_6,
       WILL_FIRE_RL_checkSinkReady_7,
       WILL_FIRE_RL_checkSinkReady_8,
       WILL_FIRE_RL_checkSinkReady_9,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_2,
       WILL_FIRE_RL_connect_3,
       WILL_FIRE_RL_connect_4,
       WILL_FIRE_RL_craftReq,
       WILL_FIRE_RL_craftReq_1,
       WILL_FIRE_RL_craftReq_2,
       WILL_FIRE_RL_craftReq_3,
       WILL_FIRE_RL_craftReq_4,
       WILL_FIRE_RL_craftReq_5,
       WILL_FIRE_RL_craftReq_6,
       WILL_FIRE_RL_craftReq_7,
       WILL_FIRE_RL_craftReq_8,
       WILL_FIRE_RL_craftReq_9,
       WILL_FIRE_RL_ifcs_0_1_drainFlits,
       WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_1_firstFlit,
       WILL_FIRE_RL_ifcs_0_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_1_followFlits,
       WILL_FIRE_RL_ifcs_0_1_followFlits_1,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_1_snk_doPut,
       WILL_FIRE_RL_ifcs_0_1_snk_warnDoPut,
       WILL_FIRE_RL_ifcs_0_drainFlits,
       WILL_FIRE_RL_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_firstFlit,
       WILL_FIRE_RL_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_followFlits,
       WILL_FIRE_RL_ifcs_0_followFlits_1,
       WILL_FIRE_RL_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_snk_doPut,
       WILL_FIRE_RL_ifcs_0_snk_warnDoPut,
       WILL_FIRE_RL_ifcs_1_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_1_followFlits,
       WILL_FIRE_RL_ifcs_1_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_1_snk_doPut,
       WILL_FIRE_RL_ifcs_1_1_snk_warnDoPut,
       WILL_FIRE_RL_ifcs_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_followFlits,
       WILL_FIRE_RL_ifcs_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_snk_doPut,
       WILL_FIRE_RL_ifcs_1_snk_warnDoPut,
       WILL_FIRE_RL_ifcs_2_1_firstFlit,
       WILL_FIRE_RL_ifcs_2_1_followFlits,
       WILL_FIRE_RL_ifcs_2_firstFlit,
       WILL_FIRE_RL_ifcs_2_followFlits,
       WILL_FIRE_RL_merged_0_awFlit,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_0_passFlit,
       WILL_FIRE_RL_merged_0_wFlit,
       WILL_FIRE_RL_merged_1_awFlit,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_merged_1_passFlit,
       WILL_FIRE_RL_merged_1_wFlit,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_sink_selected,
       WILL_FIRE_RL_sink_selected_1,
       WILL_FIRE_RL_sink_selected_2,
       WILL_FIRE_RL_sink_selected_3,
       WILL_FIRE_RL_sink_selected_4,
       WILL_FIRE_RL_sink_selected_5,
       WILL_FIRE_RL_sink_selected_6,
       WILL_FIRE_RL_sink_selected_7,
       WILL_FIRE_RL_sink_selected_8,
       WILL_FIRE_RL_sink_selected_9,
       WILL_FIRE_RL_sinks_0_doPut,
       WILL_FIRE_RL_sinks_0_warnDoPut,
       WILL_FIRE_RL_sinks_1_0_doPut,
       WILL_FIRE_RL_sinks_1_0_doPut_1,
       WILL_FIRE_RL_sinks_1_0_warnDoPut,
       WILL_FIRE_RL_sinks_1_0_warnDoPut_1,
       WILL_FIRE_RL_sinks_1_1_0_doPut,
       WILL_FIRE_RL_sinks_1_1_0_warnDoPut,
       WILL_FIRE_RL_sinks_1_1_1_doPut,
       WILL_FIRE_RL_sinks_1_1_1_warnDoPut,
       WILL_FIRE_RL_sinks_1_1_doPut,
       WILL_FIRE_RL_sinks_1_1_doPut_1,
       WILL_FIRE_RL_sinks_1_1_warnDoPut,
       WILL_FIRE_RL_sinks_1_1_warnDoPut_1,
       WILL_FIRE_RL_sinks_1_2_doPut,
       WILL_FIRE_RL_sinks_1_2_warnDoPut,
       WILL_FIRE_RL_sinks_1_doPut,
       WILL_FIRE_RL_sinks_1_warnDoPut,
       WILL_FIRE_RL_sinks_2_doPut,
       WILL_FIRE_RL_sinks_2_warnDoPut,
       WILL_FIRE_RL_source_selected,
       WILL_FIRE_RL_source_selected_1,
       WILL_FIRE_RL_source_selected_2,
       WILL_FIRE_RL_source_selected_3,
       WILL_FIRE_RL_source_selected_4,
       WILL_FIRE_RL_source_selected_5,
       WILL_FIRE_RL_source_selected_6,
       WILL_FIRE_RL_source_selected_7,
       WILL_FIRE_RL_source_selected_8,
       WILL_FIRE_RL_source_selected_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_ug_snk_1_doPut,
       WILL_FIRE_RL_ug_snk_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_doPut,
       WILL_FIRE_RL_ug_snk_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_doPut,
       WILL_FIRE_RL_ug_snk_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_4_doPut,
       WILL_FIRE_RL_ug_snk_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_doPut,
       WILL_FIRE_RL_ug_snk_warnDoPut,
       WILL_FIRE_RL_ug_src_1_doDrop,
       WILL_FIRE_RL_ug_src_1_setPeek,
       WILL_FIRE_RL_ug_src_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_doDrop,
       WILL_FIRE_RL_ug_src_2_setPeek,
       WILL_FIRE_RL_ug_src_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_doDrop,
       WILL_FIRE_RL_ug_src_3_setPeek,
       WILL_FIRE_RL_ug_src_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_4_doDrop,
       WILL_FIRE_RL_ug_src_4_setPeek,
       WILL_FIRE_RL_ug_src_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_doDrop,
       WILL_FIRE_RL_ug_src_setPeek,
       WILL_FIRE_RL_ug_src_warnDoDrop,
       WILL_FIRE___me_check_100,
       WILL_FIRE___me_check_102,
       WILL_FIRE___me_check_104,
       WILL_FIRE___me_check_117,
       WILL_FIRE___me_check_119,
       WILL_FIRE___me_check_121,
       WILL_FIRE___me_check_123,
       WILL_FIRE___me_check_127,
       WILL_FIRE___me_check_128,
       WILL_FIRE___me_check_129,
       WILL_FIRE___me_check_131,
       WILL_FIRE___me_check_135,
       WILL_FIRE___me_check_136,
       WILL_FIRE___me_check_137,
       WILL_FIRE___me_check_139,
       WILL_FIRE___me_check_141,
       WILL_FIRE___me_check_143,
       WILL_FIRE___me_check_145,
       WILL_FIRE___me_check_159,
       WILL_FIRE___me_check_161,
       WILL_FIRE___me_check_163,
       WILL_FIRE___me_check_176,
       WILL_FIRE___me_check_178,
       WILL_FIRE___me_check_180,
       WILL_FIRE___me_check_182,
       WILL_FIRE___me_check_68,
       WILL_FIRE___me_check_69,
       WILL_FIRE___me_check_70,
       WILL_FIRE___me_check_72,
       WILL_FIRE___me_check_76,
       WILL_FIRE___me_check_77,
       WILL_FIRE___me_check_78,
       WILL_FIRE___me_check_80,
       WILL_FIRE___me_check_82,
       WILL_FIRE___me_check_84,
       WILL_FIRE___me_check_86,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_cpu_dmem_master_ar_drop,
       WILL_FIRE_cpu_dmem_master_aw_drop,
       WILL_FIRE_cpu_dmem_master_b_put,
       WILL_FIRE_cpu_dmem_master_r_put,
       WILL_FIRE_cpu_dmem_master_w_drop,
       WILL_FIRE_cpu_imem_master_ar_drop,
       WILL_FIRE_cpu_imem_master_aw_drop,
       WILL_FIRE_cpu_imem_master_b_put,
       WILL_FIRE_cpu_imem_master_r_put,
       WILL_FIRE_cpu_imem_master_w_drop,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dm_dmi_read_addr,
       WILL_FIRE_dm_dmi_read_data,
       WILL_FIRE_dm_dmi_write,
       WILL_FIRE_ndm_reset_client_request_get,
       WILL_FIRE_ndm_reset_client_response_put,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity;

  // inputs to muxes for submodule ports
  reg [71 : 0] MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1,
	       MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1;
  reg [5 : 0] MUX_ifcs_0_snk_putWire$wset_1__VAL_1,
	      MUX_ifcs_1_snk_putWire$wset_1__VAL_1;
  wire [140 : 0] MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_1,
		 MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_2;
  wire [76 : 0] MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_1,
		MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_2;
  wire [74 : 0] MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_2,
	       MUX_merged_1_flitLeft$write_1__VAL_2,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire MUX_activeSource_0$write_1__SEL_1,
       MUX_activeSource_0$write_1__VAL_1,
       MUX_activeSource_1$write_1__VAL_1,
       MUX_activeSource_1_1_0$write_1__SEL_1,
       MUX_activeSource_1_1_0$write_1__SEL_2,
       MUX_activeSource_1_1_0$write_1__SEL_3,
       MUX_activeSource_1_1_0$write_1__VAL_1,
       MUX_activeSource_1_1_1_1$write_1__VAL_1,
       MUX_activeSource_1_1_2$write_1__VAL_2,
       MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1,
       MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2,
       MUX_flitToSink_0$wset_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_3,
       MUX_flitToSink_1$wset_1__SEL_1,
       MUX_flitToSink_1$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_0_1$wset_1__SEL_1,
       MUX_flitToSink_1_0_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_2$wset_1__SEL_1,
       MUX_flitToSink_1_2$wset_1__SEL_3,
       MUX_flitToSink_2$wset_1__SEL_1,
       MUX_flitToSink_2$wset_1__SEL_3,
       MUX_ifcs_0_1_state_1$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__PSEL_3,
       MUX_ifcs_0_state$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__SEL_2,
       MUX_ifcs_0_state$write_1__SEL_3,
       MUX_ifcs_1_1_state_1$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__PSEL_3,
       MUX_ifcs_1_state$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__SEL_2,
       MUX_ifcs_1_state$write_1__SEL_3,
       MUX_ifcs_2_1_state$write_1__SEL_1,
       MUX_near_mem_io$axi4_slave_w_put_1__SEL_1,
       MUX_near_mem_io$axi4_slave_w_put_1__SEL_2,
       MUX_plic$axi4_slave_w_put_1__SEL_1,
       MUX_plic$axi4_slave_w_put_1__SEL_2,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_1,
       MUX_state_1_1_1$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h41142;
  reg [63 : 0] v__h40531;
  reg [63 : 0] v__h45151;
  reg [63 : 0] v__h44540;
  reg [63 : 0] v__h56317;
  reg [63 : 0] v__h55936;
  reg [63 : 0] v__h58387;
  reg [63 : 0] v__h58006;
  reg [63 : 0] v__h60286;
  reg [63 : 0] v__h59905;
  reg [63 : 0] v__h76768;
  reg [63 : 0] v__h76157;
  reg [63 : 0] v__h79661;
  reg [63 : 0] v__h79050;
  reg [63 : 0] v__h89448;
  reg [63 : 0] v__h89067;
  reg [63 : 0] v__h91939;
  reg [63 : 0] v__h91558;
  reg [63 : 0] v__h94249;
  reg [63 : 0] v__h93868;
  reg [31 : 0] v__h17028;
  reg [31 : 0] v__h17206;
  reg [31 : 0] v__h17572;
  reg [31 : 0] v__h17022;
  reg [31 : 0] v__h17200;
  reg [31 : 0] v__h17566;
  // synopsys translate_on

  // remaining internal signals
  wire [171 : 0] IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d598,
		 IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d698;
  wire [63 : 0] aw_awaddr__h10218,
		merged_0_outflitwget_BITS_166_TO_103__q1,
		merged_1_outflitwget_BITS_166_TO_103__q2,
		tmp__h10001,
		tmp__h7784,
		v_araddr__h14967,
		x__h25419,
		x__h25444,
		x__h28997,
		x__h29022,
		x__h63058,
		x__h63083,
		x__h65621,
		x__h65646,
		x__h7627;
  wire [39 : 0] x__h10250;
  wire [8 : 0] x_port1__read__h64181, x_port1__read__h66726;
  wire [7 : 0] arlen__h14951, v_arlen__h14968;
  wire [5 : 0] v_arid__h14966;
  wire [3 : 0] _0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233,
	       arcache__h14955,
	       x__h10293,
	       x__h12027,
	       x__h12039,
	       x__h12051,
	       x__h12063,
	       x__h12075,
	       x__h12087,
	       x__h12099,
	       x__h13623,
	       x__h15031,
	       y__h12028,
	       y__h12040,
	       y__h12052,
	       y__h12064,
	       y__h12076,
	       y__h12088,
	       y__h12100;
  wire [2 : 0] aw_awsize_val__h11957, v_arsize_val__h15013;
  wire [1 : 0] IF_IF_merged_0_outflit_whas__49_AND_NOT_merged_ETC___d587,
	       IF_IF_merged_1_outflit_whas__49_AND_NOT_merged_ETC___d687,
	       IF_cpu_dmem_master_ar_peek__251_BITS_92_TO_69__ETC___d1278,
	       IF_debug_module_master_ar_peek__340_BITS_92_TO_ETC___d1367,
	       SEXT_SEXT_arbiter_1_1_firstHot_743_744_BIT_0_7_ETC__q20,
	       SEXT_SEXT_arbiter_1_firstHot_079_080_BIT_0_081_ETC__q10,
	       SEXT_SEXT_arbiter_1_firstHot_1_554_555_BIT_0_5_ETC__q15,
	       SEXT_SEXT_arbiter_firstHot_80_81_BIT_0_82_AND__ETC__q5,
	       SEXT_arbiter_1_1_firstHot__q17,
	       SEXT_arbiter_1_1_lastSelect_1__q19,
	       SEXT_arbiter_1_1_lastSelect__q18,
	       SEXT_arbiter_1_firstHot_1__q13,
	       SEXT_arbiter_1_firstHot__q7,
	       SEXT_arbiter_1_lastSelect_1__q9,
	       SEXT_arbiter_1_lastSelect_2__q14,
	       SEXT_arbiter_1_lastSelect__q8,
	       SEXT_arbiter_firstHot__q3,
	       SEXT_arbiter_lastSelect__q4,
	       SEXT_x4618__q11,
	       SEXT_x4652__q12,
	       SEXT_x5293__q16,
	       SEXT_x7745__q21,
	       SEXT_x7779__q22,
	       SEXT_x9667__q6;
  wire IF_NOT_ifcs_0_1_innerRoute_first__500_BIT_1_50_ETC___d1522,
       IF_NOT_ifcs_0_innerRoute_first__26_BIT_1_35_36_ETC___d848,
       IF_NOT_ifcs_1_1_innerRoute_first__529_BIT_1_53_ETC___d1538,
       IF_NOT_ifcs_1_innerRoute_first__55_BIT_1_59_60_ETC___d864,
       IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1778,
       IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1784,
       IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1790,
       IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1114,
       IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1120,
       IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1126,
       IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1574,
       IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1578,
       IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d900,
       IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d904,
       IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d569,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d571,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d575,
       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d585,
       IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603,
       IF_merged_0_outflit_whas__49_THEN_merged_0_out_ETC___d608,
       IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d669,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d671,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d675,
       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d685,
       IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703,
       IF_merged_1_outflit_whas__49_THEN_merged_1_out_ETC___d708,
       IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794,
       IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806,
       IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818,
       SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759,
       SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753,
       SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747,
       SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095,
       SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562,
       SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083,
       SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089,
       SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558,
       SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888,
       SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1260,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1262,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1266,
       cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1276,
       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344,
       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346,
       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1349,
       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1351,
       debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1355,
       debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1365,
       plic_RDY_server_reset_request_put__89_AND_cpu__ETC___d295,
       reqWires_1_0_whas__056_AND_reqWires_1_0_wget___ETC___d1066,
       reqWires_1_1_0_whas__720_AND_reqWires_1_1_0_wg_ETC___d1730,
       split_0_doPut_whas__43_AND_split_0_doPut_wget__ETC___d454,
       split_1_doPut_whas__78_AND_split_1_doPut_wget__ETC___d485,
       split_2_doPut_whas__07_AND_split_2_doPut_wget__ETC___d514,
       state_1_067_AND_activeSource_1_0_155_156_AND_i_ETC___d1158,
       state_1_067_AND_activeSource_1_1_188_189_AND_i_ETC___d1191,
       state_1_067_AND_activeSource_1_2_222_223_AND_i_ETC___d1225,
       state_1_1_1_731_AND_activeSource_1_1_0_825_826_ETC___d1828,
       state_1_1_1_731_AND_activeSource_1_1_1_1_861_8_ETC___d1864,
       state_1_1_1_731_AND_activeSource_1_1_2_897_898_ETC___d1900,
       state_1_1_547_AND_activeSource_1_0_1_614_615_A_ETC___d1617,
       state_1_1_547_AND_activeSource_1_1_1_654_655_A_ETC___d1657,
       state_73_AND_activeSource_0_46_47_AND_ifcs_0_i_ETC___d949,
       state_73_AND_activeSource_1_90_91_AND_ifcs_1_i_ETC___d993,
       x__h39140,
       x__h39243,
       x__h39608,
       x__h39667,
       x__h39749,
       x__h53797,
       x__h53799,
       x__h53948,
       x__h53950,
       x__h54084,
       x__h54086,
       x__h54556,
       x__h54558,
       x__h54618,
       x__h54652,
       x__h54744,
       x__h54746,
       x__h54925,
       x__h54927,
       x__h74766,
       x__h74869,
       x__h75234,
       x__h75293,
       x__h75375,
       x__h86924,
       x__h86926,
       x__h87075,
       x__h87077,
       x__h87211,
       x__h87213,
       x__h87683,
       x__h87685,
       x__h87745,
       x__h87779,
       x__h87871,
       x__h87873,
       x__h88052,
       x__h88054,
       y__h39141,
       y__h39244,
       y__h39609,
       y__h39750,
       y__h53798,
       y__h53800,
       y__h53949,
       y__h53951,
       y__h54085,
       y__h54087,
       y__h54557,
       y__h54559,
       y__h54745,
       y__h54747,
       y__h54926,
       y__h54928,
       y__h74767,
       y__h74870,
       y__h75235,
       y__h75376,
       y__h86925,
       y__h86927,
       y__h87076,
       y__h87078,
       y__h87212,
       y__h87214,
       y__h87684,
       y__h87686,
       y__h87872,
       y__h87874,
       y__h88053,
       y__h88055;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_canPeek
  assign cpu_imem_master_aw_canPeek = delay_shim_awff$EMPTY_N ;

  // value method cpu_imem_master_aw_peek
  assign cpu_imem_master_aw_peek = delay_shim_awff$D_OUT ;
  assign RDY_cpu_imem_master_aw_peek = delay_shim_awff$EMPTY_N ;

  // action method cpu_imem_master_aw_drop
  assign RDY_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_aw_drop = EN_cpu_imem_master_aw_drop ;

  // value method cpu_imem_master_w_canPeek
  assign cpu_imem_master_w_canPeek = delay_shim_wff$EMPTY_N ;

  // value method cpu_imem_master_w_peek
  assign cpu_imem_master_w_peek = delay_shim_wff$D_OUT[73:1] ;
  assign RDY_cpu_imem_master_w_peek = delay_shim_wff$EMPTY_N ;

  // action method cpu_imem_master_w_drop
  assign RDY_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_w_drop = EN_cpu_imem_master_w_drop ;

  // value method cpu_imem_master_b_canPut
  assign cpu_imem_master_b_canPut = delay_shim_bff$FULL_N ;

  // action method cpu_imem_master_b_put
  assign RDY_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_b_put = EN_cpu_imem_master_b_put ;

  // value method cpu_imem_master_ar_canPeek
  assign cpu_imem_master_ar_canPeek = delay_shim_arff$EMPTY_N ;

  // value method cpu_imem_master_ar_peek
  assign cpu_imem_master_ar_peek = delay_shim_arff$D_OUT ;
  assign RDY_cpu_imem_master_ar_peek = delay_shim_arff$EMPTY_N ;

  // action method cpu_imem_master_ar_drop
  assign RDY_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_ar_drop = EN_cpu_imem_master_ar_drop ;

  // value method cpu_imem_master_r_canPut
  assign cpu_imem_master_r_canPut = delay_shim_rff$FULL_N ;

  // action method cpu_imem_master_r_put
  assign RDY_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_r_put = EN_cpu_imem_master_r_put ;

  // value method cpu_dmem_master_aw_canPeek
  assign cpu_dmem_master_aw_canPeek =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // value method cpu_dmem_master_aw_peek
  assign cpu_dmem_master_aw_peek =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read[98:0] ;
  assign RDY_cpu_dmem_master_aw_peek =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // action method cpu_dmem_master_aw_drop
  assign RDY_cpu_dmem_master_aw_drop =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign CAN_FIRE_cpu_dmem_master_aw_drop =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign WILL_FIRE_cpu_dmem_master_aw_drop = EN_cpu_dmem_master_aw_drop ;

  // value method cpu_dmem_master_w_canPeek
  assign cpu_dmem_master_w_canPeek =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // value method cpu_dmem_master_w_peek
  assign cpu_dmem_master_w_peek =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read[72:0] ;
  assign RDY_cpu_dmem_master_w_peek =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // action method cpu_dmem_master_w_drop
  assign RDY_cpu_dmem_master_w_drop =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign CAN_FIRE_cpu_dmem_master_w_drop =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign WILL_FIRE_cpu_dmem_master_w_drop = EN_cpu_dmem_master_w_drop ;

  // value method cpu_dmem_master_b_canPut
  assign cpu_dmem_master_b_canPut = !axi4_dmem_shim_tmp_shimMaster_bff_rv[8] ;

  // action method cpu_dmem_master_b_put
  assign RDY_cpu_dmem_master_b_put =
	     !axi4_dmem_shim_tmp_shimMaster_bff_rv[8] ;
  assign CAN_FIRE_cpu_dmem_master_b_put =
	     !axi4_dmem_shim_tmp_shimMaster_bff_rv[8] ;
  assign WILL_FIRE_cpu_dmem_master_b_put = EN_cpu_dmem_master_b_put ;

  // value method cpu_dmem_master_ar_canPeek
  assign cpu_dmem_master_ar_canPeek =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // value method cpu_dmem_master_ar_peek
  assign cpu_dmem_master_ar_peek =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read[98:0] ;
  assign RDY_cpu_dmem_master_ar_peek =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // action method cpu_dmem_master_ar_drop
  assign RDY_cpu_dmem_master_ar_drop =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign CAN_FIRE_cpu_dmem_master_ar_drop =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign WILL_FIRE_cpu_dmem_master_ar_drop = EN_cpu_dmem_master_ar_drop ;

  // value method cpu_dmem_master_r_canPut
  assign cpu_dmem_master_r_canPut =
	     !axi4_dmem_shim_tmp_shimMaster_rff_rv[73] ;

  // action method cpu_dmem_master_r_put
  assign RDY_cpu_dmem_master_r_put =
	     !axi4_dmem_shim_tmp_shimMaster_rff_rv[73] ;
  assign CAN_FIRE_cpu_dmem_master_r_put =
	     !axi4_dmem_shim_tmp_shimMaster_rff_rv[73] ;
  assign WILL_FIRE_cpu_dmem_master_r_put = EN_cpu_dmem_master_r_put ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method dm_dmi_read_addr
  assign RDY_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign CAN_FIRE_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign WILL_FIRE_dm_dmi_read_addr = EN_dm_dmi_read_addr ;

  // actionvalue method dm_dmi_read_data
  assign dm_dmi_read_data = debug_module$dmi_read_data ;
  assign RDY_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign CAN_FIRE_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_dm_dmi_read_data = EN_dm_dmi_read_data ;

  // action method dm_dmi_write
  assign RDY_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign CAN_FIRE_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign WILL_FIRE_dm_dmi_write = EN_dm_dmi_write ;

  // actionvalue method ndm_reset_client_request_get
  assign ndm_reset_client_request_get =
	     debug_module$ndm_reset_client_request_get ;
  assign RDY_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign CAN_FIRE_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign WILL_FIRE_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;

  // action method ndm_reset_client_response_put
  assign RDY_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign CAN_FIRE_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign WILL_FIRE_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;

  // submodule axi4_dmem_shim_tmp_awreqff
  FIFO2 #(.width(32'd98),
	  .guarded(32'd1)) axi4_dmem_shim_tmp_awreqff(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(axi4_dmem_shim_tmp_awreqff$D_IN),
						      .ENQ(axi4_dmem_shim_tmp_awreqff$ENQ),
						      .DEQ(axi4_dmem_shim_tmp_awreqff$DEQ),
						      .CLR(axi4_dmem_shim_tmp_awreqff$CLR),
						      .D_OUT(axi4_dmem_shim_tmp_awreqff$D_OUT),
						      .FULL_N(axi4_dmem_shim_tmp_awreqff$FULL_N),
						      .EMPTY_N(axi4_dmem_shim_tmp_awreqff$EMPTY_N));

  // submodule axi4_dmem_shim_tmp_newRst
  MakeReset0 #(.init(1'd0)) axi4_dmem_shim_tmp_newRst(.CLK(CLK),
						      .RST(RST_N),
						      .ASSERT_IN(axi4_dmem_shim_tmp_newRst$ASSERT_IN),
						      .ASSERT_OUT(),
						      .OUT_RST(axi4_dmem_shim_tmp_newRst$OUT_RST));

  // submodule axi4_dmem_shim_tmp_tagCon
  mkTagController axi4_dmem_shim_tmp_tagCon(.CLK(CLK),
					    .RST_N(axi4_dmem_shim_tmp_newRst$OUT_RST),
					    .cache_request_put_val(axi4_dmem_shim_tmp_tagCon$cache_request_put_val),
					    .memory_response_put_val(axi4_dmem_shim_tmp_tagCon$memory_response_put_val),
					    .EN_cache_request_put(axi4_dmem_shim_tmp_tagCon$EN_cache_request_put),
					    .EN_cache_response_get(axi4_dmem_shim_tmp_tagCon$EN_cache_response_get),
					    .EN_memory_request_get(axi4_dmem_shim_tmp_tagCon$EN_memory_request_get),
					    .EN_memory_response_put(axi4_dmem_shim_tmp_tagCon$EN_memory_response_put),
					    .cache_request_canPut(),
					    .RDY_cache_request_put(axi4_dmem_shim_tmp_tagCon$RDY_cache_request_put),
					    .cache_response_canGet(),
					    .cache_response_peek(),
					    .RDY_cache_response_peek(),
					    .cache_response_get(axi4_dmem_shim_tmp_tagCon$cache_response_get),
					    .RDY_cache_response_get(axi4_dmem_shim_tmp_tagCon$RDY_cache_response_get),
					    .memory_request_canGet(),
					    .memory_request_peek(),
					    .RDY_memory_request_peek(),
					    .memory_request_get(axi4_dmem_shim_tmp_tagCon$memory_request_get),
					    .RDY_memory_request_get(axi4_dmem_shim_tmp_tagCon$RDY_memory_request_get),
					    .memory_response_canPut(),
					    .RDY_memory_response_put(axi4_dmem_shim_tmp_tagCon$RDY_memory_response_put));

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dmem_master_b_put_val(cpu$dmem_master_b_put_val),
	    .dmem_master_r_put_val(cpu$dmem_master_r_put_val),
	    .hart0_csr_mem_server_request_put(cpu$hart0_csr_mem_server_request_put),
	    .hart0_fpr_mem_server_request_put(cpu$hart0_fpr_mem_server_request_put),
	    .hart0_gpr_mem_server_request_put(cpu$hart0_gpr_mem_server_request_put),
	    .hart0_put_other_req_put(cpu$hart0_put_other_req_put),
	    .hart0_server_reset_request_put(cpu$hart0_server_reset_request_put),
	    .hart0_server_run_halt_request_put(cpu$hart0_server_run_halt_request_put),
	    .imem_master_b_put_val(cpu$imem_master_b_put_val),
	    .imem_master_r_put_val(cpu$imem_master_r_put_val),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .nmi_req_set_not_clear(cpu$nmi_req_set_not_clear),
	    .s_external_interrupt_req_set_not_clear(cpu$s_external_interrupt_req_set_not_clear),
	    .set_verbosity_logdelay(cpu$set_verbosity_logdelay),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart0_server_reset_request_put(cpu$EN_hart0_server_reset_request_put),
	    .EN_hart0_server_reset_response_get(cpu$EN_hart0_server_reset_response_get),
	    .EN_imem_master_aw_drop(cpu$EN_imem_master_aw_drop),
	    .EN_imem_master_w_drop(cpu$EN_imem_master_w_drop),
	    .EN_imem_master_b_put(cpu$EN_imem_master_b_put),
	    .EN_imem_master_ar_drop(cpu$EN_imem_master_ar_drop),
	    .EN_imem_master_r_put(cpu$EN_imem_master_r_put),
	    .EN_dmem_master_aw_drop(cpu$EN_dmem_master_aw_drop),
	    .EN_dmem_master_w_drop(cpu$EN_dmem_master_w_drop),
	    .EN_dmem_master_b_put(cpu$EN_dmem_master_b_put),
	    .EN_dmem_master_ar_drop(cpu$EN_dmem_master_ar_drop),
	    .EN_dmem_master_r_put(cpu$EN_dmem_master_r_put),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_hart0_server_run_halt_request_put(cpu$EN_hart0_server_run_halt_request_put),
	    .EN_hart0_server_run_halt_response_get(cpu$EN_hart0_server_run_halt_response_get),
	    .EN_hart0_put_other_req_put(cpu$EN_hart0_put_other_req_put),
	    .EN_hart0_gpr_mem_server_request_put(cpu$EN_hart0_gpr_mem_server_request_put),
	    .EN_hart0_gpr_mem_server_response_get(cpu$EN_hart0_gpr_mem_server_response_get),
	    .EN_hart0_fpr_mem_server_request_put(cpu$EN_hart0_fpr_mem_server_request_put),
	    .EN_hart0_fpr_mem_server_response_get(cpu$EN_hart0_fpr_mem_server_response_get),
	    .EN_hart0_csr_mem_server_request_put(cpu$EN_hart0_csr_mem_server_request_put),
	    .EN_hart0_csr_mem_server_response_get(cpu$EN_hart0_csr_mem_server_response_get),
	    .RDY_hart0_server_reset_request_put(cpu$RDY_hart0_server_reset_request_put),
	    .hart0_server_reset_response_get(cpu$hart0_server_reset_response_get),
	    .RDY_hart0_server_reset_response_get(cpu$RDY_hart0_server_reset_response_get),
	    .imem_master_aw_canPeek(cpu$imem_master_aw_canPeek),
	    .imem_master_aw_peek(cpu$imem_master_aw_peek),
	    .RDY_imem_master_aw_peek(cpu$RDY_imem_master_aw_peek),
	    .RDY_imem_master_aw_drop(cpu$RDY_imem_master_aw_drop),
	    .imem_master_w_canPeek(cpu$imem_master_w_canPeek),
	    .imem_master_w_peek(cpu$imem_master_w_peek),
	    .RDY_imem_master_w_peek(cpu$RDY_imem_master_w_peek),
	    .RDY_imem_master_w_drop(cpu$RDY_imem_master_w_drop),
	    .imem_master_b_canPut(cpu$imem_master_b_canPut),
	    .RDY_imem_master_b_put(cpu$RDY_imem_master_b_put),
	    .imem_master_ar_canPeek(cpu$imem_master_ar_canPeek),
	    .imem_master_ar_peek(cpu$imem_master_ar_peek),
	    .RDY_imem_master_ar_peek(cpu$RDY_imem_master_ar_peek),
	    .RDY_imem_master_ar_drop(cpu$RDY_imem_master_ar_drop),
	    .imem_master_r_canPut(cpu$imem_master_r_canPut),
	    .RDY_imem_master_r_put(cpu$RDY_imem_master_r_put),
	    .dmem_master_aw_canPeek(),
	    .dmem_master_aw_peek(cpu$dmem_master_aw_peek),
	    .RDY_dmem_master_aw_peek(cpu$RDY_dmem_master_aw_peek),
	    .RDY_dmem_master_aw_drop(cpu$RDY_dmem_master_aw_drop),
	    .dmem_master_w_canPeek(),
	    .dmem_master_w_peek(cpu$dmem_master_w_peek),
	    .RDY_dmem_master_w_peek(cpu$RDY_dmem_master_w_peek),
	    .RDY_dmem_master_w_drop(cpu$RDY_dmem_master_w_drop),
	    .dmem_master_b_canPut(cpu$dmem_master_b_canPut),
	    .RDY_dmem_master_b_put(cpu$RDY_dmem_master_b_put),
	    .dmem_master_ar_canPeek(cpu$dmem_master_ar_canPeek),
	    .dmem_master_ar_peek(cpu$dmem_master_ar_peek),
	    .RDY_dmem_master_ar_peek(cpu$RDY_dmem_master_ar_peek),
	    .RDY_dmem_master_ar_drop(cpu$RDY_dmem_master_ar_drop),
	    .dmem_master_r_canPut(cpu$dmem_master_r_canPut),
	    .RDY_dmem_master_r_put(cpu$RDY_dmem_master_r_put),
	    .RDY_set_verbosity(),
	    .RDY_hart0_server_run_halt_request_put(cpu$RDY_hart0_server_run_halt_request_put),
	    .hart0_server_run_halt_response_get(cpu$hart0_server_run_halt_response_get),
	    .RDY_hart0_server_run_halt_response_get(cpu$RDY_hart0_server_run_halt_response_get),
	    .RDY_hart0_put_other_req_put(),
	    .RDY_hart0_gpr_mem_server_request_put(cpu$RDY_hart0_gpr_mem_server_request_put),
	    .hart0_gpr_mem_server_response_get(cpu$hart0_gpr_mem_server_response_get),
	    .RDY_hart0_gpr_mem_server_response_get(cpu$RDY_hart0_gpr_mem_server_response_get),
	    .RDY_hart0_fpr_mem_server_request_put(cpu$RDY_hart0_fpr_mem_server_request_put),
	    .hart0_fpr_mem_server_response_get(cpu$hart0_fpr_mem_server_response_get),
	    .RDY_hart0_fpr_mem_server_response_get(cpu$RDY_hart0_fpr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_request_put(cpu$RDY_hart0_csr_mem_server_request_put),
	    .hart0_csr_mem_server_response_get(cpu$hart0_csr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_response_get(cpu$RDY_hart0_csr_mem_server_response_get));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_client_run_halt_response_put(debug_module$hart0_client_run_halt_response_put),
			      .hart0_csr_mem_client_response_put(debug_module$hart0_csr_mem_client_response_put),
			      .hart0_fpr_mem_client_response_put(debug_module$hart0_fpr_mem_client_response_put),
			      .hart0_gpr_mem_client_response_put(debug_module$hart0_gpr_mem_client_response_put),
			      .hart0_reset_client_response_put(debug_module$hart0_reset_client_response_put),
			      .master_b_put_val(debug_module$master_b_put_val),
			      .master_r_put_val(debug_module$master_r_put_val),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_reset_client_request_get(debug_module$EN_hart0_reset_client_request_get),
			      .EN_hart0_reset_client_response_put(debug_module$EN_hart0_reset_client_response_put),
			      .EN_hart0_client_run_halt_request_get(debug_module$EN_hart0_client_run_halt_request_get),
			      .EN_hart0_client_run_halt_response_put(debug_module$EN_hart0_client_run_halt_response_put),
			      .EN_hart0_get_other_req_get(debug_module$EN_hart0_get_other_req_get),
			      .EN_hart0_gpr_mem_client_request_get(debug_module$EN_hart0_gpr_mem_client_request_get),
			      .EN_hart0_gpr_mem_client_response_put(debug_module$EN_hart0_gpr_mem_client_response_put),
			      .EN_hart0_fpr_mem_client_request_get(debug_module$EN_hart0_fpr_mem_client_request_get),
			      .EN_hart0_fpr_mem_client_response_put(debug_module$EN_hart0_fpr_mem_client_response_put),
			      .EN_hart0_csr_mem_client_request_get(debug_module$EN_hart0_csr_mem_client_request_get),
			      .EN_hart0_csr_mem_client_response_put(debug_module$EN_hart0_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .EN_master_aw_drop(debug_module$EN_master_aw_drop),
			      .EN_master_w_drop(debug_module$EN_master_w_drop),
			      .EN_master_b_put(debug_module$EN_master_b_put),
			      .EN_master_ar_drop(debug_module$EN_master_ar_drop),
			      .EN_master_r_put(debug_module$EN_master_r_put),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_reset_client_request_get(debug_module$hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_request_get(debug_module$RDY_hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_response_put(debug_module$RDY_hart0_reset_client_response_put),
			      .hart0_client_run_halt_request_get(debug_module$hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_request_get(debug_module$RDY_hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_response_put(debug_module$RDY_hart0_client_run_halt_response_put),
			      .hart0_get_other_req_get(debug_module$hart0_get_other_req_get),
			      .RDY_hart0_get_other_req_get(debug_module$RDY_hart0_get_other_req_get),
			      .hart0_gpr_mem_client_request_get(debug_module$hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_request_get(debug_module$RDY_hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_response_put(debug_module$RDY_hart0_gpr_mem_client_response_put),
			      .hart0_fpr_mem_client_request_get(debug_module$hart0_fpr_mem_client_request_get),
			      .RDY_hart0_fpr_mem_client_request_get(debug_module$RDY_hart0_fpr_mem_client_request_get),
			      .RDY_hart0_fpr_mem_client_response_put(debug_module$RDY_hart0_fpr_mem_client_response_put),
			      .hart0_csr_mem_client_request_get(debug_module$hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_request_get(debug_module$RDY_hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_response_put(debug_module$RDY_hart0_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .master_aw_canPeek(),
			      .master_aw_peek(debug_module$master_aw_peek),
			      .RDY_master_aw_peek(debug_module$RDY_master_aw_peek),
			      .RDY_master_aw_drop(debug_module$RDY_master_aw_drop),
			      .master_w_canPeek(),
			      .master_w_peek(debug_module$master_w_peek),
			      .RDY_master_w_peek(debug_module$RDY_master_w_peek),
			      .RDY_master_w_drop(debug_module$RDY_master_w_drop),
			      .master_b_canPut(debug_module$master_b_canPut),
			      .RDY_master_b_put(debug_module$RDY_master_b_put),
			      .master_ar_canPeek(debug_module$master_ar_canPeek),
			      .master_ar_peek(debug_module$master_ar_peek),
			      .RDY_master_ar_peek(debug_module$RDY_master_ar_peek),
			      .RDY_master_ar_drop(debug_module$RDY_master_ar_drop),
			      .master_r_canPut(debug_module$master_r_canPut),
			      .RDY_master_r_put(debug_module$RDY_master_r_put));

  // submodule delay_shim_arff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_arff(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(delay_shim_arff$D_IN),
					       .ENQ(delay_shim_arff$ENQ),
					       .DEQ(delay_shim_arff$DEQ),
					       .CLR(delay_shim_arff$CLR),
					       .D_OUT(delay_shim_arff$D_OUT),
					       .FULL_N(delay_shim_arff$FULL_N),
					       .EMPTY_N(delay_shim_arff$EMPTY_N));

  // submodule delay_shim_awff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_awff(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(delay_shim_awff$D_IN),
					       .ENQ(delay_shim_awff$ENQ),
					       .DEQ(delay_shim_awff$DEQ),
					       .CLR(delay_shim_awff$CLR),
					       .D_OUT(delay_shim_awff$D_OUT),
					       .FULL_N(delay_shim_awff$FULL_N),
					       .EMPTY_N(delay_shim_awff$EMPTY_N));

  // submodule delay_shim_bff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_bff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_bff$D_IN),
					      .ENQ(delay_shim_bff$ENQ),
					      .DEQ(delay_shim_bff$DEQ),
					      .CLR(delay_shim_bff$CLR),
					      .D_OUT(delay_shim_bff$D_OUT),
					      .FULL_N(delay_shim_bff$FULL_N),
					      .EMPTY_N(delay_shim_bff$EMPTY_N));

  // submodule delay_shim_rff
  SizedFIFO #(.p1width(32'd73),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_rff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_rff$D_IN),
					      .ENQ(delay_shim_rff$ENQ),
					      .DEQ(delay_shim_rff$DEQ),
					      .CLR(delay_shim_rff$CLR),
					      .D_OUT(delay_shim_rff$D_OUT),
					      .FULL_N(delay_shim_rff$FULL_N),
					      .EMPTY_N(delay_shim_rff$EMPTY_N));

  // submodule delay_shim_wff
  SizedFIFO #(.p1width(32'd74),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_wff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_wff$D_IN),
					      .ENQ(delay_shim_wff$ENQ),
					      .DEQ(delay_shim_wff$DEQ),
					      .CLR(delay_shim_wff$CLR),
					      .D_OUT(delay_shim_wff$D_OUT),
					      .FULL_N(delay_shim_wff$FULL_N),
					      .EMPTY_N(delay_shim_wff$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_requestor(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_reset_requestor$D_IN),
							    .ENQ(f_reset_requestor$ENQ),
							    .DEQ(f_reset_requestor$DEQ),
							    .CLR(f_reset_requestor$CLR),
							    .D_OUT(f_reset_requestor$D_OUT),
							    .FULL_N(f_reset_requestor$FULL_N),
							    .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ifcs_0_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_0_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_innerReq$D_IN),
							     .ENQ(ifcs_0_1_innerReq$ENQ),
							     .DEQ(ifcs_0_1_innerReq$DEQ),
							     .CLR(ifcs_0_1_innerReq$CLR),
							     .D_OUT(ifcs_0_1_innerReq$D_OUT),
							     .FULL_N(ifcs_0_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_0_1_innerReq$EMPTY_N));

  // submodule ifcs_0_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerRoute$D_IN),
							      .ENQ(ifcs_0_1_innerRoute$ENQ),
							      .DEQ(ifcs_0_1_innerRoute$DEQ),
							      .CLR(ifcs_0_1_innerRoute$CLR),
							      .D_OUT(ifcs_0_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_0_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerRoute$EMPTY_N));

  // submodule ifcs_0_1_noRouteRsp
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_0_1_noRouteRsp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ifcs_0_1_noRouteRsp$D_IN),
							       .ENQ(ifcs_0_1_noRouteRsp$ENQ),
							       .DEQ(ifcs_0_1_noRouteRsp$DEQ),
							       .CLR(ifcs_0_1_noRouteRsp$CLR),
							       .D_OUT(ifcs_0_1_noRouteRsp$D_OUT),
							       .FULL_N(ifcs_0_1_noRouteRsp$FULL_N),
							       .EMPTY_N(ifcs_0_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_routeBack$D_IN),
							     .ENQ(ifcs_0_1_routeBack$ENQ),
							     .DEQ(ifcs_0_1_routeBack$DEQ),
							     .CLR(ifcs_0_1_routeBack$CLR),
							     .D_OUT(ifcs_0_1_routeBack$D_OUT),
							     .FULL_N(ifcs_0_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_routeBack$EMPTY_N));

  // submodule ifcs_0_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_0_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_1_rspBack$D_IN),
							    .ENQ(ifcs_0_1_rspBack$ENQ),
							    .DEQ(ifcs_0_1_rspBack$DEQ),
							    .CLR(ifcs_0_1_rspBack$CLR),
							    .D_OUT(ifcs_0_1_rspBack$D_OUT),
							    .FULL_N(ifcs_0_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_0_1_rspBack$EMPTY_N));

  // submodule ifcs_0_innerReq
  FIFO2 #(.width(32'd173), .guarded(32'd1)) ifcs_0_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerReq$D_IN),
							    .ENQ(ifcs_0_innerReq$ENQ),
							    .DEQ(ifcs_0_innerReq$DEQ),
							    .CLR(ifcs_0_innerReq$CLR),
							    .D_OUT(ifcs_0_innerReq$D_OUT),
							    .FULL_N(ifcs_0_innerReq$FULL_N),
							    .EMPTY_N(ifcs_0_innerReq$EMPTY_N));

  // submodule ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerRoute$D_IN),
							    .ENQ(ifcs_0_innerRoute$ENQ),
							    .DEQ(ifcs_0_innerRoute$DEQ),
							    .CLR(ifcs_0_innerRoute$CLR),
							    .D_OUT(ifcs_0_innerRoute$D_OUT),
							    .FULL_N(ifcs_0_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_0_innerRoute$EMPTY_N));

  // submodule ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_noRouteRsp$D_IN),
							    .ENQ(ifcs_0_noRouteRsp$ENQ),
							    .DEQ(ifcs_0_noRouteRsp$DEQ),
							    .CLR(ifcs_0_noRouteRsp$CLR),
							    .D_OUT(ifcs_0_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_0_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_0_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_0_routeBack$D_IN),
							   .ENQ(ifcs_0_routeBack$ENQ),
							   .DEQ(ifcs_0_routeBack$DEQ),
							   .CLR(ifcs_0_routeBack$CLR),
							   .D_OUT(ifcs_0_routeBack$D_OUT),
							   .FULL_N(ifcs_0_routeBack$FULL_N),
							   .EMPTY_N(ifcs_0_routeBack$EMPTY_N));

  // submodule ifcs_0_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_0_rspBack$D_IN),
							 .ENQ(ifcs_0_rspBack$ENQ),
							 .DEQ(ifcs_0_rspBack$DEQ),
							 .CLR(ifcs_0_rspBack$CLR),
							 .D_OUT(ifcs_0_rspBack$D_OUT),
							 .FULL_N(ifcs_0_rspBack$FULL_N),
							 .EMPTY_N(ifcs_0_rspBack$EMPTY_N));

  // submodule ifcs_1_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_1_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_innerReq$D_IN),
							     .ENQ(ifcs_1_1_innerReq$ENQ),
							     .DEQ(ifcs_1_1_innerReq$DEQ),
							     .CLR(ifcs_1_1_innerReq$CLR),
							     .D_OUT(ifcs_1_1_innerReq$D_OUT),
							     .FULL_N(ifcs_1_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_1_1_innerReq$EMPTY_N));

  // submodule ifcs_1_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerRoute$D_IN),
							      .ENQ(ifcs_1_1_innerRoute$ENQ),
							      .DEQ(ifcs_1_1_innerRoute$DEQ),
							      .CLR(ifcs_1_1_innerRoute$CLR),
							      .D_OUT(ifcs_1_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_1_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_1_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_1_noRouteRsp
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_1_1_noRouteRsp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ifcs_1_1_noRouteRsp$D_IN),
							       .ENQ(ifcs_1_1_noRouteRsp$ENQ),
							       .DEQ(ifcs_1_1_noRouteRsp$DEQ),
							       .CLR(ifcs_1_1_noRouteRsp$CLR),
							       .D_OUT(ifcs_1_1_noRouteRsp$D_OUT),
							       .FULL_N(ifcs_1_1_noRouteRsp$FULL_N),
							       .EMPTY_N(ifcs_1_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_routeBack$D_IN),
							     .ENQ(ifcs_1_1_routeBack$ENQ),
							     .DEQ(ifcs_1_1_routeBack$DEQ),
							     .CLR(ifcs_1_1_routeBack$CLR),
							     .D_OUT(ifcs_1_1_routeBack$D_OUT),
							     .FULL_N(ifcs_1_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_routeBack$EMPTY_N));

  // submodule ifcs_1_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_1_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_1_rspBack$D_IN),
							    .ENQ(ifcs_1_1_rspBack$ENQ),
							    .DEQ(ifcs_1_1_rspBack$DEQ),
							    .CLR(ifcs_1_1_rspBack$CLR),
							    .D_OUT(ifcs_1_1_rspBack$D_OUT),
							    .FULL_N(ifcs_1_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_1_1_rspBack$EMPTY_N));

  // submodule ifcs_1_innerReq
  FIFO2 #(.width(32'd173), .guarded(32'd1)) ifcs_1_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerReq$D_IN),
							    .ENQ(ifcs_1_innerReq$ENQ),
							    .DEQ(ifcs_1_innerReq$DEQ),
							    .CLR(ifcs_1_innerReq$CLR),
							    .D_OUT(ifcs_1_innerReq$D_OUT),
							    .FULL_N(ifcs_1_innerReq$FULL_N),
							    .EMPTY_N(ifcs_1_innerReq$EMPTY_N));

  // submodule ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerRoute$D_IN),
							    .ENQ(ifcs_1_innerRoute$ENQ),
							    .DEQ(ifcs_1_innerRoute$DEQ),
							    .CLR(ifcs_1_innerRoute$CLR),
							    .D_OUT(ifcs_1_innerRoute$D_OUT),
							    .FULL_N(ifcs_1_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_noRouteRsp$D_IN),
							    .ENQ(ifcs_1_noRouteRsp$ENQ),
							    .DEQ(ifcs_1_noRouteRsp$DEQ),
							    .CLR(ifcs_1_noRouteRsp$CLR),
							    .D_OUT(ifcs_1_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_1_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_1_routeBack$D_IN),
							   .ENQ(ifcs_1_routeBack$ENQ),
							   .DEQ(ifcs_1_routeBack$DEQ),
							   .CLR(ifcs_1_routeBack$CLR),
							   .D_OUT(ifcs_1_routeBack$D_OUT),
							   .FULL_N(ifcs_1_routeBack$FULL_N),
							   .EMPTY_N(ifcs_1_routeBack$EMPTY_N));

  // submodule ifcs_1_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_1_rspBack$D_IN),
							 .ENQ(ifcs_1_rspBack$ENQ),
							 .DEQ(ifcs_1_rspBack$DEQ),
							 .CLR(ifcs_1_rspBack$CLR),
							 .D_OUT(ifcs_1_rspBack$D_OUT),
							 .FULL_N(ifcs_1_rspBack$FULL_N),
							 .EMPTY_N(ifcs_1_rspBack$EMPTY_N));

  // submodule ifcs_2_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_routeBack$D_IN),
							     .ENQ(ifcs_2_1_routeBack$ENQ),
							     .DEQ(ifcs_2_1_routeBack$DEQ),
							     .CLR(ifcs_2_1_routeBack$CLR),
							     .D_OUT(ifcs_2_1_routeBack$D_OUT),
							     .FULL_N(ifcs_2_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_routeBack$EMPTY_N));

  // submodule ifcs_2_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_2_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_2_1_rspBack$D_IN),
							    .ENQ(ifcs_2_1_rspBack$ENQ),
							    .DEQ(ifcs_2_1_rspBack$DEQ),
							    .CLR(ifcs_2_1_rspBack$CLR),
							    .D_OUT(ifcs_2_1_rspBack$D_OUT),
							    .FULL_N(ifcs_2_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_2_1_rspBack$EMPTY_N));

  // submodule ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_2_routeBack$D_IN),
							   .ENQ(ifcs_2_routeBack$ENQ),
							   .DEQ(ifcs_2_routeBack$DEQ),
							   .CLR(ifcs_2_routeBack$CLR),
							   .D_OUT(ifcs_2_routeBack$D_OUT),
							   .FULL_N(ifcs_2_routeBack$FULL_N),
							   .EMPTY_N(ifcs_2_routeBack$EMPTY_N));

  // submodule ifcs_2_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_2_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_2_rspBack$D_IN),
							 .ENQ(ifcs_2_rspBack$ENQ),
							 .DEQ(ifcs_2_rspBack$DEQ),
							 .CLR(ifcs_2_rspBack$CLR),
							 .D_OUT(ifcs_2_rspBack$D_OUT),
							 .FULL_N(ifcs_2_rspBack$FULL_N),
							 .EMPTY_N(ifcs_2_rspBack$EMPTY_N));

  // submodule merged_0_awff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) merged_0_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(merged_0_awff$D_IN),
							 .ENQ(merged_0_awff$ENQ),
							 .DEQ(merged_0_awff$DEQ),
							 .CLR(merged_0_awff$CLR),
							 .D_OUT(merged_0_awff$D_OUT),
							 .FULL_N(merged_0_awff$FULL_N),
							 .EMPTY_N(merged_0_awff$EMPTY_N));

  // submodule merged_0_wff
  FIFO2 #(.width(32'd74), .guarded(32'd1)) merged_0_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_0_wff$D_IN),
							.ENQ(merged_0_wff$ENQ),
							.DEQ(merged_0_wff$DEQ),
							.CLR(merged_0_wff$CLR),
							.D_OUT(merged_0_wff$D_OUT),
							.FULL_N(merged_0_wff$FULL_N),
							.EMPTY_N(merged_0_wff$EMPTY_N));

  // submodule merged_1_awff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) merged_1_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(merged_1_awff$D_IN),
							 .ENQ(merged_1_awff$ENQ),
							 .DEQ(merged_1_awff$DEQ),
							 .CLR(merged_1_awff$CLR),
							 .D_OUT(merged_1_awff$D_OUT),
							 .FULL_N(merged_1_awff$FULL_N),
							 .EMPTY_N(merged_1_awff$EMPTY_N));

  // submodule merged_1_wff
  FIFO2 #(.width(32'd74), .guarded(32'd1)) merged_1_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_1_wff$D_IN),
							.ENQ(merged_1_wff$ENQ),
							.DEQ(merged_1_wff$DEQ),
							.CLR(merged_1_wff$CLR),
							.D_OUT(merged_1_wff$D_OUT),
							.FULL_N(merged_1_wff$FULL_N),
							.EMPTY_N(merged_1_wff$EMPTY_N));

  // submodule near_mem_io
  mkNear_Mem_IO_AXI4 near_mem_io(.CLK(CLK),
				 .RST_N(RST_N),
				 .axi4_slave_ar_put_val(near_mem_io$axi4_slave_ar_put_val),
				 .axi4_slave_aw_put_val(near_mem_io$axi4_slave_aw_put_val),
				 .axi4_slave_w_put_val(near_mem_io$axi4_slave_w_put_val),
				 .set_addr_map_addr_base(near_mem_io$set_addr_map_addr_base),
				 .set_addr_map_addr_lim(near_mem_io$set_addr_map_addr_lim),
				 .EN_server_reset_request_put(near_mem_io$EN_server_reset_request_put),
				 .EN_server_reset_response_get(near_mem_io$EN_server_reset_response_get),
				 .EN_set_addr_map(near_mem_io$EN_set_addr_map),
				 .EN_axi4_slave_aw_put(near_mem_io$EN_axi4_slave_aw_put),
				 .EN_axi4_slave_w_put(near_mem_io$EN_axi4_slave_w_put),
				 .EN_axi4_slave_b_drop(near_mem_io$EN_axi4_slave_b_drop),
				 .EN_axi4_slave_ar_put(near_mem_io$EN_axi4_slave_ar_put),
				 .EN_axi4_slave_r_drop(near_mem_io$EN_axi4_slave_r_drop),
				 .EN_get_timer_interrupt_req_get(near_mem_io$EN_get_timer_interrupt_req_get),
				 .EN_get_sw_interrupt_req_get(near_mem_io$EN_get_sw_interrupt_req_get),
				 .RDY_server_reset_request_put(near_mem_io$RDY_server_reset_request_put),
				 .RDY_server_reset_response_get(near_mem_io$RDY_server_reset_response_get),
				 .RDY_set_addr_map(),
				 .axi4_slave_aw_canPut(near_mem_io$axi4_slave_aw_canPut),
				 .RDY_axi4_slave_aw_put(near_mem_io$RDY_axi4_slave_aw_put),
				 .axi4_slave_w_canPut(near_mem_io$axi4_slave_w_canPut),
				 .RDY_axi4_slave_w_put(near_mem_io$RDY_axi4_slave_w_put),
				 .axi4_slave_b_canPeek(near_mem_io$axi4_slave_b_canPeek),
				 .axi4_slave_b_peek(near_mem_io$axi4_slave_b_peek),
				 .RDY_axi4_slave_b_peek(near_mem_io$RDY_axi4_slave_b_peek),
				 .RDY_axi4_slave_b_drop(near_mem_io$RDY_axi4_slave_b_drop),
				 .axi4_slave_ar_canPut(near_mem_io$axi4_slave_ar_canPut),
				 .RDY_axi4_slave_ar_put(near_mem_io$RDY_axi4_slave_ar_put),
				 .axi4_slave_r_canPeek(near_mem_io$axi4_slave_r_canPeek),
				 .axi4_slave_r_peek(near_mem_io$axi4_slave_r_peek),
				 .RDY_axi4_slave_r_peek(near_mem_io$RDY_axi4_slave_r_peek),
				 .RDY_axi4_slave_r_drop(near_mem_io$RDY_axi4_slave_r_drop),
				 .get_timer_interrupt_req_get(near_mem_io$get_timer_interrupt_req_get),
				 .RDY_get_timer_interrupt_req_get(near_mem_io$RDY_get_timer_interrupt_req_get),
				 .get_sw_interrupt_req_get(near_mem_io$get_sw_interrupt_req_get),
				 .RDY_get_sw_interrupt_req_get(near_mem_io$RDY_get_sw_interrupt_req_get));

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_ar_put_val(plic$axi4_slave_ar_put_val),
		     .axi4_slave_aw_put_val(plic$axi4_slave_aw_put_val),
		     .axi4_slave_w_put_val(plic$axi4_slave_w_put_val),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .EN_axi4_slave_aw_put(plic$EN_axi4_slave_aw_put),
		     .EN_axi4_slave_w_put(plic$EN_axi4_slave_w_put),
		     .EN_axi4_slave_b_drop(plic$EN_axi4_slave_b_drop),
		     .EN_axi4_slave_ar_put(plic$EN_axi4_slave_ar_put),
		     .EN_axi4_slave_r_drop(plic$EN_axi4_slave_r_drop),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(plic$RDY_server_reset_request_put),
		     .RDY_server_reset_response_get(plic$RDY_server_reset_response_get),
		     .RDY_set_addr_map(),
		     .axi4_slave_aw_canPut(plic$axi4_slave_aw_canPut),
		     .RDY_axi4_slave_aw_put(plic$RDY_axi4_slave_aw_put),
		     .axi4_slave_w_canPut(plic$axi4_slave_w_canPut),
		     .RDY_axi4_slave_w_put(plic$RDY_axi4_slave_w_put),
		     .axi4_slave_b_canPeek(plic$axi4_slave_b_canPeek),
		     .axi4_slave_b_peek(plic$axi4_slave_b_peek),
		     .RDY_axi4_slave_b_peek(plic$RDY_axi4_slave_b_peek),
		     .RDY_axi4_slave_b_drop(plic$RDY_axi4_slave_b_drop),
		     .axi4_slave_ar_canPut(plic$axi4_slave_ar_canPut),
		     .RDY_axi4_slave_ar_put(plic$RDY_axi4_slave_ar_put),
		     .axi4_slave_r_canPeek(plic$axi4_slave_r_canPeek),
		     .axi4_slave_r_peek(plic$axi4_slave_r_peek),
		     .RDY_axi4_slave_r_peek(plic$RDY_axi4_slave_r_peek),
		     .RDY_axi4_slave_r_drop(plic$RDY_axi4_slave_r_drop),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_near_mem_io_addr_range(soc_map$m_near_mem_io_addr_range),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     debug_module$RDY_hart0_client_run_halt_response_put &&
	     cpu$RDY_hart0_server_run_halt_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     debug_module$RDY_hart0_gpr_mem_client_request_get &&
	     cpu$RDY_hart0_gpr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     debug_module$RDY_hart0_gpr_mem_client_response_put &&
	     cpu$RDY_hart0_gpr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     debug_module$RDY_hart0_fpr_mem_client_request_get &&
	     cpu$RDY_hart0_fpr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     debug_module$RDY_hart0_fpr_mem_client_response_put &&
	     cpu$RDY_hart0_fpr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     debug_module$RDY_hart0_csr_mem_client_request_get &&
	     cpu$RDY_hart0_csr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     debug_module$RDY_hart0_csr_mem_client_response_put &&
	     cpu$RDY_hart0_csr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_checkSinkReady
  assign CAN_FIRE_RL_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady = 1'd1 ;

  // rule RL_checkSinkReady_1
  assign CAN_FIRE_RL_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_1 = 1'd1 ;

  // rule RL_checkSinkReady_2
  assign CAN_FIRE_RL_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_2 = 1'd1 ;

  // rule RL_craftReq
  assign CAN_FIRE_RL_craftReq =
	     ifcs_0_innerRoute$EMPTY_N && ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq = CAN_FIRE_RL_craftReq ;

  // rule RL_craftReq_1
  assign CAN_FIRE_RL_craftReq_1 =
	     ifcs_1_innerRoute$EMPTY_N && ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_1 = CAN_FIRE_RL_craftReq_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget ||
	      CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) &&
	     !state ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_source_selected
  assign CAN_FIRE_RL_source_selected =
	     (!ifcs_0_innerRoute$EMPTY_N || ifcs_0_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected = CAN_FIRE_RL_source_selected ;

  // rule RL_burst
  assign CAN_FIRE_RL_burst =
	     ifcs_0_innerReq$EMPTY_N && ifcs_0_innerRoute$EMPTY_N &&
	     state_73_AND_activeSource_0_46_47_AND_ifcs_0_i_ETC___d949 ;
  assign WILL_FIRE_RL_burst = CAN_FIRE_RL_burst ;

  // rule RL_source_selected_1
  assign CAN_FIRE_RL_source_selected_1 =
	     (!ifcs_1_innerRoute$EMPTY_N || ifcs_1_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_1 = CAN_FIRE_RL_source_selected_1 ;

  // rule RL_burst_1
  assign CAN_FIRE_RL_burst_1 =
	     ifcs_1_innerReq$EMPTY_N && ifcs_1_innerRoute$EMPTY_N &&
	     state_73_AND_activeSource_1_90_91_AND_ifcs_1_i_ETC___d993 ;
  assign WILL_FIRE_RL_burst_1 = CAN_FIRE_RL_burst_1 ;

  // rule __me_check_100
  assign CAN_FIRE___me_check_100 = 1'b1 ;
  assign WILL_FIRE___me_check_100 = 1'b1 ;

  // rule __me_check_102
  assign CAN_FIRE___me_check_102 = 1'b1 ;
  assign WILL_FIRE___me_check_102 = 1'b1 ;

  // rule RL_sink_selected
  assign CAN_FIRE_RL_sink_selected =
	     flitToSink_0$whas &&
	     IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794 ;
  assign WILL_FIRE_RL_sink_selected = CAN_FIRE_RL_sink_selected ;

  // rule RL_sink_selected_1
  assign CAN_FIRE_RL_sink_selected_1 =
	     flitToSink_1$whas &&
	     IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806 ;
  assign WILL_FIRE_RL_sink_selected_1 = CAN_FIRE_RL_sink_selected_1 ;

  // rule RL_sink_selected_2
  assign CAN_FIRE_RL_sink_selected_2 =
	     flitToSink_2$whas &&
	     IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818 ;
  assign WILL_FIRE_RL_sink_selected_2 = CAN_FIRE_RL_sink_selected_2 ;

  // rule __me_check_104
  assign CAN_FIRE___me_check_104 = 1'b1 ;
  assign WILL_FIRE___me_check_104 = 1'b1 ;

  // rule RL_checkSinkReady_3
  assign CAN_FIRE_RL_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_3 = 1'd1 ;

  // rule RL_checkSinkReady_4
  assign CAN_FIRE_RL_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_4 = 1'd1 ;

  // rule RL_craftReq_2
  assign CAN_FIRE_RL_craftReq_2 =
	     ifcs_0_routeBack$EMPTY_N && ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_2 = CAN_FIRE_RL_craftReq_2 ;

  // rule RL_craftReq_3
  assign CAN_FIRE_RL_craftReq_3 =
	     ifcs_1_routeBack$EMPTY_N && ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_3 = CAN_FIRE_RL_craftReq_3 ;

  // rule RL_craftReq_4
  assign CAN_FIRE_RL_craftReq_4 =
	     ifcs_2_routeBack$EMPTY_N && ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_4 = CAN_FIRE_RL_craftReq_4 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     reqWires_1_0_whas__056_AND_reqWires_1_0_wget___ETC___d1066 &&
	     !state_1 ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_source_selected_2
  assign CAN_FIRE_RL_source_selected_2 =
	     (!ifcs_0_routeBack$EMPTY_N || ifcs_0_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_0$whas ;
  assign WILL_FIRE_RL_source_selected_2 = CAN_FIRE_RL_source_selected_2 ;

  // rule RL_burst_2
  assign CAN_FIRE_RL_burst_2 =
	     ifcs_0_rspBack$EMPTY_N && ifcs_0_routeBack$EMPTY_N &&
	     state_1_067_AND_activeSource_1_0_155_156_AND_i_ETC___d1158 ;
  assign WILL_FIRE_RL_burst_2 = CAN_FIRE_RL_burst_2 ;

  // rule RL_source_selected_3
  assign CAN_FIRE_RL_source_selected_3 =
	     (!ifcs_1_routeBack$EMPTY_N || ifcs_1_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_3 = CAN_FIRE_RL_source_selected_3 ;

  // rule RL_burst_3
  assign CAN_FIRE_RL_burst_3 =
	     ifcs_1_rspBack$EMPTY_N && ifcs_1_routeBack$EMPTY_N &&
	     state_1_067_AND_activeSource_1_1_188_189_AND_i_ETC___d1191 ;
  assign WILL_FIRE_RL_burst_3 = CAN_FIRE_RL_burst_3 ;

  // rule __me_check_119
  assign CAN_FIRE___me_check_119 = 1'b1 ;
  assign WILL_FIRE___me_check_119 = 1'b1 ;

  // rule RL_source_selected_4
  assign CAN_FIRE_RL_source_selected_4 =
	     (!ifcs_2_routeBack$EMPTY_N || ifcs_2_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_2$whas ;
  assign WILL_FIRE_RL_source_selected_4 = CAN_FIRE_RL_source_selected_4 ;

  // rule RL_burst_4
  assign CAN_FIRE_RL_burst_4 =
	     ifcs_2_rspBack$EMPTY_N && ifcs_2_routeBack$EMPTY_N &&
	     state_1_067_AND_activeSource_1_2_222_223_AND_i_ETC___d1225 ;
  assign WILL_FIRE_RL_burst_4 = CAN_FIRE_RL_burst_4 ;

  // rule __me_check_117
  assign CAN_FIRE___me_check_117 = 1'b1 ;
  assign WILL_FIRE___me_check_117 = 1'b1 ;

  // rule __me_check_121
  assign CAN_FIRE___me_check_121 = 1'b1 ;
  assign WILL_FIRE___me_check_121 = 1'b1 ;

  // rule RL_sink_selected_3
  assign CAN_FIRE_RL_sink_selected_3 =
	     flitToSink_1_0$whas && cpu$dmem_master_b_canPut ;
  assign WILL_FIRE_RL_sink_selected_3 = CAN_FIRE_RL_sink_selected_3 ;

  // rule RL_sink_selected_4
  assign CAN_FIRE_RL_sink_selected_4 =
	     flitToSink_1_1$whas && debug_module$master_b_canPut ;
  assign WILL_FIRE_RL_sink_selected_4 = CAN_FIRE_RL_sink_selected_4 ;

  // rule __me_check_123
  assign CAN_FIRE___me_check_123 = 1'b1 ;
  assign WILL_FIRE___me_check_123 = 1'b1 ;

  // rule RL_checkSinkReady_5
  assign CAN_FIRE_RL_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_5 = 1'd1 ;

  // rule RL_checkSinkReady_6
  assign CAN_FIRE_RL_checkSinkReady_6 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_6 = 1'd1 ;

  // rule RL_checkSinkReady_7
  assign CAN_FIRE_RL_checkSinkReady_7 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_7 = 1'd1 ;

  // rule RL_craftReq_5
  assign CAN_FIRE_RL_craftReq_5 =
	     ifcs_0_1_innerRoute$EMPTY_N && ifcs_0_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_5 = CAN_FIRE_RL_craftReq_5 ;

  // rule RL_craftReq_6
  assign CAN_FIRE_RL_craftReq_6 =
	     ifcs_1_1_innerRoute$EMPTY_N && ifcs_1_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_6 = CAN_FIRE_RL_craftReq_6 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget ||
	      CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) &&
	     !state_1_1 ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_source_selected_5
  assign CAN_FIRE_RL_source_selected_5 =
	     (!ifcs_0_1_innerRoute$EMPTY_N || ifcs_0_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_0_1$whas ;
  assign WILL_FIRE_RL_source_selected_5 = CAN_FIRE_RL_source_selected_5 ;

  // rule RL_burst_5
  assign CAN_FIRE_RL_burst_5 =
	     ifcs_0_1_innerReq$EMPTY_N && ifcs_0_1_innerRoute$EMPTY_N &&
	     state_1_1_547_AND_activeSource_1_0_1_614_615_A_ETC___d1617 ;
  assign WILL_FIRE_RL_burst_5 = CAN_FIRE_RL_burst_5 ;

  // rule RL_source_selected_6
  assign CAN_FIRE_RL_source_selected_6 =
	     (!ifcs_1_1_innerRoute$EMPTY_N || ifcs_1_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_6 = CAN_FIRE_RL_source_selected_6 ;

  // rule RL_burst_6
  assign CAN_FIRE_RL_burst_6 =
	     ifcs_1_1_innerReq$EMPTY_N && ifcs_1_1_innerRoute$EMPTY_N &&
	     state_1_1_547_AND_activeSource_1_1_1_654_655_A_ETC___d1657 ;
  assign WILL_FIRE_RL_burst_6 = CAN_FIRE_RL_burst_6 ;

  // rule __me_check_159
  assign CAN_FIRE___me_check_159 = 1'b1 ;
  assign WILL_FIRE___me_check_159 = 1'b1 ;

  // rule __me_check_161
  assign CAN_FIRE___me_check_161 = 1'b1 ;
  assign WILL_FIRE___me_check_161 = 1'b1 ;

  // rule RL_sink_selected_5
  assign CAN_FIRE_RL_sink_selected_5 =
	     flitToSink_1_0_1$whas &&
	     !axi4_dmem_shim_tmp_shimSlave_arff_rv[98] ;
  assign WILL_FIRE_RL_sink_selected_5 = CAN_FIRE_RL_sink_selected_5 ;

  // rule RL_sink_selected_6
  assign CAN_FIRE_RL_sink_selected_6 =
	     flitToSink_1_1_1$whas && near_mem_io$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_sink_selected_6 = CAN_FIRE_RL_sink_selected_6 ;

  // rule RL_sink_selected_7
  assign CAN_FIRE_RL_sink_selected_7 =
	     flitToSink_1_2$whas && plic$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_sink_selected_7 = CAN_FIRE_RL_sink_selected_7 ;

  // rule __me_check_163
  assign CAN_FIRE___me_check_163 = 1'b1 ;
  assign WILL_FIRE___me_check_163 = 1'b1 ;

  // rule RL_checkSinkReady_8
  assign CAN_FIRE_RL_checkSinkReady_8 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_8 = 1'd1 ;

  // rule RL_checkSinkReady_9
  assign CAN_FIRE_RL_checkSinkReady_9 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_9 = 1'd1 ;

  // rule RL_craftReq_7
  assign CAN_FIRE_RL_craftReq_7 =
	     ifcs_0_1_routeBack$EMPTY_N && ifcs_0_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_7 = CAN_FIRE_RL_craftReq_7 ;

  // rule RL_craftReq_8
  assign CAN_FIRE_RL_craftReq_8 =
	     ifcs_1_1_routeBack$EMPTY_N && ifcs_1_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_8 = CAN_FIRE_RL_craftReq_8 ;

  // rule RL_craftReq_9
  assign CAN_FIRE_RL_craftReq_9 =
	     ifcs_2_1_routeBack$EMPTY_N && ifcs_2_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_9 = CAN_FIRE_RL_craftReq_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     reqWires_1_1_0_whas__720_AND_reqWires_1_1_0_wg_ETC___d1730 &&
	     !state_1_1_1 ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_source_selected_7
  assign CAN_FIRE_RL_source_selected_7 =
	     (!ifcs_0_1_routeBack$EMPTY_N || ifcs_0_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_7 = CAN_FIRE_RL_source_selected_7 ;

  // rule RL_burst_7
  assign CAN_FIRE_RL_burst_7 =
	     ifcs_0_1_rspBack$EMPTY_N && ifcs_0_1_routeBack$EMPTY_N &&
	     state_1_1_1_731_AND_activeSource_1_1_0_825_826_ETC___d1828 ;
  assign WILL_FIRE_RL_burst_7 = CAN_FIRE_RL_burst_7 ;

  // rule RL_source_selected_8
  assign CAN_FIRE_RL_source_selected_8 =
	     (!ifcs_1_1_routeBack$EMPTY_N || ifcs_1_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_1_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_8 = CAN_FIRE_RL_source_selected_8 ;

  // rule RL_burst_8
  assign CAN_FIRE_RL_burst_8 =
	     ifcs_1_1_rspBack$EMPTY_N && ifcs_1_1_routeBack$EMPTY_N &&
	     state_1_1_1_731_AND_activeSource_1_1_1_1_861_8_ETC___d1864 ;
  assign WILL_FIRE_RL_burst_8 = CAN_FIRE_RL_burst_8 ;

  // rule __me_check_178
  assign CAN_FIRE___me_check_178 = 1'b1 ;
  assign WILL_FIRE___me_check_178 = 1'b1 ;

  // rule RL_source_selected_9
  assign CAN_FIRE_RL_source_selected_9 =
	     (!ifcs_2_1_routeBack$EMPTY_N || ifcs_2_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_2$write_1__VAL_2 ;
  assign WILL_FIRE_RL_source_selected_9 = CAN_FIRE_RL_source_selected_9 ;

  // rule RL_burst_9
  assign CAN_FIRE_RL_burst_9 =
	     ifcs_2_1_rspBack$EMPTY_N && ifcs_2_1_routeBack$EMPTY_N &&
	     state_1_1_1_731_AND_activeSource_1_1_2_897_898_ETC___d1900 ;
  assign WILL_FIRE_RL_burst_9 = CAN_FIRE_RL_burst_9 ;

  // rule __me_check_176
  assign CAN_FIRE___me_check_176 = 1'b1 ;
  assign WILL_FIRE___me_check_176 = 1'b1 ;

  // rule __me_check_180
  assign CAN_FIRE___me_check_180 = 1'b1 ;
  assign WILL_FIRE___me_check_180 = 1'b1 ;

  // rule RL_sink_selected_8
  assign CAN_FIRE_RL_sink_selected_8 =
	     flitToSink_1_1_0$whas && cpu$dmem_master_r_canPut ;
  assign WILL_FIRE_RL_sink_selected_8 = CAN_FIRE_RL_sink_selected_8 ;

  // rule RL_sink_selected_9
  assign CAN_FIRE_RL_sink_selected_9 =
	     flitToSink_1_1_1_1$whas && debug_module$master_r_canPut ;
  assign WILL_FIRE_RL_sink_selected_9 = CAN_FIRE_RL_sink_selected_9 ;

  // rule __me_check_182
  assign CAN_FIRE___me_check_182 = 1'b1 ;
  assign WILL_FIRE___me_check_182 = 1'b1 ;

  // rule RL_ug_src_setPeek
  assign CAN_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;
  assign WILL_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect =
	     cpu$imem_master_aw_canPeek && delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_connect = CAN_FIRE_RL_connect ;

  // rule RL_ug_src_warnDoDrop
  assign CAN_FIRE_RL_ug_src_warnDoDrop =
	     CAN_FIRE_RL_connect && !cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_warnDoDrop = CAN_FIRE_RL_ug_src_warnDoDrop ;

  // rule RL_ug_src_doDrop
  assign CAN_FIRE_RL_ug_src_doDrop =
	     cpu$RDY_imem_master_aw_drop && CAN_FIRE_RL_connect &&
	     cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_doDrop = CAN_FIRE_RL_ug_src_doDrop ;

  // rule RL_ug_snk_warnDoPut
  assign CAN_FIRE_RL_ug_snk_warnDoPut =
	     CAN_FIRE_RL_connect && !delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_warnDoPut = CAN_FIRE_RL_ug_snk_warnDoPut ;

  // rule RL_ug_snk_doPut
  assign CAN_FIRE_RL_ug_snk_doPut =
	     delay_shim_awff$FULL_N && CAN_FIRE_RL_connect ;
  assign WILL_FIRE_RL_ug_snk_doPut = CAN_FIRE_RL_ug_snk_doPut ;

  // rule RL_ug_src_1_setPeek
  assign CAN_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;
  assign WILL_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 =
	     cpu$imem_master_w_canPeek && delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_connect_1 = CAN_FIRE_RL_connect_1 ;

  // rule RL_ug_src_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop =
	     CAN_FIRE_RL_connect_1 && !cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop = CAN_FIRE_RL_ug_src_1_warnDoDrop ;

  // rule RL_ug_src_1_doDrop
  assign CAN_FIRE_RL_ug_src_1_doDrop =
	     cpu$RDY_imem_master_w_drop && CAN_FIRE_RL_connect_1 &&
	     cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_doDrop = CAN_FIRE_RL_ug_src_1_doDrop ;

  // rule RL_ug_snk_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut =
	     CAN_FIRE_RL_connect_1 && !delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut = CAN_FIRE_RL_ug_snk_1_warnDoPut ;

  // rule RL_ug_snk_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_doPut =
	     delay_shim_wff$FULL_N && CAN_FIRE_RL_connect_1 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut = CAN_FIRE_RL_ug_snk_1_doPut ;

  // rule RL_ug_src_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;

  // rule RL_connect_2
  assign CAN_FIRE_RL_connect_2 =
	     delay_shim_bff$EMPTY_N && cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_connect_2 = CAN_FIRE_RL_connect_2 ;

  // rule RL_ug_src_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop =
	     CAN_FIRE_RL_connect_2 && !delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop = CAN_FIRE_RL_ug_src_2_warnDoDrop ;

  // rule RL_ug_src_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_doDrop =
	     delay_shim_bff$EMPTY_N && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop = CAN_FIRE_RL_ug_src_2_doDrop ;

  // rule RL_ug_snk_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut =
	     CAN_FIRE_RL_connect_2 && !cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut = CAN_FIRE_RL_ug_snk_2_warnDoPut ;

  // rule RL_ug_snk_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_doPut =
	     cpu$RDY_imem_master_b_put && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut = CAN_FIRE_RL_ug_snk_2_doPut ;

  // rule RL_ug_src_3_setPeek
  assign CAN_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;
  assign WILL_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;

  // rule RL_connect_3
  assign CAN_FIRE_RL_connect_3 =
	     cpu$imem_master_ar_canPeek && delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_connect_3 = CAN_FIRE_RL_connect_3 ;

  // rule RL_ug_src_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop =
	     CAN_FIRE_RL_connect_3 && !cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop = CAN_FIRE_RL_ug_src_3_warnDoDrop ;

  // rule RL_ug_src_3_doDrop
  assign CAN_FIRE_RL_ug_src_3_doDrop =
	     cpu$RDY_imem_master_ar_drop && CAN_FIRE_RL_connect_3 &&
	     cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_doDrop = CAN_FIRE_RL_ug_src_3_doDrop ;

  // rule RL_ug_snk_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut =
	     CAN_FIRE_RL_connect_3 && !delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut = CAN_FIRE_RL_ug_snk_3_warnDoPut ;

  // rule RL_ug_snk_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_doPut =
	     delay_shim_arff$FULL_N && CAN_FIRE_RL_connect_3 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut = CAN_FIRE_RL_ug_snk_3_doPut ;

  // rule RL_ug_src_4_setPeek
  assign CAN_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;

  // rule RL_connect_4
  assign CAN_FIRE_RL_connect_4 =
	     delay_shim_rff$EMPTY_N && cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_connect_4 = CAN_FIRE_RL_connect_4 ;

  // rule RL_ug_src_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_4_warnDoDrop =
	     CAN_FIRE_RL_connect_4 && !delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_warnDoDrop = CAN_FIRE_RL_ug_src_4_warnDoDrop ;

  // rule RL_ug_src_4_doDrop
  assign CAN_FIRE_RL_ug_src_4_doDrop =
	     delay_shim_rff$EMPTY_N && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_src_4_doDrop = CAN_FIRE_RL_ug_src_4_doDrop ;

  // rule RL_ug_snk_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_4_warnDoPut =
	     CAN_FIRE_RL_connect_4 && !cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_ug_snk_4_warnDoPut = CAN_FIRE_RL_ug_snk_4_warnDoPut ;

  // rule RL_ug_snk_4_doPut
  assign CAN_FIRE_RL_ug_snk_4_doPut =
	     cpu$RDY_imem_master_r_put && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_snk_4_doPut = CAN_FIRE_RL_ug_snk_4_doPut ;

  // rule RL_axi4_dmem_shim_tmp_passCacheResponse
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse =
	     axi4_dmem_shim_tmp_tagCon$RDY_cache_response_get &&
	     !axi4_dmem_shim_tmp_shimSlave_bff_rv[7] &&
	     !axi4_dmem_shim_tmp_shimSlave_rff_rv[73] ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse ;

  // rule RL_axi4_dmem_shim_tmp_passMemoryRequest
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest =
	     axi4_dmem_shim_tmp_tagCon$RDY_memory_request_get &&
	     !axi4_dmem_shim_tmp_shimMaster_wff_rv[73] &&
	     (axi4_dmem_shim_tmp_doneSendingAW ||
	      !axi4_dmem_shim_tmp_shimMaster_awff_rv[99]) &&
	     !axi4_dmem_shim_tmp_shimMaster_arff_rv[99] ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest ;

  // rule RL_axi4_dmem_shim_tmp_passMemoryResponseWrite
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite =
	     axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__read[8] &&
	     axi4_dmem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead ;

  // rule RL_axi4_dmem_shim_tmp_passMemoryResponseRead
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead =
	     axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read[73] &&
	     axi4_dmem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead ;

  // rule RL_merged_0_passFlit
  assign CAN_FIRE_RL_merged_0_passFlit =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_passFlit = CAN_FIRE_RL_merged_0_passFlit ;

  // rule RL_merged_1_passFlit
  assign CAN_FIRE_RL_merged_1_passFlit =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_passFlit = CAN_FIRE_RL_merged_1_passFlit ;

  // rule RL_ifcs_0_firstFlit
  assign CAN_FIRE_RL_ifcs_0_firstFlit =
	     IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 &&
	     ifcs_0_innerReq$FULL_N &&
	     ifcs_0_innerRoute$FULL_N &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_outflit_whas__49_AND_NOT_merged_ETC___d587 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit = CAN_FIRE_RL_ifcs_0_firstFlit ;

  // rule RL_ifcs_0_followFlits
  assign CAN_FIRE_RL_ifcs_0_followFlits =
	     IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 &&
	     ifcs_0_innerReq$FULL_N &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) &&
	     ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits = CAN_FIRE_RL_ifcs_0_followFlits ;

  // rule RL_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_nonRoutableFlit =
	     IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 &&
	     (!CAN_FIRE_RL_merged_0_passFlit || merged_0_outflit$wget[171] ||
	      !ifcs_0_noRoute_inner_pendingReq) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_outflit_whas__49_AND_NOT_merged_ETC___d587 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_nonRoutableFlit ;

  // rule RL_ifcs_0_drainFlits
  assign CAN_FIRE_RL_ifcs_0_drainFlits =
	     IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) &&
	     ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_drainFlits = CAN_FIRE_RL_ifcs_0_drainFlits ;

  // rule __me_check_70
  assign CAN_FIRE___me_check_70 = 1'b1 ;
  assign WILL_FIRE___me_check_70 = 1'b1 ;

  // rule RL_ifcs_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_firstFlit =
	     IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 &&
	     ifcs_1_innerReq$FULL_N &&
	     ifcs_1_innerRoute$FULL_N &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_outflit_whas__49_AND_NOT_merged_ETC___d687 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit = CAN_FIRE_RL_ifcs_1_firstFlit ;

  // rule RL_ifcs_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_followFlits =
	     IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 &&
	     ifcs_1_innerReq$FULL_N &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) &&
	     ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits = CAN_FIRE_RL_ifcs_1_followFlits ;

  // rule RL_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_nonRoutableFlit =
	     IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 &&
	     (!CAN_FIRE_RL_merged_1_passFlit || merged_1_outflit$wget[171] ||
	      !ifcs_1_noRoute_inner_pendingReq) &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_outflit_whas__49_AND_NOT_merged_ETC___d687 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_nonRoutableFlit ;

  // rule RL_ifcs_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_drainFlits =
	     IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) &&
	     ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_drainFlits = CAN_FIRE_RL_ifcs_1_drainFlits ;

  // rule __me_check_78
  assign CAN_FIRE___me_check_78 = 1'b1 ;
  assign WILL_FIRE___me_check_78 = 1'b1 ;

  // rule RL_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_firstFlit_1 =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_routeBack$FULL_N &&
	     !ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit_1 = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;

  // rule RL_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_followFlits_1 =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // rule __me_check_82
  assign CAN_FIRE___me_check_82 = 1'b1 ;
  assign WILL_FIRE___me_check_82 = 1'b1 ;

  // rule RL_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_firstFlit_1 =
	     near_mem_io$RDY_axi4_slave_b_drop &&
	     near_mem_io$RDY_axi4_slave_b_peek &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     ifcs_1_rspBack$FULL_N &&
	     ifcs_1_routeBack$FULL_N &&
	     !ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit_1 = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;

  // rule RL_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_followFlits_1 =
	     near_mem_io$RDY_axi4_slave_b_drop &&
	     near_mem_io$RDY_axi4_slave_b_peek &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     ifcs_1_rspBack$FULL_N &&
	     ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // rule __me_check_84
  assign CAN_FIRE___me_check_84 = 1'b1 ;
  assign WILL_FIRE___me_check_84 = 1'b1 ;

  // rule RL_ifcs_2_firstFlit
  assign CAN_FIRE_RL_ifcs_2_firstFlit =
	     plic$RDY_axi4_slave_b_drop && plic$RDY_axi4_slave_b_peek &&
	     plic$axi4_slave_b_canPeek &&
	     ifcs_2_rspBack$FULL_N &&
	     ifcs_2_routeBack$FULL_N &&
	     !ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_firstFlit = CAN_FIRE_RL_ifcs_2_firstFlit ;

  // rule RL_ifcs_2_followFlits
  assign CAN_FIRE_RL_ifcs_2_followFlits =
	     plic$RDY_axi4_slave_b_drop && plic$RDY_axi4_slave_b_peek &&
	     plic$axi4_slave_b_canPeek &&
	     ifcs_2_rspBack$FULL_N &&
	     ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_followFlits = CAN_FIRE_RL_ifcs_2_followFlits ;

  // rule __me_check_86
  assign CAN_FIRE___me_check_86 = 1'b1 ;
  assign WILL_FIRE___me_check_86 = 1'b1 ;

  // rule RL_sinks_0_warnDoPut
  assign CAN_FIRE_RL_sinks_0_warnDoPut =
	     CAN_FIRE_RL_sink_selected &&
	     ((split_0_flitLeft == 8'd0) ?
		axi4_dmem_shim_tmp_shimSlave_awff_rv[98] ||
		axi4_dmem_shim_tmp_shimSlave_wff_rv[74] :
		axi4_dmem_shim_tmp_shimSlave_wff_rv[74]) ;
  assign WILL_FIRE_RL_sinks_0_warnDoPut = CAN_FIRE_RL_sinks_0_warnDoPut ;

  // rule RL_sinks_0_doPut
  assign CAN_FIRE_RL_sinks_0_doPut =
	     IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794 &&
	     CAN_FIRE_RL_sink_selected ;
  assign WILL_FIRE_RL_sinks_0_doPut = CAN_FIRE_RL_sinks_0_doPut ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__43_AND_split_0_doPut_wget__ETC___d454 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_axi4_dmem_shim_tmp_getCacheAW
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW =
	     axi4_dmem_shim_tmp_shimSlave_awff_rv$port1__read[98] &&
	     axi4_dmem_shim_tmp_awreqff$FULL_N ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_sinks_0_doPut &&
	     (!split_0_doPut$wget[172] ||
	      !axi4_dmem_shim_tmp_shimSlave_wff_rv[74]) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_sinks_1_warnDoPut
  assign CAN_FIRE_RL_sinks_1_warnDoPut =
	     CAN_FIRE_RL_sink_selected_1 &&
	     ((split_1_flitLeft == 8'd0) ?
		!near_mem_io$axi4_slave_aw_canPut ||
		!near_mem_io$axi4_slave_w_canPut :
		!near_mem_io$axi4_slave_w_canPut) ;
  assign WILL_FIRE_RL_sinks_1_warnDoPut = CAN_FIRE_RL_sinks_1_warnDoPut ;

  // rule RL_sinks_1_doPut
  assign CAN_FIRE_RL_sinks_1_doPut =
	     IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806 &&
	     CAN_FIRE_RL_sink_selected_1 ;
  assign WILL_FIRE_RL_sinks_1_doPut = CAN_FIRE_RL_sinks_1_doPut ;

  // rule RL_sinks_2_warnDoPut
  assign CAN_FIRE_RL_sinks_2_warnDoPut =
	     CAN_FIRE_RL_sink_selected_2 &&
	     ((split_2_flitLeft == 8'd0) ?
		!plic$axi4_slave_aw_canPut || !plic$axi4_slave_w_canPut :
		!plic$axi4_slave_w_canPut) ;
  assign WILL_FIRE_RL_sinks_2_warnDoPut = CAN_FIRE_RL_sinks_2_warnDoPut ;

  // rule RL_sinks_2_doPut
  assign CAN_FIRE_RL_sinks_2_doPut =
	     IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818 &&
	     CAN_FIRE_RL_sink_selected_2 ;
  assign WILL_FIRE_RL_sinks_2_doPut = CAN_FIRE_RL_sinks_2_doPut ;

  // rule RL_sinks_1_0_warnDoPut
  assign CAN_FIRE_RL_sinks_1_0_warnDoPut =
	     CAN_FIRE_RL_sink_selected_3 && !cpu$dmem_master_b_canPut ;
  assign WILL_FIRE_RL_sinks_1_0_warnDoPut = CAN_FIRE_RL_sinks_1_0_warnDoPut ;

  // rule RL_sinks_1_0_doPut
  assign CAN_FIRE_RL_sinks_1_0_doPut =
	     cpu$dmem_master_b_canPut && CAN_FIRE_RL_sink_selected_3 ;
  assign WILL_FIRE_RL_sinks_1_0_doPut = CAN_FIRE_RL_sinks_1_0_doPut ;

  // rule RL_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     ifcs_0_noRouteRsp$EMPTY_N && !CAN_FIRE_RL_sinks_1_0_doPut &&
	     cpu$dmem_master_b_canPut ;
  assign WILL_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_drainNoRouteResponse &&
	     !WILL_FIRE_RL_sinks_1_0_doPut ;

  // rule RL_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     ifcs_0_noRouteRsp$FULL_N &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_68
  assign CAN_FIRE___me_check_68 = 1'b1 ;
  assign WILL_FIRE___me_check_68 = 1'b1 ;

  // rule __me_check_69
  assign CAN_FIRE___me_check_69 = 1'b1 ;
  assign WILL_FIRE___me_check_69 = 1'b1 ;

  // rule __me_check_72
  assign CAN_FIRE___me_check_72 = 1'b1 ;
  assign WILL_FIRE___me_check_72 = 1'b1 ;

  // rule RL_merged_0_awFlit
  assign CAN_FIRE_RL_merged_0_awFlit =
	     cpu$RDY_dmem_master_aw_drop && cpu$RDY_dmem_master_aw_peek &&
	     merged_0_awff$FULL_N ;
  assign WILL_FIRE_RL_merged_0_awFlit = CAN_FIRE_RL_merged_0_awFlit ;

  // rule RL_merged_0_wFlit
  assign CAN_FIRE_RL_merged_0_wFlit =
	     cpu$RDY_dmem_master_w_drop && cpu$RDY_dmem_master_w_peek &&
	     merged_0_wff$FULL_N ;
  assign WILL_FIRE_RL_merged_0_wFlit = CAN_FIRE_RL_merged_0_wFlit ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     merged_0_wff$EMPTY_N && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_ifcs_0_snk_warnDoPut
  assign CAN_FIRE_RL_ifcs_0_snk_warnDoPut =
	     ifcs_0_snk_putWire$whas && !cpu$dmem_master_b_canPut ;
  assign WILL_FIRE_RL_ifcs_0_snk_warnDoPut =
	     CAN_FIRE_RL_ifcs_0_snk_warnDoPut ;

  // rule RL_ifcs_0_snk_doPut
  assign CAN_FIRE_RL_ifcs_0_snk_doPut =
	     cpu$RDY_dmem_master_b_put && ifcs_0_snk_putWire$whas ;
  assign WILL_FIRE_RL_ifcs_0_snk_doPut = CAN_FIRE_RL_ifcs_0_snk_doPut ;

  // rule RL_sinks_1_1_warnDoPut
  assign CAN_FIRE_RL_sinks_1_1_warnDoPut =
	     CAN_FIRE_RL_sink_selected_4 && !debug_module$master_b_canPut ;
  assign WILL_FIRE_RL_sinks_1_1_warnDoPut = CAN_FIRE_RL_sinks_1_1_warnDoPut ;

  // rule RL_sinks_1_1_doPut
  assign CAN_FIRE_RL_sinks_1_1_doPut =
	     debug_module$master_b_canPut && CAN_FIRE_RL_sink_selected_4 ;
  assign WILL_FIRE_RL_sinks_1_1_doPut = CAN_FIRE_RL_sinks_1_1_doPut ;

  // rule RL_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     ifcs_1_noRouteRsp$EMPTY_N && !CAN_FIRE_RL_sinks_1_1_doPut &&
	     debug_module$master_b_canPut ;
  assign WILL_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_drainNoRouteResponse &&
	     !WILL_FIRE_RL_sinks_1_1_doPut ;

  // rule RL_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_76
  assign CAN_FIRE___me_check_76 = 1'b1 ;
  assign WILL_FIRE___me_check_76 = 1'b1 ;

  // rule __me_check_77
  assign CAN_FIRE___me_check_77 = 1'b1 ;
  assign WILL_FIRE___me_check_77 = 1'b1 ;

  // rule __me_check_80
  assign CAN_FIRE___me_check_80 = 1'b1 ;
  assign WILL_FIRE___me_check_80 = 1'b1 ;

  // rule RL_merged_1_awFlit
  assign CAN_FIRE_RL_merged_1_awFlit =
	     debug_module$RDY_master_aw_drop &&
	     debug_module$RDY_master_aw_peek &&
	     merged_1_awff$FULL_N ;
  assign WILL_FIRE_RL_merged_1_awFlit = CAN_FIRE_RL_merged_1_awFlit ;

  // rule RL_merged_1_wFlit
  assign CAN_FIRE_RL_merged_1_wFlit =
	     debug_module$RDY_master_w_drop &&
	     debug_module$RDY_master_w_peek &&
	     merged_1_wff$FULL_N ;
  assign WILL_FIRE_RL_merged_1_wFlit = CAN_FIRE_RL_merged_1_wFlit ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genFirst = CAN_FIRE_RL_merged_1_genFirst ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     merged_1_wff$EMPTY_N && merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_ifcs_1_snk_warnDoPut
  assign CAN_FIRE_RL_ifcs_1_snk_warnDoPut =
	     ifcs_1_snk_putWire$whas && !debug_module$master_b_canPut ;
  assign WILL_FIRE_RL_ifcs_1_snk_warnDoPut =
	     CAN_FIRE_RL_ifcs_1_snk_warnDoPut ;

  // rule RL_ifcs_0_1_firstFlit
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit =
	     cpu$RDY_dmem_master_ar_drop && cpu$RDY_dmem_master_ar_peek &&
	     ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_innerRoute$FULL_N &&
	     ifcs_0_1_state == 2'd0 &&
	     cpu$dmem_master_ar_canPeek &&
	     IF_cpu_dmem_master_ar_peek__251_BITS_92_TO_69__ETC___d1278 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit = CAN_FIRE_RL_ifcs_0_1_firstFlit ;

  // rule RL_ifcs_0_1_followFlits
  assign CAN_FIRE_RL_ifcs_0_1_followFlits =
	     cpu$RDY_dmem_master_ar_drop && cpu$RDY_dmem_master_ar_peek &&
	     ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_state == 2'd1 &&
	     cpu$dmem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits =
	     CAN_FIRE_RL_ifcs_0_1_followFlits ;

  // rule RL_ifcs_0_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     ifcs_0_1_noRoute_flitCount == 9'd0 &&
	     cpu$RDY_dmem_master_ar_peek &&
	     ifcs_0_1_state == 2'd0 &&
	     cpu$dmem_master_ar_canPeek &&
	     IF_cpu_dmem_master_ar_peek__251_BITS_92_TO_69__ETC___d1278 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ;

  // rule RL_ifcs_0_1_drainFlits
  assign CAN_FIRE_RL_ifcs_0_1_drainFlits =
	     cpu$RDY_dmem_master_ar_drop && ifcs_0_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_1_drainFlits = CAN_FIRE_RL_ifcs_0_1_drainFlits ;

  // rule __me_check_129
  assign CAN_FIRE___me_check_129 = 1'b1 ;
  assign WILL_FIRE___me_check_129 = 1'b1 ;

  // rule RL_ifcs_1_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit =
	     debug_module$RDY_master_ar_drop &&
	     debug_module$RDY_master_ar_peek &&
	     ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_innerRoute$FULL_N &&
	     ifcs_1_1_state == 2'd0 &&
	     debug_module$master_ar_canPeek &&
	     IF_debug_module_master_ar_peek__340_BITS_92_TO_ETC___d1367 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit = CAN_FIRE_RL_ifcs_1_1_firstFlit ;

  // rule RL_ifcs_1_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_1_followFlits =
	     debug_module$RDY_master_ar_drop &&
	     debug_module$RDY_master_ar_peek &&
	     ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_state == 2'd1 &&
	     debug_module$master_ar_canPeek ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits =
	     CAN_FIRE_RL_ifcs_1_1_followFlits ;

  // rule RL_ifcs_1_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     ifcs_1_1_noRoute_flitCount == 9'd0 &&
	     debug_module$RDY_master_ar_peek &&
	     ifcs_1_1_state == 2'd0 &&
	     debug_module$master_ar_canPeek &&
	     IF_debug_module_master_ar_peek__340_BITS_92_TO_ETC___d1367 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ;

  // rule RL_ifcs_1_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_1_drainFlits =
	     debug_module$RDY_master_ar_drop && ifcs_1_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_1_drainFlits = CAN_FIRE_RL_ifcs_1_1_drainFlits ;

  // rule __me_check_137
  assign CAN_FIRE___me_check_137 = 1'b1 ;
  assign WILL_FIRE___me_check_137 = 1'b1 ;

  // rule RL_ifcs_0_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_routeBack$FULL_N &&
	     !ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;

  // rule RL_ifcs_0_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_1_followFlits_1 =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_1_followFlits_1 ;

  // rule __me_check_141
  assign CAN_FIRE___me_check_141 = 1'b1 ;
  assign WILL_FIRE___me_check_141 = 1'b1 ;

  // rule RL_ifcs_1_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     near_mem_io$RDY_axi4_slave_r_drop &&
	     near_mem_io$RDY_axi4_slave_r_peek &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_routeBack$FULL_N &&
	     !ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;

  // rule RL_ifcs_1_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_1_followFlits_1 =
	     near_mem_io$RDY_axi4_slave_r_drop &&
	     near_mem_io$RDY_axi4_slave_r_peek &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_1_followFlits_1 ;

  // rule __me_check_143
  assign CAN_FIRE___me_check_143 = 1'b1 ;
  assign WILL_FIRE___me_check_143 = 1'b1 ;

  // rule RL_ifcs_2_1_firstFlit
  assign CAN_FIRE_RL_ifcs_2_1_firstFlit =
	     plic$RDY_axi4_slave_r_drop && plic$RDY_axi4_slave_r_peek &&
	     plic$axi4_slave_r_canPeek &&
	     ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_routeBack$FULL_N &&
	     !ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_firstFlit = CAN_FIRE_RL_ifcs_2_1_firstFlit ;

  // rule RL_ifcs_2_1_followFlits
  assign CAN_FIRE_RL_ifcs_2_1_followFlits =
	     plic$RDY_axi4_slave_r_drop && plic$RDY_axi4_slave_r_peek &&
	     plic$axi4_slave_r_canPeek &&
	     ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_followFlits =
	     CAN_FIRE_RL_ifcs_2_1_followFlits ;

  // rule __me_check_145
  assign CAN_FIRE___me_check_145 = 1'b1 ;
  assign WILL_FIRE___me_check_145 = 1'b1 ;

  // rule RL_sinks_1_0_warnDoPut_1
  assign CAN_FIRE_RL_sinks_1_0_warnDoPut_1 =
	     CAN_FIRE_RL_sink_selected_5 &&
	     axi4_dmem_shim_tmp_shimSlave_arff_rv[98] ;
  assign WILL_FIRE_RL_sinks_1_0_warnDoPut_1 =
	     CAN_FIRE_RL_sinks_1_0_warnDoPut_1 ;

  // rule RL_sinks_1_0_doPut_1
  assign CAN_FIRE_RL_sinks_1_0_doPut_1 =
	     !axi4_dmem_shim_tmp_shimSlave_arff_rv[98] &&
	     CAN_FIRE_RL_sink_selected_5 ;
  assign WILL_FIRE_RL_sinks_1_0_doPut_1 = CAN_FIRE_RL_sinks_1_0_doPut_1 ;

  // rule RL_axi4_dmem_shim_tmp_passCacheWrite
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite =
	     axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[74] &&
	     axi4_dmem_shim_tmp_tagCon$RDY_cache_request_put &&
	     axi4_dmem_shim_tmp_awreqff$EMPTY_N ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite &&
	     !WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead ;

  // rule RL_axi4_dmem_shim_tmp_passCacheRead
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead =
	     axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read[98] &&
	     axi4_dmem_shim_tmp_tagCon$RDY_cache_request_put ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead ;

  // rule RL_axi4_dmem_shim_tmp_propagateReset
  assign CAN_FIRE_RL_axi4_dmem_shim_tmp_propagateReset =
	     !axi4_dmem_shim_tmp_reset_done ;
  assign WILL_FIRE_RL_axi4_dmem_shim_tmp_propagateReset =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_propagateReset ;

  // rule RL_sinks_1_1_warnDoPut_1
  assign CAN_FIRE_RL_sinks_1_1_warnDoPut_1 =
	     CAN_FIRE_RL_sink_selected_6 &&
	     !near_mem_io$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_sinks_1_1_warnDoPut_1 =
	     CAN_FIRE_RL_sinks_1_1_warnDoPut_1 ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__78_AND_split_1_doPut_wget__ETC___d485 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_sinks_1_doPut &&
	     (!split_1_doPut$wget[172] || near_mem_io$RDY_axi4_slave_w_put) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_sinks_1_1_doPut_1
  assign CAN_FIRE_RL_sinks_1_1_doPut_1 =
	     near_mem_io$RDY_axi4_slave_ar_put &&
	     CAN_FIRE_RL_sink_selected_6 ;
  assign WILL_FIRE_RL_sinks_1_1_doPut_1 = CAN_FIRE_RL_sinks_1_1_doPut_1 ;

  // rule RL_sinks_1_2_warnDoPut
  assign CAN_FIRE_RL_sinks_1_2_warnDoPut =
	     CAN_FIRE_RL_sink_selected_7 && !plic$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_sinks_1_2_warnDoPut = CAN_FIRE_RL_sinks_1_2_warnDoPut ;

  // rule RL_sinks_1_2_doPut
  assign CAN_FIRE_RL_sinks_1_2_doPut =
	     plic$RDY_axi4_slave_ar_put && CAN_FIRE_RL_sink_selected_7 ;
  assign WILL_FIRE_RL_sinks_1_2_doPut = CAN_FIRE_RL_sinks_1_2_doPut ;

  // rule RL_sinks_1_1_0_warnDoPut
  assign CAN_FIRE_RL_sinks_1_1_0_warnDoPut =
	     CAN_FIRE_RL_sink_selected_8 && !cpu$dmem_master_r_canPut ;
  assign WILL_FIRE_RL_sinks_1_1_0_warnDoPut =
	     CAN_FIRE_RL_sinks_1_1_0_warnDoPut ;

  // rule RL_sinks_1_1_0_doPut
  assign CAN_FIRE_RL_sinks_1_1_0_doPut =
	     cpu$dmem_master_r_canPut && CAN_FIRE_RL_sink_selected_8 ;
  assign WILL_FIRE_RL_sinks_1_1_0_doPut = CAN_FIRE_RL_sinks_1_1_0_doPut ;

  // rule RL_ifcs_0_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     ifcs_0_1_noRouteRsp$EMPTY_N && !CAN_FIRE_RL_sinks_1_1_0_doPut &&
	     cpu$dmem_master_r_canPut ;
  assign WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse &&
	     !WILL_FIRE_RL_sinks_1_1_0_doPut ;

  // rule RL_ifcs_0_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     x_port1__read__h64181 != 9'd0 && ifcs_0_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h64181 != 9'd1 || cpu$RDY_dmem_master_ar_drop) ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;

  // rule __me_check_127
  assign CAN_FIRE___me_check_127 = 1'b1 ;
  assign WILL_FIRE___me_check_127 = 1'b1 ;

  // rule __me_check_128
  assign CAN_FIRE___me_check_128 = 1'b1 ;
  assign WILL_FIRE___me_check_128 = 1'b1 ;

  // rule __me_check_131
  assign CAN_FIRE___me_check_131 = 1'b1 ;
  assign WILL_FIRE___me_check_131 = 1'b1 ;

  // rule RL_ifcs_0_1_snk_warnDoPut
  assign CAN_FIRE_RL_ifcs_0_1_snk_warnDoPut =
	     ifcs_0_1_snk_putWire$whas && !cpu$dmem_master_r_canPut ;
  assign WILL_FIRE_RL_ifcs_0_1_snk_warnDoPut =
	     CAN_FIRE_RL_ifcs_0_1_snk_warnDoPut ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     debug_module$RDY_hart0_client_run_halt_request_get &&
	     cpu$RDY_hart0_server_run_halt_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__89_AND_cpu__ETC___d295 ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_from_dm_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     debug_module$RDY_hart0_reset_client_request_get &&
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_requestor$FULL_N &&
	     !CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start &&
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     (f_reset_requestor$D_OUT ||
	      debug_module$RDY_hart0_reset_client_response_put) &&
	     (!f_reset_requestor$D_OUT || f_reset_rsps$FULL_N) ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__07_AND_split_2_doPut_wget__ETC___d514 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_sinks_2_doPut &&
	     (!split_2_doPut$wget[172] || plic$RDY_axi4_slave_w_put) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_ifcs_0_1_snk_doPut
  assign CAN_FIRE_RL_ifcs_0_1_snk_doPut =
	     cpu$RDY_dmem_master_r_put && ifcs_0_1_snk_putWire$whas ;
  assign WILL_FIRE_RL_ifcs_0_1_snk_doPut = CAN_FIRE_RL_ifcs_0_1_snk_doPut ;

  // rule RL_sinks_1_1_1_warnDoPut
  assign CAN_FIRE_RL_sinks_1_1_1_warnDoPut =
	     CAN_FIRE_RL_sink_selected_9 && !debug_module$master_r_canPut ;
  assign WILL_FIRE_RL_sinks_1_1_1_warnDoPut =
	     CAN_FIRE_RL_sinks_1_1_1_warnDoPut ;

  // rule RL_sinks_1_1_1_doPut
  assign CAN_FIRE_RL_sinks_1_1_1_doPut =
	     debug_module$master_r_canPut && CAN_FIRE_RL_sink_selected_9 ;
  assign WILL_FIRE_RL_sinks_1_1_1_doPut = CAN_FIRE_RL_sinks_1_1_1_doPut ;

  // rule RL_ifcs_1_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     ifcs_1_1_noRouteRsp$EMPTY_N && !CAN_FIRE_RL_sinks_1_1_1_doPut &&
	     debug_module$master_r_canPut ;
  assign WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse &&
	     !WILL_FIRE_RL_sinks_1_1_1_doPut ;

  // rule RL_ifcs_1_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     x_port1__read__h66726 != 9'd0 && ifcs_1_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h66726 != 9'd1 ||
	      debug_module$RDY_master_ar_drop) ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;

  // rule __me_check_135
  assign CAN_FIRE___me_check_135 = 1'b1 ;
  assign WILL_FIRE___me_check_135 = 1'b1 ;

  // rule __me_check_136
  assign CAN_FIRE___me_check_136 = 1'b1 ;
  assign WILL_FIRE___me_check_136 = 1'b1 ;

  // rule __me_check_139
  assign CAN_FIRE___me_check_139 = 1'b1 ;
  assign WILL_FIRE___me_check_139 = 1'b1 ;

  // rule RL_ifcs_1_1_snk_warnDoPut
  assign CAN_FIRE_RL_ifcs_1_1_snk_warnDoPut =
	     ifcs_1_1_snk_putWire$whas && !debug_module$master_r_canPut ;
  assign WILL_FIRE_RL_ifcs_1_1_snk_warnDoPut =
	     CAN_FIRE_RL_ifcs_1_1_snk_warnDoPut ;

  // rule RL_ifcs_1_snk_doPut
  assign CAN_FIRE_RL_ifcs_1_snk_doPut =
	     debug_module$RDY_master_b_put && ifcs_1_snk_putWire$whas ;
  assign WILL_FIRE_RL_ifcs_1_snk_doPut = CAN_FIRE_RL_ifcs_1_snk_doPut ;

  // rule RL_ifcs_1_1_snk_doPut
  assign CAN_FIRE_RL_ifcs_1_1_snk_doPut =
	     debug_module$RDY_master_r_put && ifcs_1_1_snk_putWire$whas ;
  assign WILL_FIRE_RL_ifcs_1_1_snk_doPut = CAN_FIRE_RL_ifcs_1_1_snk_doPut ;

  // inputs to muxes for submodule ports
  assign MUX_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_2 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;
  assign MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ;
  assign MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign MUX_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_ifcs_0_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[1] ;
  assign MUX_ifcs_0_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_firstFlit &&
	     IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603 ;
  assign MUX_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603 ;
  assign MUX_ifcs_0_state$write_1__PSEL_3 =
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ;
  assign MUX_ifcs_0_state$write_1__SEL_3 =
	     MUX_ifcs_0_state$write_1__PSEL_3 &&
	     IF_merged_0_outflit_whas__49_THEN_merged_0_out_ETC___d608 ;
  assign MUX_ifcs_1_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_r_peek[0] ;
  assign MUX_ifcs_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703 ;
  assign MUX_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703 ;
  assign MUX_ifcs_1_state$write_1__PSEL_3 =
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ;
  assign MUX_ifcs_1_state$write_1__SEL_3 =
	     MUX_ifcs_1_state$write_1__PSEL_3 &&
	     IF_merged_1_outflit_whas__49_THEN_merged_1_out_ETC___d708 ;
  assign MUX_ifcs_2_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_r_peek[0] ;
  assign MUX_near_mem_io$axi4_slave_w_put_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ;
  assign MUX_near_mem_io$axi4_slave_w_put_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign MUX_plic$axi4_slave_w_put_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ;
  assign MUX_plic$axi4_slave_w_put_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ;
  assign MUX_state$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d900 ;
  assign MUX_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d904 ;
  assign MUX_activeSource_1_1_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1778 ;
  assign MUX_activeSource_1_1_1_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1784 ;
  assign MUX_activeSource_1_1_2$write_1__VAL_2 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1790 ;
  assign MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1, split_0_doPut$wget[73:0] } ;
  assign MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_1 =
	     { tmp__h7784[39:3],
	       4'd0,
	       axi4_dmem_shim_tmp_awreqff$D_OUT[97:93],
	       3'd1,
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[1],
	       axi4_dmem_shim_tmp_awreqff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[9:2],
	       8'd255,
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[0],
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[73:10],
	       axi4_dmem_shim_tmp_awreqff$D_OUT[28:21] } ;
  assign MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_2 =
	     { axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read[68:29],
	       1'd0,
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read[97:93],
	       3'd0,
	       83'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read[14:11] < 4'd4,
	       2'd0,
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read[23:18] } ;
  assign MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_1 =
	     { axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__read[7:2],
	       4'd1,
	       2'bxx /* unspecified value */ ,
	       65'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_2 =
	     { axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read[72:67],
	       4'd0,
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read[0],
	       1'd0,
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read[67:3] } ;
  always@(MUX_flitToSink_1_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_0$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_4:
	  MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1 = ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_5:
	  MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1 = ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_6:
	  MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1 = ifcs_2_1_rspBack$D_OUT;
      default: MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1 =
		   72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_0$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_0$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_0$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_0$wset_1__SEL_1 || MUX_flitToSink_1_0$wset_1__SEL_4:
	  MUX_ifcs_0_snk_putWire$wset_1__VAL_1 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_2 || MUX_flitToSink_1_0$wset_1__SEL_5:
	  MUX_ifcs_0_snk_putWire$wset_1__VAL_1 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_3 || MUX_flitToSink_1_0$wset_1__SEL_6:
	  MUX_ifcs_0_snk_putWire$wset_1__VAL_1 = ifcs_2_rspBack$D_OUT;
      default: MUX_ifcs_0_snk_putWire$wset_1__VAL_1 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_1_1$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_4:
	  MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1 = ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_5:
	  MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1 = ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_6:
	  MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1 = ifcs_2_1_rspBack$D_OUT;
      default: MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1 =
		   72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1$wset_1__SEL_1 || MUX_flitToSink_1_1$wset_1__SEL_4:
	  MUX_ifcs_1_snk_putWire$wset_1__VAL_1 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_2 || MUX_flitToSink_1_1$wset_1__SEL_5:
	  MUX_ifcs_1_snk_putWire$wset_1__VAL_1 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_3 || MUX_flitToSink_1_1$wset_1__SEL_6:
	  MUX_ifcs_1_snk_putWire$wset_1__VAL_1 = ifcs_2_rspBack$D_OUT;
      default: MUX_ifcs_1_snk_putWire$wset_1__VAL_1 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign MUX_merged_0_flitLeft$write_1__VAL_2 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_2 = merged_1_flitLeft - 8'd1 ;
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;

  // inlined wires
  assign merged_0_outflit$wget =
	     { 1'd0, merged_0_awff$D_OUT, merged_0_wff$D_OUT } ;
  assign merged_1_outflit$wget =
	     { 1'd0, merged_1_awff$D_OUT, merged_1_wff$D_OUT } ;
  assign split_0_doPut$wget =
	     (MUX_flitToSink_0$wset_1__SEL_1 ||
	      MUX_flitToSink_0$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_1_doPut$wget =
	     (MUX_flitToSink_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_2_doPut$wget =
	     (MUX_flitToSink_2$wset_1__SEL_1 ||
	      MUX_flitToSink_2$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign ifcs_0_snk_putWire$wget =
	     WILL_FIRE_RL_sinks_1_0_doPut ?
	       MUX_ifcs_0_snk_putWire$wset_1__VAL_1 :
	       ifcs_0_noRouteRsp$D_OUT ;
  assign ifcs_0_snk_putWire$whas =
	     WILL_FIRE_RL_sinks_1_0_doPut ||
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_1_snk_putWire$wget =
	     WILL_FIRE_RL_sinks_1_1_doPut ?
	       MUX_ifcs_1_snk_putWire$wset_1__VAL_1 :
	       ifcs_1_noRouteRsp$D_OUT ;
  assign ifcs_1_snk_putWire$whas =
	     WILL_FIRE_RL_sinks_1_1_doPut ||
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign reqWires_0$wget =
	     (!ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794) ?
	       IF_NOT_ifcs_0_innerRoute_first__26_BIT_1_35_36_ETC___d848 :
	       ifcs_0_innerRoute$D_OUT[0] ;
  assign reqWires_1$wget =
	     (!ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794) ?
	       IF_NOT_ifcs_1_innerRoute_first__55_BIT_1_59_60_ETC___d864 :
	       ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_0$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[1] ;
  assign flitToSink_2$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_0$wget =
	     (!ifcs_0_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
	       ifcs_0_routeBack$D_OUT[1] && debug_module$master_b_canPut :
	       ifcs_0_routeBack$D_OUT[0] ;
  assign reqWires_1_1$wget =
	     (!ifcs_1_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
	       ifcs_1_routeBack$D_OUT[1] && debug_module$master_b_canPut :
	       ifcs_1_routeBack$D_OUT[0] ;
  assign reqWires_1_2$wget =
	     (!ifcs_2_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
	       ifcs_2_routeBack$D_OUT[1] && debug_module$master_b_canPut :
	       ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_0$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_1$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign ifcs_0_1_snk_putWire$wget =
	     WILL_FIRE_RL_sinks_1_1_0_doPut ?
	       MUX_ifcs_0_1_snk_putWire$wset_1__VAL_1 :
	       ifcs_0_1_noRouteRsp$D_OUT ;
  assign ifcs_0_1_snk_putWire$whas =
	     WILL_FIRE_RL_sinks_1_1_0_doPut ||
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_1_1_snk_putWire$wget =
	     WILL_FIRE_RL_sinks_1_1_1_doPut ?
	       MUX_ifcs_1_1_snk_putWire$wset_1__VAL_1 :
	       ifcs_1_1_noRouteRsp$D_OUT ;
  assign ifcs_1_1_snk_putWire$whas =
	     WILL_FIRE_RL_sinks_1_1_1_doPut ||
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign sinks_1_0_putWire_1$wget =
	     (MUX_flitToSink_1_0_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_0_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign sinks_1_1_putWire_1$wget =
	     (MUX_flitToSink_1_1_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_1_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign sinks_1_2_putWire$wget =
	     (MUX_flitToSink_1_2$wset_1__SEL_1 ||
	      MUX_flitToSink_1_2$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign reqWires_1_0_1$wget =
	     (!ifcs_0_1_innerRoute$D_OUT[0] ||
	      !(!axi4_dmem_shim_tmp_shimSlave_arff_rv[98])) ?
	       IF_NOT_ifcs_0_1_innerRoute_first__500_BIT_1_50_ETC___d1522 :
	       ifcs_0_1_innerRoute$D_OUT[0] ;
  assign reqWires_1_1_1$wget =
	     (!ifcs_1_1_innerRoute$D_OUT[0] ||
	      !(!axi4_dmem_shim_tmp_shimSlave_arff_rv[98])) ?
	       IF_NOT_ifcs_1_1_innerRoute_first__529_BIT_1_53_ETC___d1538 :
	       ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_0_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_1_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[1] ;
  assign flitToSink_1_2$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_1_0$wget =
	     (!ifcs_0_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
	       ifcs_0_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
	       ifcs_0_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_1_1$wget =
	     (!ifcs_1_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
	       ifcs_1_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
	       ifcs_1_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$wget =
	     (!ifcs_2_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
	       ifcs_2_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
	       ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_0$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_1_1$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign sourceSelect_1_0$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1114 ;
  assign sourceSelect_1_1$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1120 ;
  assign sourceSelect_1_2$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1126 ;
  assign sourceSelect_1_0_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1574 ;
  assign sourceSelect_1_1_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1578 ;
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$port0__write_1 =
	     { 1'd1, split_0_doPut$wget[171:74] } ;
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$port1__read =
	     MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2 ?
	       axi4_dmem_shim_tmp_shimSlave_awff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_awff_rv ;
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$port2__read =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW ?
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_awff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_awff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1 =
	     MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 ?
	       MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 :
	       MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimSlave_wff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_wff_rv ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__write_1 =
	     { 1'd0,
	       74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$port2__read =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite ?
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_wff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse &&
	     axi4_dmem_shim_tmp_tagCon$cache_response_get[68:67] != 2'd0 ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$port0__write_1 =
	     { 1'd1,
	       (axi4_dmem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd1) ?
		 axi4_dmem_shim_tmp_tagCon$cache_response_get[75:71] :
		 5'd0,
	       2'd0 } ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_bff_rv ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port1__write =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__write_1 =
	     { 1'd0, 7'bxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$port2__read =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$EN_port1__write ?
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_bff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$port0__write_1 =
	     { 1'd1, sinks_1_0_putWire_1$wget } ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read =
	     CAN_FIRE_RL_sinks_1_0_doPut_1 ?
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_arff_rv ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1 =
	     { 1'd0,
	       98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$port2__read =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead ?
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_arff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse &&
	     axi4_dmem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd0 ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_dmem_shim_tmp_tagCon$cache_response_get[75:71],
	       axi4_dmem_shim_tmp_tagCon$cache_response_get[63:0],
	       2'd0,
	       axi4_dmem_shim_tmp_tagCon$cache_response_get[66],
	       axi4_dmem_shim_tmp_tagCon$cache_response_get[64] } ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimSlave_rff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_rff_rv ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$port2__read =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$EN_port1__write ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimSlave_rff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest &&
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	     !axi4_dmem_shim_tmp_doneSendingAW ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[100:95],
	       aw_awaddr__h10218,
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[7:0],
	       aw_awsize_val__h11957,
	       3'd2,
	       x__h13623,
	       11'd0 } ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimMaster_awff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_awff_rv ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$port2__read =
	     EN_cpu_dmem_master_aw_drop ?
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_awff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_awff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest &&
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[71:8],
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[88:81],
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[91] } ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimMaster_wff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_wff_rv ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$port2__read =
	     EN_cpu_dmem_master_w_drop ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_wff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_wff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$port0__write_1 =
	     { 1'd1, cpu_dmem_master_b_put_val } ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__read =
	     EN_cpu_dmem_master_b_put ?
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_bff_rv ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__write_1 =
	     { 1'd0, 8'bxxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$port2__read =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite ?
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_bff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest &&
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1 ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$port0__write_1 =
	     { 1'd1,
	       v_arid__h14966,
	       v_araddr__h14967,
	       v_arlen__h14968,
	       v_arsize_val__h15013,
	       3'd2,
	       x__h15031,
	       11'd0 } ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$EN_port0__write ?
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_arff_rv ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1 =
	     { 1'd0,
	       99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$port2__read =
	     EN_cpu_dmem_master_ar_drop ?
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_arff_rv$port2__read ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$port0__write_1 =
	     { 1'd1, cpu_dmem_master_r_put_val } ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read =
	     EN_cpu_dmem_master_r_put ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port0__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_rff_rv ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 =
	     { 1'd0,
	       73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$port2__read =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__read ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$port3__read =
	     (!axi4_dmem_shim_tmp_reset_done) ?
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_dmem_shim_tmp_shimMaster_rff_rv$port2__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     CAN_FIRE_RL_merged_0_passFlit &&
	     !merged_0_outflit$wget[171] ;
  assign ifcs_0_noRoute_inner_currentReq$port1__read =
	     ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       merged_0_outflit$wget[170:74] :
	       ifcs_0_noRoute_inner_currentReq ;
  assign ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     CAN_FIRE_RL_merged_0_passFlit &&
	     !merged_0_outflit$wget[171] ;
  assign ifcs_0_noRoute_inner_pendingReq$port1__read =
	     ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_0_noRoute_inner_pendingReq ;
  assign ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     CAN_FIRE_RL_merged_1_passFlit &&
	     !merged_1_outflit$wget[171] ;
  assign ifcs_1_noRoute_inner_currentReq$port1__read =
	     ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       merged_1_outflit$wget[170:74] :
	       ifcs_1_noRoute_inner_currentReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     CAN_FIRE_RL_merged_1_passFlit &&
	     !merged_1_outflit$wget[171] ;
  assign ifcs_1_noRoute_inner_pendingReq$port1__read =
	     ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_1_noRoute_inner_pendingReq ;
  assign ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       cpu$dmem_master_ar_peek :
	       ifcs_0_1_noRoute_currentReq ;
  assign ifcs_0_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, cpu$dmem_master_ar_peek[28:21] } + 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h64181 - 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ?
	       ifcs_0_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h64181 ;
  assign ifcs_1_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       debug_module$master_ar_peek :
	       ifcs_1_1_noRoute_currentReq ;
  assign ifcs_1_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, debug_module$master_ar_peek[28:21] } + 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h66726 - 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ?
	       ifcs_1_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h66726 ;

  // register activeSource_0
  assign activeSource_0$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_0$write_1__VAL_1 :
	       MUX_activeSource_0$write_1__VAL_1 ;
  assign activeSource_0$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register activeSource_1
  assign activeSource_1$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_1$write_1__VAL_1 :
	       MUX_activeSource_1$write_1__VAL_1 ;
  assign activeSource_1$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register activeSource_1_0
  assign activeSource_1_0$D_IN = 1'b0 ;
  assign activeSource_1_0$EN = 1'b0 ;

  // register activeSource_1_0_1
  assign activeSource_1_0_1$D_IN = 1'b0 ;
  assign activeSource_1_0_1$EN = 1'b0 ;

  // register activeSource_1_1
  assign activeSource_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1$EN = 1'b0 ;

  // register activeSource_1_1_0
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_0$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      default: activeSource_1_1_0$D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_0$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_1_1
  assign activeSource_1_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1_1$EN = 1'b0 ;

  // register activeSource_1_1_1_1
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_1_1$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      default: activeSource_1_1_1_1$D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_1_1$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_1_2
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_2$write_1__VAL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_2;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_2;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_2;
      default: activeSource_1_1_2$D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_2$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_2
  assign activeSource_1_2$D_IN = 1'b0 ;
  assign activeSource_1_2$EN = 1'b0 ;

  // register arbiter_1_1_firstHot
  assign arbiter_1_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1790 ;
  assign arbiter_1_1_firstHot$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect
  assign arbiter_1_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1778 ;
  assign arbiter_1_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_1
  assign arbiter_1_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1784 ;
  assign arbiter_1_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1126 ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1578 ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1114 ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1120 ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1574 ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN =
	     IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d904 ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN =
	     IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d900 ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register axi4_dmem_shim_tmp_addrOffset
  assign axi4_dmem_shim_tmp_addrOffset$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[1] ?
	       64'd0 :
	       x__h7627 ;
  assign axi4_dmem_shim_tmp_addrOffset$EN =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite ;

  // register axi4_dmem_shim_tmp_doneSendingAW
  assign axi4_dmem_shim_tmp_doneSendingAW$D_IN =
	     !axi4_dmem_shim_tmp_tagCon$memory_request_get[91] ;
  assign axi4_dmem_shim_tmp_doneSendingAW$EN =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest &&
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;

  // register axi4_dmem_shim_tmp_reset_done
  assign axi4_dmem_shim_tmp_reset_done$D_IN = 1'd1 ;
  assign axi4_dmem_shim_tmp_reset_done$EN =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_propagateReset ;

  // register axi4_dmem_shim_tmp_shimMaster_arff_rv
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimMaster_arff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimMaster_arff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimMaster_awff_rv
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimMaster_awff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimMaster_awff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimMaster_bff_rv
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimMaster_bff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimMaster_bff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimMaster_rff_rv
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimMaster_rff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimMaster_rff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimMaster_wff_rv
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimMaster_wff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimMaster_wff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimSlave_arff_rv
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_arff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimSlave_arff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimSlave_awff_rv
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_awff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimSlave_awff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimSlave_bff_rv
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimSlave_bff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimSlave_rff_rv
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimSlave_rff_rv$EN = 1'b1 ;

  // register axi4_dmem_shim_tmp_shimSlave_wff_rv
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_wff_rv$port3__read ;
  assign axi4_dmem_shim_tmp_shimSlave_wff_rv$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_currentReq
  assign ifcs_0_1_noRoute_currentReq$D_IN =
	     ifcs_0_1_noRoute_currentReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_flitCount
  assign ifcs_0_1_noRoute_flitCount$D_IN =
	     ifcs_0_1_noRoute_flitCount$port2__read ;
  assign ifcs_0_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_0_1_state
  assign ifcs_0_1_state$D_IN = 2'd0 ;
  assign ifcs_0_1_state$EN =
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ;

  // register ifcs_0_1_state_1
  assign ifcs_0_1_state_1$D_IN = !MUX_ifcs_0_1_state_1$write_1__SEL_1 ;
  assign ifcs_0_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[1] ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[1] ;

  // register ifcs_0_noRoute_inner_currentReq
  assign ifcs_0_noRoute_inner_currentReq$D_IN =
	     ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_0_noRoute_inner_pendingReq
  assign ifcs_0_noRoute_inner_pendingReq$D_IN =
	     ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_0_state
  always@(MUX_ifcs_0_state$write_1__SEL_1 or
	  MUX_ifcs_0_state$write_1__SEL_2 or MUX_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_0_state$write_1__SEL_1: ifcs_0_state$D_IN = 2'd1;
      MUX_ifcs_0_state$write_1__SEL_2: ifcs_0_state$D_IN = 2'd2;
      MUX_ifcs_0_state$write_1__SEL_3: ifcs_0_state$D_IN = 2'd0;
      default: ifcs_0_state$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ifcs_0_state$EN =
	     WILL_FIRE_RL_ifcs_0_firstFlit &&
	     IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603 ||
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603 ||
	     (WILL_FIRE_RL_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_ifcs_0_followFlits) &&
	     IF_merged_0_outflit_whas__49_THEN_merged_0_out_ETC___d608 ;

  // register ifcs_0_state_1
  assign ifcs_0_state_1$D_IN = 1'd0 ;
  assign ifcs_0_state_1$EN = CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // register ifcs_1_1_noRoute_currentReq
  assign ifcs_1_1_noRoute_currentReq$D_IN =
	     ifcs_1_1_noRoute_currentReq$port1__read ;
  assign ifcs_1_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_1_1_noRoute_flitCount
  assign ifcs_1_1_noRoute_flitCount$D_IN =
	     ifcs_1_1_noRoute_flitCount$port2__read ;
  assign ifcs_1_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_1_1_state
  assign ifcs_1_1_state$D_IN = 2'd0 ;
  assign ifcs_1_1_state$EN =
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ;

  // register ifcs_1_1_state_1
  assign ifcs_1_1_state_1$D_IN = !MUX_ifcs_1_1_state_1$write_1__SEL_1 ;
  assign ifcs_1_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_r_peek[0] ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	     !near_mem_io$axi4_slave_r_peek[0] ;

  // register ifcs_1_noRoute_inner_currentReq
  assign ifcs_1_noRoute_inner_currentReq$D_IN =
	     ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_1_noRoute_inner_pendingReq
  assign ifcs_1_noRoute_inner_pendingReq$D_IN =
	     ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_1_state
  always@(MUX_ifcs_1_state$write_1__SEL_1 or
	  MUX_ifcs_1_state$write_1__SEL_2 or MUX_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_1_state$write_1__SEL_1: ifcs_1_state$D_IN = 2'd1;
      MUX_ifcs_1_state$write_1__SEL_2: ifcs_1_state$D_IN = 2'd2;
      MUX_ifcs_1_state$write_1__SEL_3: ifcs_1_state$D_IN = 2'd0;
      default: ifcs_1_state$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ifcs_1_state$EN =
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703 ||
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703 ||
	     (WILL_FIRE_RL_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_ifcs_1_followFlits) &&
	     IF_merged_1_outflit_whas__49_THEN_merged_1_out_ETC___d708 ;

  // register ifcs_1_state_1
  assign ifcs_1_state_1$D_IN = 1'd0 ;
  assign ifcs_1_state_1$EN = CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // register ifcs_2_1_state
  assign ifcs_2_1_state$D_IN = !MUX_ifcs_2_1_state$write_1__SEL_1 ;
  assign ifcs_2_1_state$EN =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_r_peek[0] ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit && !plic$axi4_slave_r_peek[0] ;

  // register ifcs_2_state
  assign ifcs_2_state$D_IN = 1'd0 ;
  assign ifcs_2_state$EN = CAN_FIRE_RL_ifcs_2_followFlits ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genFirst ?
	       merged_0_awff$D_OUT[28:21] :
	       MUX_merged_0_flitLeft$write_1__VAL_2 ;
  assign merged_0_flitLeft$EN =
	     WILL_FIRE_RL_merged_0_genFirst ||
	     WILL_FIRE_RL_merged_0_genOther ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genFirst ?
	       merged_1_awff$D_OUT[28:21] :
	       MUX_merged_1_flitLeft$write_1__VAL_2 ;
  assign merged_1_flitLeft$EN =
	     WILL_FIRE_RL_merged_1_genFirst ||
	     WILL_FIRE_RL_merged_1_genOther ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_axi4_dmem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[102:95] ;
  assign split_0_flitLeft$EN =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_near_mem_io$axi4_slave_w_put_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[102:95] ;
  assign split_1_flitLeft$EN =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_plic$axi4_slave_w_put_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[102:95] ;
  assign split_2_flitLeft$EN =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;

  // register state
  assign state$D_IN = !MUX_state$write_1__SEL_1 && !MUX_state$write_1__SEL_2 ;
  assign state$EN =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register state_1
  assign state_1$D_IN = 1'd0 ;
  assign state_1$EN =
	     WILL_FIRE_RL_burst_4 || WILL_FIRE_RL_burst_3 ||
	     WILL_FIRE_RL_burst_2 ;

  // register state_1_1
  assign state_1_1$D_IN = 1'd0 ;
  assign state_1_1$EN = WILL_FIRE_RL_burst_6 || WILL_FIRE_RL_burst_5 ;

  // register state_1_1_1
  assign state_1_1_1$D_IN =
	     !MUX_state_1_1_1$write_1__SEL_1 &&
	     !MUX_state_1_1_1$write_1__SEL_2 &&
	     !MUX_state_1_1_1$write_1__SEL_3 ;
  assign state_1_1_1$EN =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // submodule axi4_dmem_shim_tmp_awreqff
  assign axi4_dmem_shim_tmp_awreqff$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_awff_rv$port1__read[97:0] ;
  assign axi4_dmem_shim_tmp_awreqff$ENQ =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_getCacheAW ;
  assign axi4_dmem_shim_tmp_awreqff$DEQ =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite &&
	     axi4_dmem_shim_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign axi4_dmem_shim_tmp_awreqff$CLR = 1'b0 ;

  // submodule axi4_dmem_shim_tmp_newRst
  assign axi4_dmem_shim_tmp_newRst$ASSERT_IN =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_propagateReset ;

  // submodule axi4_dmem_shim_tmp_tagCon
  assign axi4_dmem_shim_tmp_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite ?
	       MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_1 :
	       MUX_axi4_dmem_shim_tmp_tagCon$cache_request_put_1__VAL_2 ;
  assign axi4_dmem_shim_tmp_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite ?
	       MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_1 :
	       MUX_axi4_dmem_shim_tmp_tagCon$memory_response_put_1__VAL_2 ;
  assign axi4_dmem_shim_tmp_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheWrite ||
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passCacheRead ;
  assign axi4_dmem_shim_tmp_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passCacheResponse ;
  assign axi4_dmem_shim_tmp_tagCon$EN_memory_request_get =
	     CAN_FIRE_RL_axi4_dmem_shim_tmp_passMemoryRequest ;
  assign axi4_dmem_shim_tmp_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseWrite ||
	     WILL_FIRE_RL_axi4_dmem_shim_tmp_passMemoryResponseRead ;

  // submodule cpu
  assign cpu$dmem_master_b_put_val = ifcs_0_snk_putWire$wget ;
  assign cpu$dmem_master_r_put_val = ifcs_0_1_snk_putWire$wget ;
  assign cpu$hart0_csr_mem_server_request_put =
	     debug_module$hart0_csr_mem_client_request_get ;
  assign cpu$hart0_fpr_mem_server_request_put =
	     debug_module$hart0_fpr_mem_client_request_get ;
  assign cpu$hart0_gpr_mem_server_request_put =
	     debug_module$hart0_gpr_mem_client_request_get ;
  assign cpu$hart0_put_other_req_put = debug_module$hart0_get_other_req_get ;
  assign cpu$hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ?
	       f_reset_reqs$D_OUT :
	       debug_module$hart0_reset_client_request_get ;
  assign cpu$hart0_server_run_halt_request_put =
	     debug_module$hart0_client_run_halt_request_get ;
  assign cpu$imem_master_b_put_val = delay_shim_bff$D_OUT ;
  assign cpu$imem_master_r_put_val = delay_shim_rff$D_OUT ;
  assign cpu$m_external_interrupt_req_set_not_clear = plic$v_targets_0_m_eip ;
  assign cpu$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign cpu$s_external_interrupt_req_set_not_clear = plic$v_targets_1_m_eip ;
  assign cpu$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$software_interrupt_req_set_not_clear =
	     near_mem_io$get_sw_interrupt_req_get ;
  assign cpu$timer_interrupt_req_set_not_clear =
	     near_mem_io$get_timer_interrupt_req_get ;
  assign cpu$EN_hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign cpu$EN_hart0_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$EN_imem_master_aw_drop = CAN_FIRE_RL_ug_src_doDrop ;
  assign cpu$EN_imem_master_w_drop = CAN_FIRE_RL_ug_src_1_doDrop ;
  assign cpu$EN_imem_master_b_put = CAN_FIRE_RL_ug_snk_2_doPut ;
  assign cpu$EN_imem_master_ar_drop = CAN_FIRE_RL_ug_src_3_doDrop ;
  assign cpu$EN_imem_master_r_put = CAN_FIRE_RL_ug_snk_4_doPut ;
  assign cpu$EN_dmem_master_aw_drop = CAN_FIRE_RL_merged_0_awFlit ;
  assign cpu$EN_dmem_master_w_drop = CAN_FIRE_RL_merged_0_wFlit ;
  assign cpu$EN_dmem_master_b_put = CAN_FIRE_RL_ifcs_0_snk_doPut ;
  assign cpu$EN_dmem_master_ar_drop =
	     WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp &&
	     x_port1__read__h64181 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign cpu$EN_dmem_master_r_put = CAN_FIRE_RL_ifcs_0_1_snk_doPut ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_hart0_server_run_halt_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign cpu$EN_hart0_server_run_halt_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign cpu$EN_hart0_put_other_req_put =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign cpu$EN_hart0_gpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign cpu$EN_hart0_gpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign cpu$EN_hart0_fpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign cpu$EN_hart0_fpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign cpu$EN_hart0_csr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign cpu$EN_hart0_csr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = dm_dmi_read_addr_dm_addr ;
  assign debug_module$dmi_write_dm_addr = dm_dmi_write_dm_addr ;
  assign debug_module$dmi_write_dm_word = dm_dmi_write_dm_word ;
  assign debug_module$hart0_client_run_halt_response_put =
	     cpu$hart0_server_run_halt_response_get ;
  assign debug_module$hart0_csr_mem_client_response_put =
	     cpu$hart0_csr_mem_server_response_get ;
  assign debug_module$hart0_fpr_mem_client_response_put =
	     cpu$hart0_fpr_mem_server_response_get ;
  assign debug_module$hart0_gpr_mem_client_response_put =
	     cpu$hart0_gpr_mem_server_response_get ;
  assign debug_module$hart0_reset_client_response_put =
	     cpu$hart0_server_reset_response_get ;
  assign debug_module$master_b_put_val = ifcs_1_snk_putWire$wget ;
  assign debug_module$master_r_put_val = ifcs_1_1_snk_putWire$wget ;
  assign debug_module$ndm_reset_client_response_put =
	     ndm_reset_client_response_put ;
  assign debug_module$EN_dmi_read_addr = EN_dm_dmi_read_addr ;
  assign debug_module$EN_dmi_read_data = EN_dm_dmi_read_data ;
  assign debug_module$EN_dmi_write = EN_dm_dmi_write ;
  assign debug_module$EN_hart0_reset_client_request_get =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign debug_module$EN_hart0_reset_client_response_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     !f_reset_requestor$D_OUT ;
  assign debug_module$EN_hart0_client_run_halt_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign debug_module$EN_hart0_client_run_halt_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign debug_module$EN_hart0_get_other_req_get =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign debug_module$EN_hart0_gpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign debug_module$EN_hart0_gpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign debug_module$EN_hart0_fpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign debug_module$EN_hart0_fpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign debug_module$EN_hart0_csr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign debug_module$EN_hart0_csr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;
  assign debug_module$EN_master_aw_drop = CAN_FIRE_RL_merged_1_awFlit ;
  assign debug_module$EN_master_w_drop = CAN_FIRE_RL_merged_1_wFlit ;
  assign debug_module$EN_master_b_put = CAN_FIRE_RL_ifcs_1_snk_doPut ;
  assign debug_module$EN_master_ar_drop =
	     WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp &&
	     x_port1__read__h66726 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign debug_module$EN_master_r_put = CAN_FIRE_RL_ifcs_1_1_snk_doPut ;

  // submodule delay_shim_arff
  assign delay_shim_arff$D_IN = cpu$imem_master_ar_peek ;
  assign delay_shim_arff$ENQ = CAN_FIRE_RL_ug_snk_3_doPut ;
  assign delay_shim_arff$DEQ = EN_cpu_imem_master_ar_drop ;
  assign delay_shim_arff$CLR = 1'b0 ;

  // submodule delay_shim_awff
  assign delay_shim_awff$D_IN = cpu$imem_master_aw_peek ;
  assign delay_shim_awff$ENQ = CAN_FIRE_RL_ug_snk_doPut ;
  assign delay_shim_awff$DEQ = EN_cpu_imem_master_aw_drop ;
  assign delay_shim_awff$CLR = 1'b0 ;

  // submodule delay_shim_bff
  assign delay_shim_bff$D_IN = cpu_imem_master_b_put_val ;
  assign delay_shim_bff$ENQ = EN_cpu_imem_master_b_put ;
  assign delay_shim_bff$DEQ = CAN_FIRE_RL_ug_src_2_doDrop ;
  assign delay_shim_bff$CLR = 1'b0 ;

  // submodule delay_shim_rff
  assign delay_shim_rff$D_IN = { cpu_imem_master_r_put_val, 1'd0 } ;
  assign delay_shim_rff$ENQ = EN_cpu_imem_master_r_put ;
  assign delay_shim_rff$DEQ = CAN_FIRE_RL_ug_src_4_doDrop ;
  assign delay_shim_rff$CLR = 1'b0 ;

  // submodule delay_shim_wff
  assign delay_shim_wff$D_IN = cpu$imem_master_w_peek ;
  assign delay_shim_wff$ENQ = CAN_FIRE_RL_ug_snk_1_doPut ;
  assign delay_shim_wff$DEQ = EN_cpu_imem_master_w_drop ;
  assign delay_shim_wff$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__89_AND_cpu__ETC___d295 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN =
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign f_reset_requestor$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart0_server_reset_response_get ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerReq
  assign ifcs_0_1_innerReq$D_IN = { 1'd0, cpu$dmem_master_ar_peek } ;
  assign ifcs_0_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerRoute
  assign ifcs_0_1_innerRoute$D_IN =
	     { cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1276,
	       cpu$dmem_master_ar_peek[92:69] == 24'd0 &&
	       !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255 &&
	       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257,
	       cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1266 } ;
  assign ifcs_0_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_1_noRouteRsp
  assign ifcs_0_1_noRouteRsp$D_IN =
	     { ifcs_0_1_noRoute_currentReq$port1__read[96:93],
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       2'd3,
	       x_port1__read__h64181 == 9'd1,
	       1'bx /* unspecified value */  } ;
  assign ifcs_0_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;
  assign ifcs_0_1_noRouteRsp$DEQ =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_0_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_1_routeBack
  assign ifcs_0_1_routeBack$D_IN =
	     2'd1 << axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[72] ;
  assign ifcs_0_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_rspBack$D_OUT[1] ;
  assign ifcs_0_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_1_rspBack
  assign ifcs_0_1_rspBack$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_rff_rv$port1__read[71:0] ;
  assign ifcs_0_1_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_0_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_0_innerReq
  assign ifcs_0_innerReq$D_IN =
	     { !CAN_FIRE_RL_merged_0_passFlit || merged_0_outflit$wget[171],
	       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d598 } ;
  assign ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst ;
  assign ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_innerRoute
  assign ifcs_0_innerRoute$D_IN =
	     { IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d585,
	       merged_0_outflitwget_BITS_166_TO_103__q1[63:40] == 24'd0 &&
	       !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564 &&
	       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566,
	       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d575 } ;
  assign ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerReq$D_OUT[1] ;
  assign ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_noRouteRsp
  assign ifcs_0_noRouteRsp$D_IN =
	     { ifcs_0_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_0_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;
  assign ifcs_0_noRouteRsp$DEQ = WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_routeBack
  assign ifcs_0_routeBack$D_IN =
	     2'd1 << axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read[6] ;
  assign ifcs_0_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_rspBack
  assign ifcs_0_rspBack$D_IN =
	     axi4_dmem_shim_tmp_shimSlave_bff_rv$port1__read[5:0] ;
  assign ifcs_0_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerReq
  assign ifcs_1_1_innerReq$D_IN = { 1'd1, debug_module$master_ar_peek } ;
  assign ifcs_1_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerRoute
  assign ifcs_1_1_innerRoute$D_IN =
	     { debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1365,
	       debug_module$master_ar_peek[92:69] == 24'd0 &&
	       !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344 &&
	       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346,
	       debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1355 } ;
  assign ifcs_1_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_1_noRouteRsp
  assign ifcs_1_1_noRouteRsp$D_IN =
	     { ifcs_1_1_noRoute_currentReq$port1__read[96:93],
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       2'd3,
	       x_port1__read__h66726 == 9'd1,
	       1'bx /* unspecified value */  } ;
  assign ifcs_1_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;
  assign ifcs_1_1_noRouteRsp$DEQ =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign ifcs_1_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_1_routeBack
  assign ifcs_1_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_r_peek[71] ;
  assign ifcs_1_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_rspBack$D_OUT[1] ;
  assign ifcs_1_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_rspBack
  assign ifcs_1_1_rspBack$D_IN =
	     { near_mem_io$axi4_slave_r_peek[70:0], 1'd0 } ;
  assign ifcs_1_1_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_8 ;
  assign ifcs_1_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_innerReq
  assign ifcs_1_innerReq$D_IN =
	     { !CAN_FIRE_RL_merged_1_passFlit || merged_1_outflit$wget[171],
	       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d698 } ;
  assign ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_1 ;
  assign ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_innerRoute
  assign ifcs_1_innerRoute$D_IN =
	     { IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d685,
	       merged_1_outflitwget_BITS_166_TO_103__q2[63:40] == 24'd0 &&
	       !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664 &&
	       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666,
	       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d675 } ;
  assign ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerReq$D_OUT[1] ;
  assign ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_noRouteRsp
  assign ifcs_1_noRouteRsp$D_IN =
	     { ifcs_1_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;
  assign ifcs_1_noRouteRsp$DEQ = WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_routeBack
  assign ifcs_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_b_peek[6] ;
  assign ifcs_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_rspBack
  assign ifcs_1_rspBack$D_IN = near_mem_io$axi4_slave_b_peek[5:0] ;
  assign ifcs_1_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_routeBack
  assign ifcs_2_1_routeBack$D_IN = 2'd1 << plic$axi4_slave_r_peek[71] ;
  assign ifcs_2_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_rspBack$D_OUT[1] ;
  assign ifcs_2_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_rspBack
  assign ifcs_2_1_rspBack$D_IN = { plic$axi4_slave_r_peek[70:0], 1'd0 } ;
  assign ifcs_2_1_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_9 ;
  assign ifcs_2_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_routeBack
  assign ifcs_2_routeBack$D_IN = 2'd1 << plic$axi4_slave_b_peek[6] ;
  assign ifcs_2_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_rspBack
  assign ifcs_2_rspBack$D_IN = plic$axi4_slave_b_peek[5:0] ;
  assign ifcs_2_rspBack$ENQ =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule merged_0_awff
  assign merged_0_awff$D_IN = cpu$dmem_master_aw_peek ;
  assign merged_0_awff$ENQ = CAN_FIRE_RL_merged_0_awFlit ;
  assign merged_0_awff$DEQ = CAN_FIRE_RL_merged_0_genFirst ;
  assign merged_0_awff$CLR = 1'b0 ;

  // submodule merged_0_wff
  assign merged_0_wff$D_IN = cpu$dmem_master_w_peek ;
  assign merged_0_wff$ENQ = CAN_FIRE_RL_merged_0_wFlit ;
  assign merged_0_wff$DEQ =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign merged_0_wff$CLR = 1'b0 ;

  // submodule merged_1_awff
  assign merged_1_awff$D_IN = debug_module$master_aw_peek ;
  assign merged_1_awff$ENQ = CAN_FIRE_RL_merged_1_awFlit ;
  assign merged_1_awff$DEQ = CAN_FIRE_RL_merged_1_genFirst ;
  assign merged_1_awff$CLR = 1'b0 ;

  // submodule merged_1_wff
  assign merged_1_wff$D_IN = debug_module$master_w_peek ;
  assign merged_1_wff$ENQ = CAN_FIRE_RL_merged_1_wFlit ;
  assign merged_1_wff$DEQ =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign merged_1_wff$CLR = 1'b0 ;

  // submodule near_mem_io
  assign near_mem_io$axi4_slave_ar_put_val = sinks_1_1_putWire_1$wget ;
  assign near_mem_io$axi4_slave_aw_put_val = split_1_doPut$wget[171:74] ;
  assign near_mem_io$axi4_slave_w_put_val = split_1_doPut$wget[73:1] ;
  assign near_mem_io$set_addr_map_addr_base =
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign near_mem_io$set_addr_map_addr_lim =
	     soc_map$m_near_mem_io_addr_range[127:64] +
	     soc_map$m_near_mem_io_addr_range[63:0] ;
  assign near_mem_io$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign near_mem_io$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_set_addr_map =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_axi4_slave_aw_put =
	     MUX_near_mem_io$axi4_slave_w_put_1__SEL_2 ;
  assign near_mem_io$EN_axi4_slave_w_put =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign near_mem_io$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign near_mem_io$EN_axi4_slave_ar_put = CAN_FIRE_RL_sinks_1_1_doPut_1 ;
  assign near_mem_io$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign near_mem_io$EN_get_timer_interrupt_req_get =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign near_mem_io$EN_get_sw_interrupt_req_get =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // submodule plic
  assign plic$axi4_slave_ar_put_val = sinks_1_2_putWire$wget ;
  assign plic$axi4_slave_aw_put_val = split_2_doPut$wget[171:74] ;
  assign plic$axi4_slave_w_put_val = split_2_doPut$wget[73:1] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign plic$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_set_addr_map = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_axi4_slave_aw_put = MUX_plic$axi4_slave_w_put_1__SEL_2 ;
  assign plic$EN_axi4_slave_w_put =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign plic$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign plic$EN_axi4_slave_ar_put = CAN_FIRE_RL_sinks_1_2_doPut ;
  assign plic$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_merged_0_outflit_whas__49_AND_NOT_merged_ETC___d587 =
	     (IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d575 ?
		2'd1 :
		2'd0) +
	     ((merged_0_outflitwget_BITS_166_TO_103__q1[63:40] == 24'd0 &&
	       !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564 &&
	       IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566) ?
		2'd1 :
		2'd0) +
	     (IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d585 ?
		2'd1 :
		2'd0) ;
  assign IF_IF_merged_1_outflit_whas__49_AND_NOT_merged_ETC___d687 =
	     (IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d675 ?
		2'd1 :
		2'd0) +
	     ((merged_1_outflitwget_BITS_166_TO_103__q2[63:40] == 24'd0 &&
	       !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664 &&
	       IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666) ?
		2'd1 :
		2'd0) +
	     (IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d685 ?
		2'd1 :
		2'd0) ;
  assign IF_NOT_ifcs_0_1_innerRoute_first__500_BIT_1_50_ETC___d1522 =
	     (!ifcs_0_1_innerRoute$D_OUT[1] ||
	      !near_mem_io$axi4_slave_ar_canPut) ?
	       ifcs_0_1_innerRoute$D_OUT[2] && plic$axi4_slave_ar_canPut :
	       ifcs_0_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_0_innerRoute_first__26_BIT_1_35_36_ETC___d848 =
	     (!ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806) ?
	       ifcs_0_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818 :
	       ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_1_innerRoute_first__529_BIT_1_53_ETC___d1538 =
	     (!ifcs_1_1_innerRoute$D_OUT[1] ||
	      !near_mem_io$axi4_slave_ar_canPut) ?
	       ifcs_1_1_innerRoute$D_OUT[2] && plic$axi4_slave_ar_canPut :
	       ifcs_1_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_innerRoute_first__55_BIT_1_59_60_ETC___d864 =
	     (!ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806) ?
	       ifcs_1_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818 :
	       ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1778 =
	     (SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 ||
	      SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 ||
	      SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759) ?
	       x__h87683 | y__h87684 :
	       arbiter_1_1_lastSelect ;
  assign IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1784 =
	     (SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 ||
	      SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 ||
	      SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759) ?
	       x__h87871 | y__h87872 :
	       arbiter_1_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_7_ETC___d1790 =
	     (SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 ||
	      SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 ||
	      SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759) ?
	       x__h88052 | y__h88053 :
	       arbiter_1_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1114 =
	     (SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 ||
	      SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 ||
	      SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095) ?
	       x__h54556 | y__h54557 :
	       arbiter_1_lastSelect ;
  assign IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1120 =
	     (SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 ||
	      SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 ||
	      SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095) ?
	       x__h54744 | y__h54745 :
	       arbiter_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_ETC___d1126 =
	     (SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 ||
	      SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 ||
	      SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095) ?
	       x__h54925 | y__h54926 :
	       arbiter_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1574 =
	     (SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 ||
	      SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562) ?
	       x__h75234 | y__h75235 :
	       arbiter_1_lastSelect_2 ;
  assign IF_SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_5_ETC___d1578 =
	     (SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 ||
	      SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562) ?
	       x__h75375 | y__h75376 :
	       arbiter_1_firstHot_1 ;
  assign IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d900 =
	     (SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 ||
	      SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888) ?
	       x__h39608 | y__h39609 :
	       arbiter_lastSelect ;
  assign IF_SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND__ETC___d904 =
	     (SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 ||
	      SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888) ?
	       x__h39749 | y__h39750 :
	       arbiter_firstHot ;
  assign IF_cpu_dmem_master_ar_peek__251_BITS_92_TO_69__ETC___d1278 =
	     (cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1266 ?
		2'd1 :
		2'd0) +
	     ((cpu$dmem_master_ar_peek[92:69] == 24'd0 &&
	       !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255 &&
	       cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257) ?
		2'd1 :
		2'd0) +
	     (cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1276 ?
		2'd1 :
		2'd0) ;
  assign IF_debug_module_master_ar_peek__340_BITS_92_TO_ETC___d1367 =
	     (debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1355 ?
		2'd1 :
		2'd0) +
	     ((debug_module$master_ar_peek[92:69] == 24'd0 &&
	       !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344 &&
	       debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346) ?
		2'd1 :
		2'd0) +
	     (debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1365 ?
		2'd1 :
		2'd0) ;
  assign IF_merged_0_flitLeft_86_EQ_0_87_THEN_merged_0__ETC___d546 =
	     (merged_0_flitLeft == 8'd0) ?
	       merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N :
	       merged_0_wff$EMPTY_N ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564 =
	     merged_0_outflit$wget[166:103] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566 =
	     x__h25419 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d569 =
	     merged_0_outflit$wget[166:103] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d571 =
	     x__h25444 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d575 =
	     merged_0_outflitwget_BITS_166_TO_103__q1[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564 ||
	      !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566) &&
	     (IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d569 ||
	      !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d571) ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d585 =
	     merged_0_outflitwget_BITS_166_TO_103__q1[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d564 ||
	      !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d566) &&
	     !IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d569 &&
	     IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d571 ;
  assign IF_merged_0_outflit_whas__49_AND_NOT_merged_0__ETC___d598 =
	     (CAN_FIRE_RL_merged_0_passFlit && !merged_0_outflit$wget[171]) ?
	       { 1'd0, merged_0_outflit$wget[170:0] } :
	       { 98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 CAN_FIRE_RL_merged_0_passFlit ?
		   merged_0_outflit$wget[73:0] :
		   merged_0_wff$D_OUT } ;
  assign IF_merged_0_outflit_whas__49_THEN_NOT_merged_0_ETC___d603 =
	     CAN_FIRE_RL_merged_0_passFlit ?
	       !merged_0_outflit$wget[1] :
	       !merged_0_wff$D_OUT[1] ;
  assign IF_merged_0_outflit_whas__49_THEN_merged_0_out_ETC___d608 =
	     CAN_FIRE_RL_merged_0_passFlit ?
	       merged_0_outflit$wget[1] :
	       merged_0_wff$D_OUT[1] ;
  assign IF_merged_1_flitLeft_22_EQ_0_23_THEN_merged_1__ETC___d646 =
	     (merged_1_flitLeft == 8'd0) ?
	       merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N :
	       merged_1_wff$EMPTY_N ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664 =
	     merged_1_outflit$wget[166:103] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666 =
	     x__h28997 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d669 =
	     merged_1_outflit$wget[166:103] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d671 =
	     x__h29022 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d675 =
	     merged_1_outflitwget_BITS_166_TO_103__q2[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664 ||
	      !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666) &&
	     (IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d669 ||
	      !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d671) ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d685 =
	     merged_1_outflitwget_BITS_166_TO_103__q2[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d664 ||
	      !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d666) &&
	     !IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d669 &&
	     IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d671 ;
  assign IF_merged_1_outflit_whas__49_AND_NOT_merged_1__ETC___d698 =
	     (CAN_FIRE_RL_merged_1_passFlit && !merged_1_outflit$wget[171]) ?
	       { 1'd1, merged_1_outflit$wget[170:0] } :
	       { 98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 CAN_FIRE_RL_merged_1_passFlit ?
		   merged_1_outflit$wget[73:0] :
		   merged_1_wff$D_OUT } ;
  assign IF_merged_1_outflit_whas__49_THEN_NOT_merged_1_ETC___d703 =
	     CAN_FIRE_RL_merged_1_passFlit ?
	       !merged_1_outflit$wget[1] :
	       !merged_1_wff$D_OUT[1] ;
  assign IF_merged_1_outflit_whas__49_THEN_merged_1_out_ETC___d708 =
	     CAN_FIRE_RL_merged_1_passFlit ?
	       merged_1_outflit$wget[1] :
	       merged_1_wff$D_OUT[1] ;
  assign IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794 =
	     (split_0_flitLeft == 8'd0) ?
	       !axi4_dmem_shim_tmp_shimSlave_awff_rv[98] &&
	       !axi4_dmem_shim_tmp_shimSlave_wff_rv[74] :
	       !axi4_dmem_shim_tmp_shimSlave_wff_rv[74] ;
  assign IF_split_1_flitLeft_86_EQ_0_87_THEN_near_mem_i_ETC___d806 =
	     (split_1_flitLeft == 8'd0) ?
	       near_mem_io$axi4_slave_aw_canPut &&
	       near_mem_io$axi4_slave_w_canPut :
	       near_mem_io$axi4_slave_w_canPut ;
  assign IF_split_2_flitLeft_15_EQ_0_16_THEN_plic_axi4__ETC___d818 =
	     (split_2_flitLeft == 8'd0) ?
	       plic$axi4_slave_aw_canPut && plic$axi4_slave_w_canPut :
	       plic$axi4_slave_w_canPut ;
  assign SEXT_SEXT_arbiter_1_1_firstHot_743_744_BIT_0_7_ETC__q20 =
	     {2{SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_079_080_BIT_0_081_ETC__q10 =
	     {2{SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_554_555_BIT_0_5_ETC__q15 =
	     {2{SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562}} ;
  assign SEXT_SEXT_arbiter_firstHot_80_81_BIT_0_82_AND__ETC__q5 =
	     {2{SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888}} ;
  assign SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759 =
	     x__h87211 | y__h87212 ;
  assign SEXT_arbiter_1_1_firstHot__q17 = {2{arbiter_1_1_firstHot}} ;
  assign SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 =
	     x__h87075 | y__h87076 ;
  assign SEXT_arbiter_1_1_lastSelect_1__q19 = {2{arbiter_1_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 =
	     x__h86924 | y__h86925 ;
  assign SEXT_arbiter_1_1_lastSelect__q18 = {2{arbiter_1_1_lastSelect}} ;
  assign SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095 =
	     x__h54084 | y__h54085 ;
  assign SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562 =
	     x__h74869 | y__h74870 ;
  assign SEXT_arbiter_1_firstHot_1__q13 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot__q7 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 =
	     x__h53797 | y__h53798 ;
  assign SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 =
	     x__h53948 | y__h53949 ;
  assign SEXT_arbiter_1_lastSelect_1__q9 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 =
	     x__h74766 | y__h74767 ;
  assign SEXT_arbiter_1_lastSelect_2__q14 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect__q8 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888 =
	     x__h39243 | y__h39244 ;
  assign SEXT_arbiter_firstHot__q3 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 =
	     x__h39140 | y__h39141 ;
  assign SEXT_arbiter_lastSelect__q4 = {2{arbiter_lastSelect}} ;
  assign SEXT_x4618__q11 = {2{x__h54618}} ;
  assign SEXT_x4652__q12 = {2{x__h54652}} ;
  assign SEXT_x5293__q16 = {2{x__h75293}} ;
  assign SEXT_x7745__q21 = {2{x__h87745}} ;
  assign SEXT_x7779__q22 = {2{x__h87779}} ;
  assign SEXT_x9667__q6 = {2{x__h39667}} ;
  assign _0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233 =
	     x__h12027 + y__h12028 ;
  assign arcache__h14955 =
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[8] ? 4'd0 : 4'd15 ;
  assign arlen__h14951 =
	     { 5'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[5:3] } ;
  assign aw_awaddr__h10218 = tmp__h10001 + { 60'd0, x__h10293 } ;
  assign aw_awsize_val__h11957 =
	     _0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233[0] ?
	       3'd0 :
	       (_0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233[1] ?
		  3'd1 :
		  (_0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233[2] ?
		     3'd2 :
		     (_0_CONCAT_axi4_dmem_shim_tmp_tagCon_memory_requ_ETC___d233[3] ?
			3'd3 :
			3'd4))) ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255 =
	     cpu$dmem_master_ar_peek[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257 =
	     x__h63058 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1260 =
	     cpu$dmem_master_ar_peek[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1262 =
	     x__h63083 < soc_map$m_plic_addr_range[63:0] ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1266 =
	     cpu$dmem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255 ||
	      !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257) &&
	     (cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1260 ||
	      !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1262) ;
  assign cpu_dmem_master_ar_peek__251_BITS_92_TO_69_252_ETC___d1276 =
	     cpu$dmem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1255 ||
	      !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1257) &&
	     !cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1260 &&
	     cpu_dmem_master_ar_peek__251_BITS_92_TO_29_254_ETC___d1262 ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344 =
	     debug_module$master_ar_peek[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346 =
	     x__h65621 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1349 =
	     debug_module$master_ar_peek[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1351 =
	     x__h65646 < soc_map$m_plic_addr_range[63:0] ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1355 =
	     debug_module$master_ar_peek[92:69] == 24'd0 &&
	     (debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344 ||
	      !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346) &&
	     (debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1349 ||
	      !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1351) ;
  assign debug_module_master_ar_peek__340_BITS_92_TO_69_ETC___d1365 =
	     debug_module$master_ar_peek[92:69] == 24'd0 &&
	     (debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1344 ||
	      !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1346) &&
	     !debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1349 &&
	     debug_module_master_ar_peek__340_BITS_92_TO_29_ETC___d1351 ;
  assign merged_0_outflitwget_BITS_166_TO_103__q1 =
	     merged_0_outflit$wget[166:103] ;
  assign merged_1_outflitwget_BITS_166_TO_103__q2 =
	     merged_1_outflit$wget[166:103] ;
  assign plic_RDY_server_reset_request_put__89_AND_cpu__ETC___d295 =
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign reqWires_1_0_whas__056_AND_reqWires_1_0_wget___ETC___d1066 =
	     CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget ||
	     CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget ||
	     CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget ;
  assign reqWires_1_1_0_whas__720_AND_reqWires_1_1_0_wg_ETC___d1730 =
	     CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget ||
	     CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget ||
	     CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget ;
  assign split_0_doPut_whas__43_AND_split_0_doPut_wget__ETC___d454 =
	     CAN_FIRE_RL_sinks_0_doPut &&
	     (split_0_doPut$wget[172] ||
	      !axi4_dmem_shim_tmp_shimSlave_awff_rv[98] &&
	      !axi4_dmem_shim_tmp_shimSlave_wff_rv[74]) ;
  assign split_1_doPut_whas__78_AND_split_1_doPut_wget__ETC___d485 =
	     CAN_FIRE_RL_sinks_1_doPut &&
	     (split_1_doPut$wget[172] ||
	      near_mem_io$RDY_axi4_slave_w_put &&
	      near_mem_io$RDY_axi4_slave_aw_put) ;
  assign split_2_doPut_whas__07_AND_split_2_doPut_wget__ETC___d514 =
	     CAN_FIRE_RL_sinks_2_doPut &&
	     (split_2_doPut$wget[172] ||
	      plic$RDY_axi4_slave_w_put && plic$RDY_axi4_slave_aw_put) ;
  assign state_1_067_AND_activeSource_1_0_155_156_AND_i_ETC___d1158 =
	     state_1 && activeSource_1_0 && ifcs_0_routeBack$EMPTY_N &&
	     ((!ifcs_0_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
		ifcs_0_routeBack$D_OUT[1] && debug_module$master_b_canPut :
		ifcs_0_routeBack$D_OUT[0]) ;
  assign state_1_067_AND_activeSource_1_1_188_189_AND_i_ETC___d1191 =
	     state_1 && activeSource_1_1 && ifcs_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
		ifcs_1_routeBack$D_OUT[1] && debug_module$master_b_canPut :
		ifcs_1_routeBack$D_OUT[0]) ;
  assign state_1_067_AND_activeSource_1_2_222_223_AND_i_ETC___d1225 =
	     state_1 && activeSource_1_2 && ifcs_2_routeBack$EMPTY_N &&
	     ((!ifcs_2_routeBack$D_OUT[0] || !cpu$dmem_master_b_canPut) ?
		ifcs_2_routeBack$D_OUT[1] && debug_module$master_b_canPut :
		ifcs_2_routeBack$D_OUT[0]) ;
  assign state_1_1_1_731_AND_activeSource_1_1_0_825_826_ETC___d1828 =
	     state_1_1_1 && activeSource_1_1_0 &&
	     ifcs_0_1_routeBack$EMPTY_N &&
	     ((!ifcs_0_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
		ifcs_0_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
		ifcs_0_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_731_AND_activeSource_1_1_1_1_861_8_ETC___d1864 =
	     state_1_1_1 && activeSource_1_1_1_1 &&
	     ifcs_1_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
		ifcs_1_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
		ifcs_1_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_731_AND_activeSource_1_1_2_897_898_ETC___d1900 =
	     state_1_1_1 && activeSource_1_1_2 &&
	     ifcs_2_1_routeBack$EMPTY_N &&
	     ((!ifcs_2_1_routeBack$D_OUT[0] || !cpu$dmem_master_r_canPut) ?
		ifcs_2_1_routeBack$D_OUT[1] && debug_module$master_r_canPut :
		ifcs_2_1_routeBack$D_OUT[0]) ;
  assign state_1_1_547_AND_activeSource_1_0_1_614_615_A_ETC___d1617 =
	     state_1_1 && activeSource_1_0_1 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ((!ifcs_0_1_innerRoute$D_OUT[0] ||
	       !(!axi4_dmem_shim_tmp_shimSlave_arff_rv[98])) ?
		IF_NOT_ifcs_0_1_innerRoute_first__500_BIT_1_50_ETC___d1522 :
		ifcs_0_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_547_AND_activeSource_1_1_1_654_655_A_ETC___d1657 =
	     state_1_1 && activeSource_1_1_1 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_1_innerRoute$D_OUT[0] ||
	       !(!axi4_dmem_shim_tmp_shimSlave_arff_rv[98])) ?
		IF_NOT_ifcs_1_1_innerRoute_first__529_BIT_1_53_ETC___d1538 :
		ifcs_1_1_innerRoute$D_OUT[0]) ;
  assign state_73_AND_activeSource_0_46_47_AND_ifcs_0_i_ETC___d949 =
	     state && activeSource_0 && ifcs_0_innerRoute$EMPTY_N &&
	     ((!ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794) ?
		IF_NOT_ifcs_0_innerRoute_first__26_BIT_1_35_36_ETC___d848 :
		ifcs_0_innerRoute$D_OUT[0]) ;
  assign state_73_AND_activeSource_1_90_91_AND_ifcs_1_i_ETC___d993 =
	     state && activeSource_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_55_EQ_0_56_THEN_NOT_axi4_d_ETC___d794) ?
		IF_NOT_ifcs_1_innerRoute_first__55_BIT_1_59_60_ETC___d864 :
		ifcs_1_innerRoute$D_OUT[0]) ;
  assign tmp__h10001 = { 24'd0, x__h10250 } ;
  assign tmp__h7784 =
	     axi4_dmem_shim_tmp_awreqff$D_OUT[92:29] +
	     axi4_dmem_shim_tmp_addrOffset ;
  assign v_araddr__h14967 =
	     { 24'd0,
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[140:101] } ;
  assign v_arid__h14966 =
	     (axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[100:95] :
	       6'd0 ;
  assign v_arlen__h14968 =
	     (axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arlen__h14951 :
	       8'd0 ;
  assign v_arsize_val__h15013 =
	     (axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_dmem_shim_tmp_tagCon$memory_request_get[2:0] :
	       3'b0 ;
  assign x__h10250 =
	     { axi4_dmem_shim_tmp_tagCon$memory_request_get[140:104], 3'd0 } ;
  assign x__h10293 =
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[81] ?
	       4'd0 :
	       (axi4_dmem_shim_tmp_tagCon$memory_request_get[82] ?
		  4'd1 :
		  (axi4_dmem_shim_tmp_tagCon$memory_request_get[83] ?
		     4'd2 :
		     (axi4_dmem_shim_tmp_tagCon$memory_request_get[84] ?
			4'd3 :
			(axi4_dmem_shim_tmp_tagCon$memory_request_get[85] ?
			   4'd4 :
			   (axi4_dmem_shim_tmp_tagCon$memory_request_get[86] ?
			      4'd5 :
			      (axi4_dmem_shim_tmp_tagCon$memory_request_get[87] ?
				 4'd6 :
				 (axi4_dmem_shim_tmp_tagCon$memory_request_get[88] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h12027 = x__h12039 + y__h12040 ;
  assign x__h12039 = x__h12051 + y__h12052 ;
  assign x__h12051 = x__h12063 + y__h12064 ;
  assign x__h12063 = x__h12075 + y__h12076 ;
  assign x__h12075 = x__h12087 + y__h12088 ;
  assign x__h12087 = x__h12099 + y__h12100 ;
  assign x__h12099 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[88] } ;
  assign x__h13623 =
	     axi4_dmem_shim_tmp_tagCon$memory_request_get[90] ? 4'd0 : 4'd15 ;
  assign x__h15031 =
	     (axi4_dmem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arcache__h14955 :
	       4'd0 ;
  assign x__h25419 =
	     merged_0_outflit$wget[166:103] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h25444 =
	     merged_0_outflit$wget[166:103] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h28997 =
	     merged_1_outflit$wget[166:103] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h29022 =
	     merged_1_outflit$wget[166:103] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h39140 =
	     SEXT_arbiter_lastSelect__q4[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h39243 =
	     SEXT_arbiter_firstHot__q3[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h39608 =
	     SEXT_SEXT_arbiter_firstHot_80_81_BIT_0_82_AND__ETC__q5[0] &
	     arbiter_firstHot ;
  assign x__h39667 =
	     !SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888 &&
	     SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 ;
  assign x__h39749 = SEXT_x9667__q6[0] & arbiter_firstHot ;
  assign x__h53797 = x__h53799 | y__h53800 ;
  assign x__h53799 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h53948 = x__h53950 | y__h53951 ;
  assign x__h53950 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h54084 = x__h54086 | y__h54087 ;
  assign x__h54086 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h54556 = x__h54558 | y__h54559 ;
  assign x__h54558 =
	     SEXT_SEXT_arbiter_1_firstHot_079_080_BIT_0_081_ETC__q10[0] &
	     arbiter_1_firstHot ;
  assign x__h54618 =
	     !SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095 &&
	     SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 ;
  assign x__h54652 =
	     !SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 &&
	     !SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095 &&
	     SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 ;
  assign x__h54744 = x__h54746 | y__h54747 ;
  assign x__h54746 = SEXT_x4618__q11[0] & arbiter_1_firstHot ;
  assign x__h54925 = x__h54927 | y__h54928 ;
  assign x__h54927 = SEXT_x4652__q12[0] & arbiter_1_firstHot ;
  assign x__h63058 =
	     cpu$dmem_master_ar_peek[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h63083 =
	     cpu$dmem_master_ar_peek[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h65621 =
	     debug_module$master_ar_peek[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h65646 =
	     debug_module$master_ar_peek[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h74766 =
	     SEXT_arbiter_1_lastSelect_2__q14[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h74869 =
	     SEXT_arbiter_1_firstHot_1__q13[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h75234 =
	     SEXT_SEXT_arbiter_1_firstHot_1_554_555_BIT_0_5_ETC__q15[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h75293 =
	     !SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562 &&
	     SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 ;
  assign x__h75375 = SEXT_x5293__q16[0] & arbiter_1_firstHot_1 ;
  assign x__h7627 =
	     axi4_dmem_shim_tmp_addrOffset +
	     (64'd1 << axi4_dmem_shim_tmp_awreqff$D_OUT[20:18]) ;
  assign x__h86924 = x__h86926 | y__h86927 ;
  assign x__h86926 =
	     SEXT_arbiter_1_1_lastSelect__q18[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h87075 = x__h87077 | y__h87078 ;
  assign x__h87077 =
	     SEXT_arbiter_1_1_lastSelect_1__q19[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h87211 = x__h87213 | y__h87214 ;
  assign x__h87213 =
	     SEXT_arbiter_1_1_firstHot__q17[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h87683 = x__h87685 | y__h87686 ;
  assign x__h87685 =
	     SEXT_SEXT_arbiter_1_1_firstHot_743_744_BIT_0_7_ETC__q20[0] &
	     arbiter_1_1_firstHot ;
  assign x__h87745 =
	     !SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759 &&
	     SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 ;
  assign x__h87779 =
	     !SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 &&
	     !SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759 &&
	     SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 ;
  assign x__h87871 = x__h87873 | y__h87874 ;
  assign x__h87873 = SEXT_x7745__q21[0] & arbiter_1_1_firstHot ;
  assign x__h88052 = x__h88054 | y__h88055 ;
  assign x__h88054 = SEXT_x7779__q22[0] & arbiter_1_1_firstHot ;
  assign x_port1__read__h64181 =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_flitCount$port0__write_1 :
	       ifcs_0_1_noRoute_flitCount ;
  assign x_port1__read__h66726 =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       ifcs_1_1_noRoute_flitCount$port0__write_1 :
	       ifcs_1_1_noRoute_flitCount ;
  assign y__h12028 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[81] } ;
  assign y__h12040 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[82] } ;
  assign y__h12052 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[83] } ;
  assign y__h12064 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[84] } ;
  assign y__h12076 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[85] } ;
  assign y__h12088 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[86] } ;
  assign y__h12100 =
	     { 3'd0, axi4_dmem_shim_tmp_tagCon$memory_request_get[87] } ;
  assign y__h39141 =
	     SEXT_arbiter_firstHot__q3[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h39244 =
	     SEXT_arbiter_lastSelect__q4[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h39609 = SEXT_x9667__q6[0] & arbiter_lastSelect ;
  assign y__h39750 =
	     SEXT_SEXT_arbiter_firstHot_80_81_BIT_0_82_AND__ETC__q5[0] &
	     arbiter_lastSelect ;
  assign y__h53798 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h53800 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h53949 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h53951 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h54085 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h54087 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h54557 = SEXT_x4652__q12[0] & arbiter_1_lastSelect ;
  assign y__h54559 = SEXT_x4618__q11[0] & arbiter_1_lastSelect_1 ;
  assign y__h54745 =
	     SEXT_SEXT_arbiter_1_firstHot_079_080_BIT_0_081_ETC__q10[0] &
	     arbiter_1_lastSelect ;
  assign y__h54747 = SEXT_x4652__q12[0] & arbiter_1_lastSelect_1 ;
  assign y__h54926 = SEXT_x4618__q11[0] & arbiter_1_lastSelect ;
  assign y__h54928 =
	     SEXT_SEXT_arbiter_1_firstHot_079_080_BIT_0_081_ETC__q10[0] &
	     arbiter_1_lastSelect_1 ;
  assign y__h74767 =
	     SEXT_arbiter_1_firstHot_1__q13[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h74870 =
	     SEXT_arbiter_1_lastSelect_2__q14[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h75235 = SEXT_x5293__q16[0] & arbiter_1_lastSelect_2 ;
  assign y__h75376 =
	     SEXT_SEXT_arbiter_1_firstHot_1_554_555_BIT_0_5_ETC__q15[0] &
	     arbiter_1_lastSelect_2 ;
  assign y__h86925 =
	     SEXT_arbiter_1_1_firstHot__q17[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h86927 =
	     SEXT_arbiter_1_1_lastSelect_1__q19[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h87076 =
	     SEXT_arbiter_1_1_lastSelect__q18[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h87078 =
	     SEXT_arbiter_1_1_firstHot__q17[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h87212 =
	     SEXT_arbiter_1_1_lastSelect_1__q19[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h87214 =
	     SEXT_arbiter_1_1_lastSelect__q18[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h87684 = SEXT_x7779__q22[0] & arbiter_1_1_lastSelect ;
  assign y__h87686 = SEXT_x7745__q21[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h87872 =
	     SEXT_SEXT_arbiter_1_1_firstHot_743_744_BIT_0_7_ETC__q20[0] &
	     arbiter_1_1_lastSelect ;
  assign y__h87874 = SEXT_x7779__q22[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h88053 = SEXT_x7745__q21[0] & arbiter_1_1_lastSelect ;
  assign y__h88055 =
	     SEXT_SEXT_arbiter_1_1_firstHot_743_744_BIT_0_7_ETC__q20[0] &
	     arbiter_1_1_lastSelect_1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_dmem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY 64'd0;
	axi4_dmem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_dmem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_dmem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 8'bxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 7'bxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_dmem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (activeSource_0$EN)
	  activeSource_0 <= `BSV_ASSIGNMENT_DELAY activeSource_0$D_IN;
	if (activeSource_1$EN)
	  activeSource_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1$D_IN;
	if (activeSource_1_0$EN)
	  activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0$D_IN;
	if (activeSource_1_0_1$EN)
	  activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0_1$D_IN;
	if (activeSource_1_1$EN)
	  activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1$D_IN;
	if (activeSource_1_1_0$EN)
	  activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_0$D_IN;
	if (activeSource_1_1_1$EN)
	  activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_1$D_IN;
	if (activeSource_1_1_1_1$EN)
	  activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY
	      activeSource_1_1_1_1$D_IN;
	if (activeSource_1_1_2$EN)
	  activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_2$D_IN;
	if (activeSource_1_2$EN)
	  activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_2$D_IN;
	if (arbiter_1_1_firstHot$EN)
	  arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_firstHot$D_IN;
	if (arbiter_1_1_lastSelect$EN)
	  arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect$D_IN;
	if (arbiter_1_1_lastSelect_1$EN)
	  arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_1$D_IN;
	if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (axi4_dmem_shim_tmp_addrOffset$EN)
	  axi4_dmem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_addrOffset$D_IN;
	if (axi4_dmem_shim_tmp_doneSendingAW$EN)
	  axi4_dmem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_doneSendingAW$D_IN;
	if (axi4_dmem_shim_tmp_reset_done$EN)
	  axi4_dmem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_reset_done$D_IN;
	if (axi4_dmem_shim_tmp_shimMaster_arff_rv$EN)
	  axi4_dmem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimMaster_arff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimMaster_awff_rv$EN)
	  axi4_dmem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimMaster_awff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimMaster_bff_rv$EN)
	  axi4_dmem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimMaster_bff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimMaster_rff_rv$EN)
	  axi4_dmem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimMaster_rff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimMaster_wff_rv$EN)
	  axi4_dmem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimMaster_wff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimSlave_arff_rv$EN)
	  axi4_dmem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimSlave_arff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimSlave_awff_rv$EN)
	  axi4_dmem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimSlave_awff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimSlave_bff_rv$EN)
	  axi4_dmem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimSlave_bff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimSlave_rff_rv$EN)
	  axi4_dmem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimSlave_rff_rv$D_IN;
	if (axi4_dmem_shim_tmp_shimSlave_wff_rv$EN)
	  axi4_dmem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_dmem_shim_tmp_shimSlave_wff_rv$D_IN;
	if (ifcs_0_1_noRoute_currentReq$EN)
	  ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_currentReq$D_IN;
	if (ifcs_0_1_noRoute_flitCount$EN)
	  ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_flitCount$D_IN;
	if (ifcs_0_1_state$EN)
	  ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state$D_IN;
	if (ifcs_0_1_state_1$EN)
	  ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state_1$D_IN;
	if (ifcs_0_noRoute_inner_currentReq$EN)
	  ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_currentReq$D_IN;
	if (ifcs_0_noRoute_inner_pendingReq$EN)
	  ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (ifcs_0_state$EN)
	  ifcs_0_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_state$D_IN;
	if (ifcs_0_state_1$EN)
	  ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_state_1$D_IN;
	if (ifcs_1_1_noRoute_currentReq$EN)
	  ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_currentReq$D_IN;
	if (ifcs_1_1_noRoute_flitCount$EN)
	  ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_flitCount$D_IN;
	if (ifcs_1_1_state$EN)
	  ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state$D_IN;
	if (ifcs_1_1_state_1$EN)
	  ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state_1$D_IN;
	if (ifcs_1_noRoute_inner_currentReq$EN)
	  ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_currentReq$D_IN;
	if (ifcs_1_noRoute_inner_pendingReq$EN)
	  ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (ifcs_1_state$EN)
	  ifcs_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_state$D_IN;
	if (ifcs_1_state_1$EN)
	  ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_state_1$D_IN;
	if (ifcs_2_1_state$EN)
	  ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_1_state$D_IN;
	if (ifcs_2_state$EN)
	  ifcs_2_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_state$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
	if (state_1_1$EN) state_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1$D_IN;
	if (state_1_1_1$EN)
	  state_1_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeSource_0 = 1'h0;
    activeSource_1 = 1'h0;
    activeSource_1_0 = 1'h0;
    activeSource_1_0_1 = 1'h0;
    activeSource_1_1 = 1'h0;
    activeSource_1_1_0 = 1'h0;
    activeSource_1_1_1 = 1'h0;
    activeSource_1_1_1_1 = 1'h0;
    activeSource_1_1_2 = 1'h0;
    activeSource_1_2 = 1'h0;
    arbiter_1_1_firstHot = 1'h0;
    arbiter_1_1_lastSelect = 1'h0;
    arbiter_1_1_lastSelect_1 = 1'h0;
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_lastSelect = 1'h0;
    axi4_dmem_shim_tmp_addrOffset = 64'hAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_doneSendingAW = 1'h0;
    axi4_dmem_shim_tmp_reset_done = 1'h0;
    axi4_dmem_shim_tmp_shimMaster_arff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimMaster_awff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimMaster_bff_rv = 9'h0AA;
    axi4_dmem_shim_tmp_shimMaster_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimMaster_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimSlave_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimSlave_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimSlave_bff_rv = 8'hAA;
    axi4_dmem_shim_tmp_shimSlave_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_dmem_shim_tmp_shimSlave_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_flitCount = 9'h0AA;
    ifcs_0_1_state = 2'h2;
    ifcs_0_1_state_1 = 1'h0;
    ifcs_0_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_noRoute_inner_pendingReq = 1'h0;
    ifcs_0_state = 2'h2;
    ifcs_0_state_1 = 1'h0;
    ifcs_1_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_1_noRoute_flitCount = 9'h0AA;
    ifcs_1_1_state = 2'h2;
    ifcs_1_1_state_1 = 1'h0;
    ifcs_1_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_noRoute_inner_pendingReq = 1'h0;
    ifcs_1_state = 2'h2;
    ifcs_1_state_1 = 1'h0;
    ifcs_2_1_state = 1'h0;
    ifcs_2_state = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
    state = 1'h0;
    state_1 = 1'h0;
    state_1_1 = 1'h0;
    state_1_1_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 &&
	  !SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_76_77_BIT_0_78_AND_req_ETC___d884 &&
	  !SEXT_arbiter_firstHot_80_81_BIT_0_82_AND_reqWi_ETC___d888)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h41142 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h41142,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h40531 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h40531,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h45151 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h45151,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h44540 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h44540,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && WILL_FIRE_RL_burst)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected] and\n  [RL_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected || WILL_FIRE_RL_burst) &&
	  (WILL_FIRE_RL_source_selected_1 || WILL_FIRE_RL_burst_1))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected, RL_burst]\n  and [RL_source_selected_1, RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && WILL_FIRE_RL_burst_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_1] and\n  [RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected && WILL_FIRE_RL_sink_selected_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected] and\n  [RL_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1) &&
	  WILL_FIRE_RL_sink_selected_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1] and [RL_sink_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 &&
	  !SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 &&
	  !SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_070_071_BIT_0_072_AN_ETC___d1083 &&
	  !SEXT_arbiter_1_lastSelect_1_074_075_BIT_0_076__ETC___d1089 &&
	  !SEXT_arbiter_1_firstHot_079_080_BIT_0_081_AND__ETC___d1095)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h56317 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h56317,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h55936 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h55936,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h58387 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h58387,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h58006 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h58006,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && WILL_FIRE_RL_burst_3)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_3] and\n  [RL_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h60286 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h60286,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h59905 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h59905,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && WILL_FIRE_RL_burst_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2] and\n  [RL_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2) &&
	  (WILL_FIRE_RL_source_selected_3 || WILL_FIRE_RL_burst_3))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2] and [RL_source_selected_3, RL_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3) &&
	  (WILL_FIRE_RL_source_selected_4 || WILL_FIRE_RL_burst_4))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3] and [RL_source_selected_4,\n  RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && WILL_FIRE_RL_burst_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_4] and\n  [RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_3 && WILL_FIRE_RL_sink_selected_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_3] and\n  [RL_sink_selected_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 &&
	  !SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_550_551_BIT_0_552__ETC___d1558 &&
	  !SEXT_arbiter_1_firstHot_1_554_555_BIT_0_556_AN_ETC___d1562)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h76768 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h76768,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	begin
	  v__h76157 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h76157,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h79661 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h79661,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	begin
	  v__h79050 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h79050,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && WILL_FIRE_RL_burst_5)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5] and\n  [RL_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_5 || WILL_FIRE_RL_burst_5) &&
	  (WILL_FIRE_RL_source_selected_6 || WILL_FIRE_RL_burst_6))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5,\n  RL_burst_5] and [RL_source_selected_6, RL_burst_6] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && WILL_FIRE_RL_burst_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6] and\n  [RL_burst_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_5 && WILL_FIRE_RL_sink_selected_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5] and\n  [RL_sink_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_5 || WILL_FIRE_RL_sink_selected_6) &&
	  WILL_FIRE_RL_sink_selected_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5,\n  RL_sink_selected_6] and [RL_sink_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 &&
	  !SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 &&
	  !SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_734_735_BIT_0_736__ETC___d1747 &&
	  !SEXT_arbiter_1_1_lastSelect_1_738_739_BIT_0_74_ETC___d1753 &&
	  !SEXT_arbiter_1_1_firstHot_743_744_BIT_0_745_AN_ETC___d1759)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h89448 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h89448,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	begin
	  v__h89067 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h89067,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h91939 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h91939,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	begin
	  v__h91558 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h91558,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && WILL_FIRE_RL_burst_8)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8] and\n  [RL_burst_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h94249 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h94249,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	begin
	  v__h93868 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h93868,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && WILL_FIRE_RL_burst_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7] and\n  [RL_burst_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7) &&
	  (WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7] and [RL_source_selected_8, RL_burst_8] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7 ||
	   WILL_FIRE_RL_source_selected_8 ||
	   WILL_FIRE_RL_burst_8) &&
	  (WILL_FIRE_RL_source_selected_9 || WILL_FIRE_RL_burst_9))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7, RL_source_selected_8, RL_burst_8] and [RL_source_selected_9,\n  RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && WILL_FIRE_RL_burst_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_9] and\n  [RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_8 && WILL_FIRE_RL_sink_selected_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_8] and\n  [RL_sink_selected_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_nonRoutableFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_nonRoutableFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 281, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit_1] and\n  [RL_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 281, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit_1] and\n  [RL_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_firstFlit && WILL_FIRE_RL_ifcs_2_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 280, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_firstFlit] and\n  [RL_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_0_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_0_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_drainFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_drainFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_nonRoutableFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_nonRoutableFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 281, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit_1] and\n  [RL_ifcs_0_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 281, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit_1] and\n  [RL_ifcs_1_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_2_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 280, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_1_firstFlit] and\n  [RL_ifcs_2_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_0_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_1_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_1_0_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit && WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_drainFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h17028 = $stime;
	  #0;
	end
    v__h17022 = v__h17028 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_soc_start", v__h17022);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	begin
	  v__h17206 = $stime;
	  #0;
	end
    v__h17200 = v__h17206 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_dm_start", v__h17200);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h17572 = $stime;
	  #0;
	end
    v__h17566 = v__h17572 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%0d: Core.rl_cpu_hart0_reset_complete", v__h17566);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sinks_1_1_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit && WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 214, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 215, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_drainFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
  end
  // synopsys translate_on
endmodule  // mkCore

