//
// Generated by Bluespec Compiler (build 39ae402)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_aw_canPeek     O     1 reg
// cpu_imem_master_aw_peek        O    98 reg
// RDY_cpu_imem_master_aw_peek    O     1 reg
// RDY_cpu_imem_master_aw_drop    O     1 reg
// cpu_imem_master_w_canPeek      O     1 reg
// cpu_imem_master_w_peek         O    73 reg
// RDY_cpu_imem_master_w_peek     O     1 reg
// RDY_cpu_imem_master_w_drop     O     1 reg
// cpu_imem_master_b_canPut       O     1 reg
// RDY_cpu_imem_master_b_put      O     1 reg
// cpu_imem_master_ar_canPeek     O     1 reg
// cpu_imem_master_ar_peek        O    98 reg
// RDY_cpu_imem_master_ar_peek    O     1 reg
// RDY_cpu_imem_master_ar_drop    O     1 reg
// cpu_imem_master_r_canPut       O     1 reg
// RDY_cpu_imem_master_r_put      O     1 reg
// core_mem_master_aw_canPeek     O     1
// core_mem_master_aw_peek        O    99
// RDY_core_mem_master_aw_peek    O     1
// RDY_core_mem_master_aw_drop    O     1
// core_mem_master_w_canPeek      O     1
// core_mem_master_w_peek         O    73
// RDY_core_mem_master_w_peek     O     1
// RDY_core_mem_master_w_drop     O     1
// core_mem_master_b_canPut       O     1
// RDY_core_mem_master_b_put      O     1
// core_mem_master_ar_canPeek     O     1
// core_mem_master_ar_peek        O    99
// RDY_core_mem_master_ar_peek    O     1
// RDY_core_mem_master_ar_drop    O     1
// core_mem_master_r_canPut       O     1
// RDY_core_mem_master_r_put      O     1
// dma_server_aw_canPut           O     1 const
// RDY_dma_server_aw_put          O     1 const
// dma_server_w_canPut            O     1 const
// RDY_dma_server_w_put           O     1 const
// dma_server_b_canPeek           O     1 const
// dma_server_b_peek              O     8
// RDY_dma_server_b_peek          O     1 const
// RDY_dma_server_b_drop          O     1 const
// dma_server_ar_canPut           O     1 const
// RDY_dma_server_ar_put          O     1 const
// dma_server_r_canPeek           O     1 const
// dma_server_r_peek              O   521
// RDY_dma_server_r_peek          O     1 const
// RDY_dma_server_r_drop          O     1 const
// RDY_dm_dmi_read_addr           O     1
// dm_dmi_read_data               O    32
// RDY_dm_dmi_read_data           O     1
// RDY_dm_dmi_write               O     1
// ndm_reset_client_request_get   O     1 reg
// RDY_ndm_reset_client_request_get  O     1 reg
// RDY_ndm_reset_client_response_put  O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_b_put_val      I     7 reg
// cpu_imem_master_r_put_val      I    72 reg
// core_mem_master_b_put_val      I     8
// core_mem_master_r_put_val      I    73
// dma_server_aw_put_val          I    99 unused
// dma_server_w_put_val           I   577 unused
// dma_server_ar_put_val          I    99 unused
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// dm_dmi_read_addr_dm_addr       I     7 reg
// dm_dmi_write_dm_addr           I     7
// dm_dmi_write_dm_word           I    32
// ndm_reset_client_response_put  I     1 reg
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// EN_cpu_reset_server_request_put  I     1
// EN_cpu_imem_master_aw_drop     I     1
// EN_cpu_imem_master_w_drop      I     1
// EN_cpu_imem_master_b_put       I     1
// EN_cpu_imem_master_ar_drop     I     1
// EN_cpu_imem_master_r_put       I     1
// EN_core_mem_master_aw_drop     I     1
// EN_core_mem_master_w_drop      I     1
// EN_core_mem_master_b_put       I     1
// EN_core_mem_master_ar_drop     I     1
// EN_core_mem_master_r_put       I     1
// EN_dma_server_aw_put           I     1 unused
// EN_dma_server_w_put            I     1 unused
// EN_dma_server_b_drop           I     1 unused
// EN_dma_server_ar_put           I     1 unused
// EN_dma_server_r_drop           I     1 unused
// EN_dm_dmi_read_addr            I     1
// EN_dm_dmi_write                I     1
// EN_ndm_reset_client_response_put  I     1
// EN_set_verbosity               I     1
// EN_ma_ddr4_ready               I     1
// EN_cpu_reset_server_response_get  I     1
// EN_dm_dmi_read_data            I     1
// EN_ndm_reset_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   EN_dm_dmi_read_data -> dm_dmi_read_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      cpu_imem_master_aw_canPeek,

	      cpu_imem_master_aw_peek,
	      RDY_cpu_imem_master_aw_peek,

	      EN_cpu_imem_master_aw_drop,
	      RDY_cpu_imem_master_aw_drop,

	      cpu_imem_master_w_canPeek,

	      cpu_imem_master_w_peek,
	      RDY_cpu_imem_master_w_peek,

	      EN_cpu_imem_master_w_drop,
	      RDY_cpu_imem_master_w_drop,

	      cpu_imem_master_b_canPut,

	      cpu_imem_master_b_put_val,
	      EN_cpu_imem_master_b_put,
	      RDY_cpu_imem_master_b_put,

	      cpu_imem_master_ar_canPeek,

	      cpu_imem_master_ar_peek,
	      RDY_cpu_imem_master_ar_peek,

	      EN_cpu_imem_master_ar_drop,
	      RDY_cpu_imem_master_ar_drop,

	      cpu_imem_master_r_canPut,

	      cpu_imem_master_r_put_val,
	      EN_cpu_imem_master_r_put,
	      RDY_cpu_imem_master_r_put,

	      core_mem_master_aw_canPeek,

	      core_mem_master_aw_peek,
	      RDY_core_mem_master_aw_peek,

	      EN_core_mem_master_aw_drop,
	      RDY_core_mem_master_aw_drop,

	      core_mem_master_w_canPeek,

	      core_mem_master_w_peek,
	      RDY_core_mem_master_w_peek,

	      EN_core_mem_master_w_drop,
	      RDY_core_mem_master_w_drop,

	      core_mem_master_b_canPut,

	      core_mem_master_b_put_val,
	      EN_core_mem_master_b_put,
	      RDY_core_mem_master_b_put,

	      core_mem_master_ar_canPeek,

	      core_mem_master_ar_peek,
	      RDY_core_mem_master_ar_peek,

	      EN_core_mem_master_ar_drop,
	      RDY_core_mem_master_ar_drop,

	      core_mem_master_r_canPut,

	      core_mem_master_r_put_val,
	      EN_core_mem_master_r_put,
	      RDY_core_mem_master_r_put,

	      dma_server_aw_canPut,

	      dma_server_aw_put_val,
	      EN_dma_server_aw_put,
	      RDY_dma_server_aw_put,

	      dma_server_w_canPut,

	      dma_server_w_put_val,
	      EN_dma_server_w_put,
	      RDY_dma_server_w_put,

	      dma_server_b_canPeek,

	      dma_server_b_peek,
	      RDY_dma_server_b_peek,

	      EN_dma_server_b_drop,
	      RDY_dma_server_b_drop,

	      dma_server_ar_canPut,

	      dma_server_ar_put_val,
	      EN_dma_server_ar_put,
	      RDY_dma_server_ar_put,

	      dma_server_r_canPeek,

	      dma_server_r_peek,
	      RDY_dma_server_r_peek,

	      EN_dma_server_r_drop,
	      RDY_dma_server_r_drop,

	      core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	      nmi_req_set_not_clear,

	      dm_dmi_read_addr_dm_addr,
	      EN_dm_dmi_read_addr,
	      RDY_dm_dmi_read_addr,

	      EN_dm_dmi_read_data,
	      dm_dmi_read_data,
	      RDY_dm_dmi_read_data,

	      dm_dmi_write_dm_addr,
	      dm_dmi_write_dm_word,
	      EN_dm_dmi_write,
	      RDY_dm_dmi_write,

	      EN_ndm_reset_client_request_get,
	      ndm_reset_client_request_get,
	      RDY_ndm_reset_client_request_get,

	      ndm_reset_client_response_put,
	      EN_ndm_reset_client_response_put,
	      RDY_ndm_reset_client_response_put,

	      set_verbosity_verbosity,
	      set_verbosity_logdelay,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      EN_ma_ddr4_ready,
	      RDY_ma_ddr4_ready,

	      mv_status);
  input  CLK;
  input  RST_N;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_canPeek
  output cpu_imem_master_aw_canPeek;

  // value method cpu_imem_master_aw_peek
  output [97 : 0] cpu_imem_master_aw_peek;
  output RDY_cpu_imem_master_aw_peek;

  // action method cpu_imem_master_aw_drop
  input  EN_cpu_imem_master_aw_drop;
  output RDY_cpu_imem_master_aw_drop;

  // value method cpu_imem_master_w_canPeek
  output cpu_imem_master_w_canPeek;

  // value method cpu_imem_master_w_peek
  output [72 : 0] cpu_imem_master_w_peek;
  output RDY_cpu_imem_master_w_peek;

  // action method cpu_imem_master_w_drop
  input  EN_cpu_imem_master_w_drop;
  output RDY_cpu_imem_master_w_drop;

  // value method cpu_imem_master_b_canPut
  output cpu_imem_master_b_canPut;

  // action method cpu_imem_master_b_put
  input  [6 : 0] cpu_imem_master_b_put_val;
  input  EN_cpu_imem_master_b_put;
  output RDY_cpu_imem_master_b_put;

  // value method cpu_imem_master_ar_canPeek
  output cpu_imem_master_ar_canPeek;

  // value method cpu_imem_master_ar_peek
  output [97 : 0] cpu_imem_master_ar_peek;
  output RDY_cpu_imem_master_ar_peek;

  // action method cpu_imem_master_ar_drop
  input  EN_cpu_imem_master_ar_drop;
  output RDY_cpu_imem_master_ar_drop;

  // value method cpu_imem_master_r_canPut
  output cpu_imem_master_r_canPut;

  // action method cpu_imem_master_r_put
  input  [71 : 0] cpu_imem_master_r_put_val;
  input  EN_cpu_imem_master_r_put;
  output RDY_cpu_imem_master_r_put;

  // value method core_mem_master_aw_canPeek
  output core_mem_master_aw_canPeek;

  // value method core_mem_master_aw_peek
  output [98 : 0] core_mem_master_aw_peek;
  output RDY_core_mem_master_aw_peek;

  // action method core_mem_master_aw_drop
  input  EN_core_mem_master_aw_drop;
  output RDY_core_mem_master_aw_drop;

  // value method core_mem_master_w_canPeek
  output core_mem_master_w_canPeek;

  // value method core_mem_master_w_peek
  output [72 : 0] core_mem_master_w_peek;
  output RDY_core_mem_master_w_peek;

  // action method core_mem_master_w_drop
  input  EN_core_mem_master_w_drop;
  output RDY_core_mem_master_w_drop;

  // value method core_mem_master_b_canPut
  output core_mem_master_b_canPut;

  // action method core_mem_master_b_put
  input  [7 : 0] core_mem_master_b_put_val;
  input  EN_core_mem_master_b_put;
  output RDY_core_mem_master_b_put;

  // value method core_mem_master_ar_canPeek
  output core_mem_master_ar_canPeek;

  // value method core_mem_master_ar_peek
  output [98 : 0] core_mem_master_ar_peek;
  output RDY_core_mem_master_ar_peek;

  // action method core_mem_master_ar_drop
  input  EN_core_mem_master_ar_drop;
  output RDY_core_mem_master_ar_drop;

  // value method core_mem_master_r_canPut
  output core_mem_master_r_canPut;

  // action method core_mem_master_r_put
  input  [72 : 0] core_mem_master_r_put_val;
  input  EN_core_mem_master_r_put;
  output RDY_core_mem_master_r_put;

  // value method dma_server_aw_canPut
  output dma_server_aw_canPut;

  // action method dma_server_aw_put
  input  [98 : 0] dma_server_aw_put_val;
  input  EN_dma_server_aw_put;
  output RDY_dma_server_aw_put;

  // value method dma_server_w_canPut
  output dma_server_w_canPut;

  // action method dma_server_w_put
  input  [576 : 0] dma_server_w_put_val;
  input  EN_dma_server_w_put;
  output RDY_dma_server_w_put;

  // value method dma_server_b_canPeek
  output dma_server_b_canPeek;

  // value method dma_server_b_peek
  output [7 : 0] dma_server_b_peek;
  output RDY_dma_server_b_peek;

  // action method dma_server_b_drop
  input  EN_dma_server_b_drop;
  output RDY_dma_server_b_drop;

  // value method dma_server_ar_canPut
  output dma_server_ar_canPut;

  // action method dma_server_ar_put
  input  [98 : 0] dma_server_ar_put_val;
  input  EN_dma_server_ar_put;
  output RDY_dma_server_ar_put;

  // value method dma_server_r_canPeek
  output dma_server_r_canPeek;

  // value method dma_server_r_peek
  output [520 : 0] dma_server_r_peek;
  output RDY_dma_server_r_peek;

  // action method dma_server_r_drop
  input  EN_dma_server_r_drop;
  output RDY_dma_server_r_drop;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method dm_dmi_read_addr
  input  [6 : 0] dm_dmi_read_addr_dm_addr;
  input  EN_dm_dmi_read_addr;
  output RDY_dm_dmi_read_addr;

  // actionvalue method dm_dmi_read_data
  input  EN_dm_dmi_read_data;
  output [31 : 0] dm_dmi_read_data;
  output RDY_dm_dmi_read_data;

  // action method dm_dmi_write
  input  [6 : 0] dm_dmi_write_dm_addr;
  input  [31 : 0] dm_dmi_write_dm_word;
  input  EN_dm_dmi_write;
  output RDY_dm_dmi_write;

  // actionvalue method ndm_reset_client_request_get
  input  EN_ndm_reset_client_request_get;
  output ndm_reset_client_request_get;
  output RDY_ndm_reset_client_request_get;

  // action method ndm_reset_client_response_put
  input  ndm_reset_client_response_put;
  input  EN_ndm_reset_client_response_put;
  output RDY_ndm_reset_client_response_put;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [520 : 0] dma_server_r_peek;
  wire [98 : 0] core_mem_master_ar_peek, core_mem_master_aw_peek;
  wire [97 : 0] cpu_imem_master_ar_peek, cpu_imem_master_aw_peek;
  wire [72 : 0] core_mem_master_w_peek, cpu_imem_master_w_peek;
  wire [31 : 0] dm_dmi_read_data;
  wire [7 : 0] dma_server_b_peek, mv_status;
  wire RDY_core_mem_master_ar_drop,
       RDY_core_mem_master_ar_peek,
       RDY_core_mem_master_aw_drop,
       RDY_core_mem_master_aw_peek,
       RDY_core_mem_master_b_put,
       RDY_core_mem_master_r_put,
       RDY_core_mem_master_w_drop,
       RDY_core_mem_master_w_peek,
       RDY_cpu_imem_master_ar_drop,
       RDY_cpu_imem_master_ar_peek,
       RDY_cpu_imem_master_aw_drop,
       RDY_cpu_imem_master_aw_peek,
       RDY_cpu_imem_master_b_put,
       RDY_cpu_imem_master_r_put,
       RDY_cpu_imem_master_w_drop,
       RDY_cpu_imem_master_w_peek,
       RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_dm_dmi_read_addr,
       RDY_dm_dmi_read_data,
       RDY_dm_dmi_write,
       RDY_dma_server_ar_put,
       RDY_dma_server_aw_put,
       RDY_dma_server_b_drop,
       RDY_dma_server_b_peek,
       RDY_dma_server_r_drop,
       RDY_dma_server_r_peek,
       RDY_dma_server_w_put,
       RDY_ma_ddr4_ready,
       RDY_ndm_reset_client_request_get,
       RDY_ndm_reset_client_response_put,
       RDY_set_verbosity,
       core_mem_master_ar_canPeek,
       core_mem_master_aw_canPeek,
       core_mem_master_b_canPut,
       core_mem_master_r_canPut,
       core_mem_master_w_canPeek,
       cpu_imem_master_ar_canPeek,
       cpu_imem_master_aw_canPeek,
       cpu_imem_master_b_canPut,
       cpu_imem_master_r_canPut,
       cpu_imem_master_w_canPeek,
       cpu_reset_server_response_get,
       dma_server_ar_canPut,
       dma_server_aw_canPut,
       dma_server_b_canPeek,
       dma_server_r_canPeek,
       dma_server_w_canPut,
       ndm_reset_client_request_get;

  // inlined wires
  reg [172 : 0] toDfltOutput$wget,
		toOutput_0$wget,
		toOutput_1$wget,
		toOutput_2$wget;
  reg [97 : 0] toDfltOutput_1_1$wget,
	       toOutput_1_0$wget,
	       toOutput_1_1_1$wget,
	       toOutput_1_2$wget;
  reg [72 : 0] toOutput_1_0_1$wget, toOutput_1_1_2$wget;
  reg [6 : 0] toOutput_0_1$wget, toOutput_1_1$wget;
  wire [172 : 0] inputPeek_0$wget,
		 inputPeek_1$wget,
		 split_0_doPut$wget,
		 split_1_doPut$wget,
		 split_2_doPut$wget;
  wire [171 : 0] merged_0_outflit$wget, merged_1_outflit$wget;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read;
  wire [97 : 0] noRouteSlv_1_currentReq$port0__write_1,
		noRouteSlv_1_currentReq$port1__read;
  wire [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port1__write_1,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read,
		axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read,
		axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read;
  wire [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__write_1,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read,
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read,
	       noRouteSlv_1_flitCount$port0__write_1,
	       noRouteSlv_1_flitCount$port1__write_1,
	       noRouteSlv_1_flitCount$port2__read;
  wire [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__write_1,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read,
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read;
  wire [5 : 0] noRouteSlv_m_send_rsp$port0__write_1,
	       noRouteSlv_m_send_rsp$port1__read,
	       noRouteSlv_m_send_rsp$port2__read;
  wire [2 : 0] inputDest_0$wget,
	       inputDest_1$wget,
	       inputDest_1_0$wget,
	       inputDest_1_1_1$wget;
  wire [1 : 0] inputDest_0_1$wget,
	       inputDest_1_0_1$wget,
	       inputDest_1_1$wget,
	       inputDest_1_1_2$wget,
	       inputDest_1_2$wget,
	       inputDest_1_3$wget,
	       inputDest_2$wget,
	       inputDest_3$wget;
  wire axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port1__write,
       axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write,
       axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write,
       axi4_mem_shim_tmp_shimSlave_wff_rv$EN_port0__write,
       dfltOutputCanPut$wget,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       noRouteSlv_1_flitCount$EN_port1__write,
       noRouteSlv_m_send_rsp$EN_port0__write,
       noRouteSlv_m_send_rsp$EN_port1__write,
       selectInput_0$wget,
       selectInput_0_1$wget,
       selectInput_1$wget,
       selectInput_1_0$wget,
       selectInput_1_0_1$wget,
       selectInput_1_1$wget,
       selectInput_1_1_1$wget,
       selectInput_1_1_2$wget,
       selectInput_1_2$wget,
       selectInput_1_3$wget,
       selectInput_2$wget,
       selectInput_3$wget,
       toDfltOutput$whas,
       toDfltOutput_1_1$whas,
       toOutput_0$whas,
       toOutput_0_1$whas,
       toOutput_1$whas,
       toOutput_1_0$whas,
       toOutput_1_0_1$whas,
       toOutput_1_1$whas,
       toOutput_1_1_1$whas,
       toOutput_1_1_2$whas,
       toOutput_1_2$whas,
       toOutput_2$whas;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_1_1
  reg arbiter_1_lastSelect_1_1;
  wire arbiter_1_lastSelect_1_1$D_IN, arbiter_1_lastSelect_1_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_firstHot_1
  reg arbiter_firstHot_1;
  wire arbiter_firstHot_1$D_IN, arbiter_firstHot_1$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register arbiter_lastSelect_1
  reg arbiter_lastSelect_1;
  wire arbiter_lastSelect_1$D_IN, arbiter_lastSelect_1$EN;

  // register arbiter_lastSelect_1_1
  reg arbiter_lastSelect_1_1;
  wire arbiter_lastSelect_1_1$D_IN, arbiter_lastSelect_1_1$EN;

  // register arbiter_lastSelect_2
  reg arbiter_lastSelect_2;
  wire arbiter_lastSelect_2$D_IN, arbiter_lastSelect_2$EN;

  // register axi4_mem_shim_tmp_addrOffset
  reg [63 : 0] axi4_mem_shim_tmp_addrOffset;
  wire [63 : 0] axi4_mem_shim_tmp_addrOffset$D_IN;
  wire axi4_mem_shim_tmp_addrOffset$EN;

  // register axi4_mem_shim_tmp_doneSendingAW
  reg axi4_mem_shim_tmp_doneSendingAW;
  wire axi4_mem_shim_tmp_doneSendingAW$D_IN,
       axi4_mem_shim_tmp_doneSendingAW$EN;

  // register axi4_mem_shim_tmp_reset_done
  reg axi4_mem_shim_tmp_reset_done;
  wire axi4_mem_shim_tmp_reset_done$D_IN, axi4_mem_shim_tmp_reset_done$EN;

  // register axi4_mem_shim_tmp_shimMaster_arff_rv
  reg [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_arff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_awff_rv
  reg [99 : 0] axi4_mem_shim_tmp_shimMaster_awff_rv;
  wire [99 : 0] axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_awff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_bff_rv
  reg [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv;
  wire [8 : 0] axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_bff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_rff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_rff_rv$EN;

  // register axi4_mem_shim_tmp_shimMaster_wff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimMaster_wff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimMaster_wff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_arff_rv
  reg [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_arff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_awff_rv
  reg [98 : 0] axi4_mem_shim_tmp_shimSlave_awff_rv;
  wire [98 : 0] axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_awff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_bff_rv
  reg [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv;
  wire [7 : 0] axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_bff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_rff_rv
  reg [73 : 0] axi4_mem_shim_tmp_shimSlave_rff_rv;
  wire [73 : 0] axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_rff_rv$EN;

  // register axi4_mem_shim_tmp_shimSlave_wff_rv
  reg [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv;
  wire [74 : 0] axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN;
  wire axi4_mem_shim_tmp_shimSlave_wff_rv$EN;

  // register axi4_mem_shim_tmp_writeBurst
  reg axi4_mem_shim_tmp_writeBurst;
  wire axi4_mem_shim_tmp_writeBurst$D_IN, axi4_mem_shim_tmp_writeBurst$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register moreFlits
  reg [5 : 0] moreFlits;
  reg [5 : 0] moreFlits$D_IN;
  wire moreFlits$EN;

  // register moreFlits_1
  reg [6 : 0] moreFlits_1;
  wire [6 : 0] moreFlits_1$D_IN;
  wire moreFlits_1$EN;

  // register moreFlits_1_1
  reg [5 : 0] moreFlits_1_1;
  wire [5 : 0] moreFlits_1_1$D_IN;
  wire moreFlits_1_1$EN;

  // register moreFlits_1_2
  reg [6 : 0] moreFlits_1_2;
  reg [6 : 0] moreFlits_1_2$D_IN;
  wire moreFlits_1_2$EN;

  // register noRouteSlv_1_currentReq
  reg [97 : 0] noRouteSlv_1_currentReq;
  wire [97 : 0] noRouteSlv_1_currentReq$D_IN;
  wire noRouteSlv_1_currentReq$EN;

  // register noRouteSlv_1_flitCount
  reg [8 : 0] noRouteSlv_1_flitCount;
  wire [8 : 0] noRouteSlv_1_flitCount$D_IN;
  wire noRouteSlv_1_flitCount$EN;

  // register noRouteSlv_drain_until_last
  reg noRouteSlv_drain_until_last;
  wire noRouteSlv_drain_until_last$D_IN, noRouteSlv_drain_until_last$EN;

  // register noRouteSlv_m_send_rsp
  reg [5 : 0] noRouteSlv_m_send_rsp;
  wire [5 : 0] noRouteSlv_m_send_rsp$D_IN;
  wire noRouteSlv_m_send_rsp$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // ports of submodule axi4_mem_shim_tmp_awreqff
  wire [97 : 0] axi4_mem_shim_tmp_awreqff$D_IN,
		axi4_mem_shim_tmp_awreqff$D_OUT;
  wire axi4_mem_shim_tmp_awreqff$CLR,
       axi4_mem_shim_tmp_awreqff$DEQ,
       axi4_mem_shim_tmp_awreqff$EMPTY_N,
       axi4_mem_shim_tmp_awreqff$ENQ,
       axi4_mem_shim_tmp_awreqff$FULL_N;

  // ports of submodule axi4_mem_shim_tmp_newRst
  wire axi4_mem_shim_tmp_newRst$ASSERT_IN, axi4_mem_shim_tmp_newRst$OUT_RST;

  // ports of submodule axi4_mem_shim_tmp_tagCon
  wire [140 : 0] axi4_mem_shim_tmp_tagCon$cache_request_put_val,
		 axi4_mem_shim_tmp_tagCon$memory_request_get;
  wire [76 : 0] axi4_mem_shim_tmp_tagCon$cache_response_get,
		axi4_mem_shim_tmp_tagCon$memory_response_put_val;
  wire axi4_mem_shim_tmp_tagCon$EN_cache_request_put,
       axi4_mem_shim_tmp_tagCon$EN_cache_response_get,
       axi4_mem_shim_tmp_tagCon$EN_memory_request_get,
       axi4_mem_shim_tmp_tagCon$EN_memory_response_put,
       axi4_mem_shim_tmp_tagCon$RDY_cache_request_put,
       axi4_mem_shim_tmp_tagCon$RDY_cache_response_get,
       axi4_mem_shim_tmp_tagCon$RDY_memory_request_get,
       axi4_mem_shim_tmp_tagCon$RDY_memory_response_put;

  // ports of submodule cpu
  wire [576 : 0] cpu$dma_server_w_put_val;
  wire [520 : 0] cpu$dma_server_r_peek;
  wire [98 : 0] cpu$dma_server_ar_put_val, cpu$dma_server_aw_put_val;
  wire [97 : 0] cpu$imem_master_ar_peek, cpu$imem_master_aw_peek;
  wire [96 : 0] cpu$mem_master_ar_peek, cpu$mem_master_aw_peek;
  wire [76 : 0] cpu$hart0_csr_mem_server_request_put;
  wire [73 : 0] cpu$imem_master_w_peek, cpu$mem_master_w_peek;
  wire [72 : 0] cpu$imem_master_r_put_val;
  wire [71 : 0] cpu$mem_master_r_put_val;
  wire [69 : 0] cpu$hart0_fpr_mem_server_request_put,
		cpu$hart0_gpr_mem_server_request_put;
  wire [64 : 0] cpu$hart0_csr_mem_server_response_get,
		cpu$hart0_fpr_mem_server_response_get,
		cpu$hart0_gpr_mem_server_response_get;
  wire [63 : 0] cpu$set_verbosity_logdelay;
  wire [7 : 0] cpu$dma_server_b_peek, cpu$mv_status;
  wire [6 : 0] cpu$imem_master_b_put_val;
  wire [5 : 0] cpu$mem_master_b_put_val;
  wire [3 : 0] cpu$hart0_put_other_req_put, cpu$set_verbosity_verbosity;
  wire cpu$EN_dma_server_ar_put,
       cpu$EN_dma_server_aw_put,
       cpu$EN_dma_server_b_drop,
       cpu$EN_dma_server_r_drop,
       cpu$EN_dma_server_w_put,
       cpu$EN_hart0_csr_mem_server_request_put,
       cpu$EN_hart0_csr_mem_server_response_get,
       cpu$EN_hart0_fpr_mem_server_request_put,
       cpu$EN_hart0_fpr_mem_server_response_get,
       cpu$EN_hart0_gpr_mem_server_request_put,
       cpu$EN_hart0_gpr_mem_server_response_get,
       cpu$EN_hart0_put_other_req_put,
       cpu$EN_hart0_server_reset_request_put,
       cpu$EN_hart0_server_reset_response_get,
       cpu$EN_hart0_server_run_halt_request_put,
       cpu$EN_hart0_server_run_halt_response_get,
       cpu$EN_imem_master_ar_drop,
       cpu$EN_imem_master_aw_drop,
       cpu$EN_imem_master_b_put,
       cpu$EN_imem_master_r_put,
       cpu$EN_imem_master_w_drop,
       cpu$EN_ma_ddr4_ready,
       cpu$EN_mem_master_ar_drop,
       cpu$EN_mem_master_aw_drop,
       cpu$EN_mem_master_b_put,
       cpu$EN_mem_master_r_put,
       cpu$EN_mem_master_w_drop,
       cpu$EN_set_verbosity,
       cpu$RDY_dma_server_b_drop,
       cpu$RDY_dma_server_b_peek,
       cpu$RDY_dma_server_r_drop,
       cpu$RDY_dma_server_r_peek,
       cpu$RDY_hart0_csr_mem_server_request_put,
       cpu$RDY_hart0_csr_mem_server_response_get,
       cpu$RDY_hart0_fpr_mem_server_request_put,
       cpu$RDY_hart0_fpr_mem_server_response_get,
       cpu$RDY_hart0_gpr_mem_server_request_put,
       cpu$RDY_hart0_gpr_mem_server_response_get,
       cpu$RDY_hart0_server_reset_request_put,
       cpu$RDY_hart0_server_reset_response_get,
       cpu$RDY_hart0_server_run_halt_request_put,
       cpu$RDY_hart0_server_run_halt_response_get,
       cpu$RDY_imem_master_ar_drop,
       cpu$RDY_imem_master_ar_peek,
       cpu$RDY_imem_master_aw_drop,
       cpu$RDY_imem_master_aw_peek,
       cpu$RDY_imem_master_b_put,
       cpu$RDY_imem_master_r_put,
       cpu$RDY_imem_master_w_drop,
       cpu$RDY_imem_master_w_peek,
       cpu$RDY_mem_master_ar_drop,
       cpu$RDY_mem_master_ar_peek,
       cpu$RDY_mem_master_aw_drop,
       cpu$RDY_mem_master_aw_peek,
       cpu$RDY_mem_master_b_put,
       cpu$RDY_mem_master_r_put,
       cpu$RDY_mem_master_w_drop,
       cpu$RDY_mem_master_w_peek,
       cpu$dma_server_ar_canPut,
       cpu$dma_server_aw_canPut,
       cpu$dma_server_b_canPeek,
       cpu$dma_server_r_canPeek,
       cpu$dma_server_w_canPut,
       cpu$hart0_server_reset_request_put,
       cpu$hart0_server_reset_response_get,
       cpu$hart0_server_run_halt_request_put,
       cpu$hart0_server_run_halt_response_get,
       cpu$imem_master_ar_canPeek,
       cpu$imem_master_aw_canPeek,
       cpu$imem_master_b_canPut,
       cpu$imem_master_r_canPut,
       cpu$imem_master_w_canPeek,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$mem_master_ar_canPeek,
       cpu$mem_master_b_canPut,
       cpu$mem_master_r_canPut,
       cpu$nmi_req_set_not_clear,
       cpu$s_external_interrupt_req_set_not_clear,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule debug_module
  wire [96 : 0] debug_module$master_ar_peek, debug_module$master_aw_peek;
  wire [76 : 0] debug_module$hart0_csr_mem_client_request_get;
  wire [73 : 0] debug_module$master_w_peek;
  wire [71 : 0] debug_module$master_r_put_val;
  wire [69 : 0] debug_module$hart0_fpr_mem_client_request_get,
		debug_module$hart0_gpr_mem_client_request_get;
  wire [64 : 0] debug_module$hart0_csr_mem_client_response_put,
		debug_module$hart0_fpr_mem_client_response_put,
		debug_module$hart0_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data, debug_module$dmi_write_dm_word;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire [5 : 0] debug_module$master_b_put_val;
  wire [3 : 0] debug_module$hart0_get_other_req_get;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_client_run_halt_request_get,
       debug_module$EN_hart0_client_run_halt_response_put,
       debug_module$EN_hart0_csr_mem_client_request_get,
       debug_module$EN_hart0_csr_mem_client_response_put,
       debug_module$EN_hart0_fpr_mem_client_request_get,
       debug_module$EN_hart0_fpr_mem_client_response_put,
       debug_module$EN_hart0_get_other_req_get,
       debug_module$EN_hart0_gpr_mem_client_request_get,
       debug_module$EN_hart0_gpr_mem_client_response_put,
       debug_module$EN_hart0_reset_client_request_get,
       debug_module$EN_hart0_reset_client_response_put,
       debug_module$EN_master_ar_drop,
       debug_module$EN_master_aw_drop,
       debug_module$EN_master_b_put,
       debug_module$EN_master_r_put,
       debug_module$EN_master_w_drop,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_client_run_halt_request_get,
       debug_module$RDY_hart0_client_run_halt_response_put,
       debug_module$RDY_hart0_csr_mem_client_request_get,
       debug_module$RDY_hart0_csr_mem_client_response_put,
       debug_module$RDY_hart0_fpr_mem_client_request_get,
       debug_module$RDY_hart0_fpr_mem_client_response_put,
       debug_module$RDY_hart0_get_other_req_get,
       debug_module$RDY_hart0_gpr_mem_client_request_get,
       debug_module$RDY_hart0_gpr_mem_client_response_put,
       debug_module$RDY_hart0_reset_client_request_get,
       debug_module$RDY_hart0_reset_client_response_put,
       debug_module$RDY_master_ar_drop,
       debug_module$RDY_master_ar_peek,
       debug_module$RDY_master_aw_drop,
       debug_module$RDY_master_aw_peek,
       debug_module$RDY_master_b_put,
       debug_module$RDY_master_r_put,
       debug_module$RDY_master_w_drop,
       debug_module$RDY_master_w_peek,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$hart0_client_run_halt_request_get,
       debug_module$hart0_client_run_halt_response_put,
       debug_module$hart0_reset_client_request_get,
       debug_module$hart0_reset_client_response_put,
       debug_module$master_ar_canPeek,
       debug_module$master_b_canPut,
       debug_module$master_r_canPut,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule delay_shim_arff
  wire [97 : 0] delay_shim_arff$D_IN, delay_shim_arff$D_OUT;
  wire delay_shim_arff$CLR,
       delay_shim_arff$DEQ,
       delay_shim_arff$EMPTY_N,
       delay_shim_arff$ENQ,
       delay_shim_arff$FULL_N;

  // ports of submodule delay_shim_awff
  wire [97 : 0] delay_shim_awff$D_IN, delay_shim_awff$D_OUT;
  wire delay_shim_awff$CLR,
       delay_shim_awff$DEQ,
       delay_shim_awff$EMPTY_N,
       delay_shim_awff$ENQ,
       delay_shim_awff$FULL_N;

  // ports of submodule delay_shim_bff
  wire [6 : 0] delay_shim_bff$D_IN, delay_shim_bff$D_OUT;
  wire delay_shim_bff$CLR,
       delay_shim_bff$DEQ,
       delay_shim_bff$EMPTY_N,
       delay_shim_bff$ENQ,
       delay_shim_bff$FULL_N;

  // ports of submodule delay_shim_rff
  wire [72 : 0] delay_shim_rff$D_IN, delay_shim_rff$D_OUT;
  wire delay_shim_rff$CLR,
       delay_shim_rff$DEQ,
       delay_shim_rff$EMPTY_N,
       delay_shim_rff$ENQ,
       delay_shim_rff$FULL_N;

  // ports of submodule delay_shim_wff
  wire [73 : 0] delay_shim_wff$D_IN, delay_shim_wff$D_OUT;
  wire delay_shim_wff$CLR,
       delay_shim_wff$DEQ,
       delay_shim_wff$EMPTY_N,
       delay_shim_wff$ENQ,
       delay_shim_wff$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule merged_0_awff
  wire [96 : 0] merged_0_awff$D_IN, merged_0_awff$D_OUT;
  wire merged_0_awff$CLR,
       merged_0_awff$DEQ,
       merged_0_awff$EMPTY_N,
       merged_0_awff$ENQ,
       merged_0_awff$FULL_N;

  // ports of submodule merged_0_wff
  wire [73 : 0] merged_0_wff$D_IN, merged_0_wff$D_OUT;
  wire merged_0_wff$CLR,
       merged_0_wff$DEQ,
       merged_0_wff$EMPTY_N,
       merged_0_wff$ENQ,
       merged_0_wff$FULL_N;

  // ports of submodule merged_1_awff
  wire [96 : 0] merged_1_awff$D_IN, merged_1_awff$D_OUT;
  wire merged_1_awff$CLR,
       merged_1_awff$DEQ,
       merged_1_awff$EMPTY_N,
       merged_1_awff$ENQ,
       merged_1_awff$FULL_N;

  // ports of submodule merged_1_wff
  wire [73 : 0] merged_1_wff$D_IN, merged_1_wff$D_OUT;
  wire merged_1_wff$CLR,
       merged_1_wff$DEQ,
       merged_1_wff$EMPTY_N,
       merged_1_wff$ENQ,
       merged_1_wff$FULL_N;

  // ports of submodule near_mem_io
  wire [97 : 0] near_mem_io$axi4_slave_ar_put_val,
		near_mem_io$axi4_slave_aw_put_val;
  wire [72 : 0] near_mem_io$axi4_slave_w_put_val;
  wire [71 : 0] near_mem_io$axi4_slave_r_peek;
  wire [63 : 0] near_mem_io$set_addr_map_addr_base,
		near_mem_io$set_addr_map_addr_lim;
  wire [6 : 0] near_mem_io$axi4_slave_b_peek;
  wire near_mem_io$EN_axi4_slave_ar_put,
       near_mem_io$EN_axi4_slave_aw_put,
       near_mem_io$EN_axi4_slave_b_drop,
       near_mem_io$EN_axi4_slave_r_drop,
       near_mem_io$EN_axi4_slave_w_put,
       near_mem_io$EN_get_sw_interrupt_req_get,
       near_mem_io$EN_get_timer_interrupt_req_get,
       near_mem_io$EN_server_reset_request_put,
       near_mem_io$EN_server_reset_response_get,
       near_mem_io$EN_set_addr_map,
       near_mem_io$RDY_axi4_slave_ar_put,
       near_mem_io$RDY_axi4_slave_aw_put,
       near_mem_io$RDY_axi4_slave_b_drop,
       near_mem_io$RDY_axi4_slave_b_peek,
       near_mem_io$RDY_axi4_slave_r_drop,
       near_mem_io$RDY_axi4_slave_r_peek,
       near_mem_io$RDY_axi4_slave_w_put,
       near_mem_io$RDY_get_sw_interrupt_req_get,
       near_mem_io$RDY_get_timer_interrupt_req_get,
       near_mem_io$RDY_server_reset_request_put,
       near_mem_io$RDY_server_reset_response_get,
       near_mem_io$axi4_slave_ar_canPut,
       near_mem_io$axi4_slave_aw_canPut,
       near_mem_io$axi4_slave_b_canPeek,
       near_mem_io$axi4_slave_r_canPeek,
       near_mem_io$axi4_slave_w_canPut,
       near_mem_io$get_sw_interrupt_req_get,
       near_mem_io$get_timer_interrupt_req_get;

  // ports of submodule plic
  wire [97 : 0] plic$axi4_slave_ar_put_val, plic$axi4_slave_aw_put_val;
  wire [72 : 0] plic$axi4_slave_w_put_val;
  wire [71 : 0] plic$axi4_slave_r_peek;
  wire [63 : 0] plic$set_addr_map_addr_base, plic$set_addr_map_addr_lim;
  wire [6 : 0] plic$axi4_slave_b_peek;
  wire [3 : 0] plic$set_verbosity_verbosity;
  wire plic$EN_axi4_slave_ar_put,
       plic$EN_axi4_slave_aw_put,
       plic$EN_axi4_slave_b_drop,
       plic$EN_axi4_slave_r_drop,
       plic$EN_axi4_slave_w_put,
       plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$RDY_axi4_slave_ar_put,
       plic$RDY_axi4_slave_aw_put,
       plic$RDY_axi4_slave_b_drop,
       plic$RDY_axi4_slave_b_peek,
       plic$RDY_axi4_slave_r_drop,
       plic$RDY_axi4_slave_r_peek,
       plic$RDY_axi4_slave_w_put,
       plic$RDY_server_reset_request_put,
       plic$RDY_server_reset_response_get,
       plic$axi4_slave_ar_canPut,
       plic$axi4_slave_aw_canPut,
       plic$axi4_slave_b_canPeek,
       plic$axi4_slave_r_canPeek,
       plic$axi4_slave_w_canPut,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_near_mem_io_addr_range, soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_arbitration_fail,
       CAN_FIRE_RL_arbitration_fail_1,
       CAN_FIRE_RL_arbitration_fail_10,
       CAN_FIRE_RL_arbitration_fail_11,
       CAN_FIRE_RL_arbitration_fail_2,
       CAN_FIRE_RL_arbitration_fail_3,
       CAN_FIRE_RL_arbitration_fail_4,
       CAN_FIRE_RL_arbitration_fail_5,
       CAN_FIRE_RL_arbitration_fail_6,
       CAN_FIRE_RL_arbitration_fail_7,
       CAN_FIRE_RL_arbitration_fail_8,
       CAN_FIRE_RL_arbitration_fail_9,
       CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead,
       CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite,
       CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_2,
       CAN_FIRE_RL_connect_3,
       CAN_FIRE_RL_connect_4,
       CAN_FIRE_RL_dflt_output_selected,
       CAN_FIRE_RL_dflt_output_selected_1,
       CAN_FIRE_RL_input_first_flit,
       CAN_FIRE_RL_input_first_flit_1,
       CAN_FIRE_RL_input_first_flit_10,
       CAN_FIRE_RL_input_first_flit_11,
       CAN_FIRE_RL_input_first_flit_2,
       CAN_FIRE_RL_input_first_flit_3,
       CAN_FIRE_RL_input_first_flit_4,
       CAN_FIRE_RL_input_first_flit_5,
       CAN_FIRE_RL_input_first_flit_6,
       CAN_FIRE_RL_input_first_flit_7,
       CAN_FIRE_RL_input_first_flit_8,
       CAN_FIRE_RL_input_first_flit_9,
       CAN_FIRE_RL_input_follow_flit,
       CAN_FIRE_RL_input_follow_flit_1,
       CAN_FIRE_RL_input_follow_flit_10,
       CAN_FIRE_RL_input_follow_flit_11,
       CAN_FIRE_RL_input_follow_flit_2,
       CAN_FIRE_RL_input_follow_flit_3,
       CAN_FIRE_RL_input_follow_flit_4,
       CAN_FIRE_RL_input_follow_flit_5,
       CAN_FIRE_RL_input_follow_flit_6,
       CAN_FIRE_RL_input_follow_flit_7,
       CAN_FIRE_RL_input_follow_flit_8,
       CAN_FIRE_RL_input_follow_flit_9,
       CAN_FIRE_RL_legal_destination_fail_10,
       CAN_FIRE_RL_legal_destination_fail_11,
       CAN_FIRE_RL_legal_destination_fail_2,
       CAN_FIRE_RL_legal_destination_fail_3,
       CAN_FIRE_RL_legal_destination_fail_4,
       CAN_FIRE_RL_legal_destination_fail_5,
       CAN_FIRE_RL_legal_destination_fail_8,
       CAN_FIRE_RL_legal_destination_fail_9,
       CAN_FIRE_RL_merged_0_awFlit,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_0_passFlit,
       CAN_FIRE_RL_merged_0_wFlit,
       CAN_FIRE_RL_merged_1_awFlit,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_merged_1_passFlit,
       CAN_FIRE_RL_merged_1_wFlit,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_output_selected,
       CAN_FIRE_RL_output_selected_1,
       CAN_FIRE_RL_output_selected_2,
       CAN_FIRE_RL_output_selected_3,
       CAN_FIRE_RL_output_selected_4,
       CAN_FIRE_RL_output_selected_5,
       CAN_FIRE_RL_output_selected_6,
       CAN_FIRE_RL_output_selected_7,
       CAN_FIRE_RL_output_selected_8,
       CAN_FIRE_RL_output_selected_9,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_set_dflt_output_canPut_wire_1,
       CAN_FIRE_RL_set_input_canPeek_wire,
       CAN_FIRE_RL_set_input_canPeek_wire_1,
       CAN_FIRE_RL_set_input_canPeek_wire_10,
       CAN_FIRE_RL_set_input_canPeek_wire_11,
       CAN_FIRE_RL_set_input_canPeek_wire_2,
       CAN_FIRE_RL_set_input_canPeek_wire_3,
       CAN_FIRE_RL_set_input_canPeek_wire_4,
       CAN_FIRE_RL_set_input_canPeek_wire_5,
       CAN_FIRE_RL_set_input_canPeek_wire_6,
       CAN_FIRE_RL_set_input_canPeek_wire_7,
       CAN_FIRE_RL_set_input_canPeek_wire_8,
       CAN_FIRE_RL_set_input_canPeek_wire_9,
       CAN_FIRE_RL_set_input_peek_wires,
       CAN_FIRE_RL_set_input_peek_wires_1,
       CAN_FIRE_RL_set_input_peek_wires_10,
       CAN_FIRE_RL_set_input_peek_wires_11,
       CAN_FIRE_RL_set_input_peek_wires_2,
       CAN_FIRE_RL_set_input_peek_wires_3,
       CAN_FIRE_RL_set_input_peek_wires_4,
       CAN_FIRE_RL_set_input_peek_wires_5,
       CAN_FIRE_RL_set_input_peek_wires_6,
       CAN_FIRE_RL_set_input_peek_wires_7,
       CAN_FIRE_RL_set_input_peek_wires_8,
       CAN_FIRE_RL_set_input_peek_wires_9,
       CAN_FIRE_RL_set_output_canPut_wire,
       CAN_FIRE_RL_set_output_canPut_wire_1,
       CAN_FIRE_RL_set_output_canPut_wire_2,
       CAN_FIRE_RL_set_output_canPut_wire_3,
       CAN_FIRE_RL_set_output_canPut_wire_4,
       CAN_FIRE_RL_set_output_canPut_wire_5,
       CAN_FIRE_RL_set_output_canPut_wire_6,
       CAN_FIRE_RL_set_output_canPut_wire_7,
       CAN_FIRE_RL_set_output_canPut_wire_8,
       CAN_FIRE_RL_set_output_canPut_wire_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_ug_snk_1_doPut,
       CAN_FIRE_RL_ug_snk_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_doPut,
       CAN_FIRE_RL_ug_snk_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_doPut,
       CAN_FIRE_RL_ug_snk_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_4_doPut,
       CAN_FIRE_RL_ug_snk_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_doPut,
       CAN_FIRE_RL_ug_snk_warnDoPut,
       CAN_FIRE_RL_ug_src_1_doDrop,
       CAN_FIRE_RL_ug_src_1_setPeek,
       CAN_FIRE_RL_ug_src_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_doDrop,
       CAN_FIRE_RL_ug_src_2_setPeek,
       CAN_FIRE_RL_ug_src_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_doDrop,
       CAN_FIRE_RL_ug_src_3_setPeek,
       CAN_FIRE_RL_ug_src_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_4_doDrop,
       CAN_FIRE_RL_ug_src_4_setPeek,
       CAN_FIRE_RL_ug_src_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_doDrop,
       CAN_FIRE_RL_ug_src_setPeek,
       CAN_FIRE_RL_ug_src_warnDoDrop,
       CAN_FIRE___me_check_104,
       CAN_FIRE___me_check_106,
       CAN_FIRE___me_check_108,
       CAN_FIRE___me_check_110,
       CAN_FIRE___me_check_112,
       CAN_FIRE___me_check_125,
       CAN_FIRE___me_check_127,
       CAN_FIRE___me_check_129,
       CAN_FIRE___me_check_152,
       CAN_FIRE___me_check_154,
       CAN_FIRE___me_check_156,
       CAN_FIRE___me_check_158,
       CAN_FIRE___me_check_160,
       CAN_FIRE___me_check_77,
       CAN_FIRE___me_check_79,
       CAN_FIRE___me_check_81,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_core_mem_master_ar_drop,
       CAN_FIRE_core_mem_master_aw_drop,
       CAN_FIRE_core_mem_master_b_put,
       CAN_FIRE_core_mem_master_r_put,
       CAN_FIRE_core_mem_master_w_drop,
       CAN_FIRE_cpu_imem_master_ar_drop,
       CAN_FIRE_cpu_imem_master_aw_drop,
       CAN_FIRE_cpu_imem_master_b_put,
       CAN_FIRE_cpu_imem_master_r_put,
       CAN_FIRE_cpu_imem_master_w_drop,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dm_dmi_read_addr,
       CAN_FIRE_dm_dmi_read_data,
       CAN_FIRE_dm_dmi_write,
       CAN_FIRE_dma_server_ar_put,
       CAN_FIRE_dma_server_aw_put,
       CAN_FIRE_dma_server_b_drop,
       CAN_FIRE_dma_server_r_drop,
       CAN_FIRE_dma_server_w_put,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_ndm_reset_client_request_get,
       CAN_FIRE_ndm_reset_client_response_put,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_arbitration_fail,
       WILL_FIRE_RL_arbitration_fail_1,
       WILL_FIRE_RL_arbitration_fail_10,
       WILL_FIRE_RL_arbitration_fail_11,
       WILL_FIRE_RL_arbitration_fail_2,
       WILL_FIRE_RL_arbitration_fail_3,
       WILL_FIRE_RL_arbitration_fail_4,
       WILL_FIRE_RL_arbitration_fail_5,
       WILL_FIRE_RL_arbitration_fail_6,
       WILL_FIRE_RL_arbitration_fail_7,
       WILL_FIRE_RL_arbitration_fail_8,
       WILL_FIRE_RL_arbitration_fail_9,
       WILL_FIRE_RL_axi4_mem_shim_tmp_getCacheAW,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead,
       WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite,
       WILL_FIRE_RL_axi4_mem_shim_tmp_propagateReset,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_2,
       WILL_FIRE_RL_connect_3,
       WILL_FIRE_RL_connect_4,
       WILL_FIRE_RL_dflt_output_selected,
       WILL_FIRE_RL_dflt_output_selected_1,
       WILL_FIRE_RL_input_first_flit,
       WILL_FIRE_RL_input_first_flit_1,
       WILL_FIRE_RL_input_first_flit_10,
       WILL_FIRE_RL_input_first_flit_11,
       WILL_FIRE_RL_input_first_flit_2,
       WILL_FIRE_RL_input_first_flit_3,
       WILL_FIRE_RL_input_first_flit_4,
       WILL_FIRE_RL_input_first_flit_5,
       WILL_FIRE_RL_input_first_flit_6,
       WILL_FIRE_RL_input_first_flit_7,
       WILL_FIRE_RL_input_first_flit_8,
       WILL_FIRE_RL_input_first_flit_9,
       WILL_FIRE_RL_input_follow_flit,
       WILL_FIRE_RL_input_follow_flit_1,
       WILL_FIRE_RL_input_follow_flit_10,
       WILL_FIRE_RL_input_follow_flit_11,
       WILL_FIRE_RL_input_follow_flit_2,
       WILL_FIRE_RL_input_follow_flit_3,
       WILL_FIRE_RL_input_follow_flit_4,
       WILL_FIRE_RL_input_follow_flit_5,
       WILL_FIRE_RL_input_follow_flit_6,
       WILL_FIRE_RL_input_follow_flit_7,
       WILL_FIRE_RL_input_follow_flit_8,
       WILL_FIRE_RL_input_follow_flit_9,
       WILL_FIRE_RL_legal_destination_fail_10,
       WILL_FIRE_RL_legal_destination_fail_11,
       WILL_FIRE_RL_legal_destination_fail_2,
       WILL_FIRE_RL_legal_destination_fail_3,
       WILL_FIRE_RL_legal_destination_fail_4,
       WILL_FIRE_RL_legal_destination_fail_5,
       WILL_FIRE_RL_legal_destination_fail_8,
       WILL_FIRE_RL_legal_destination_fail_9,
       WILL_FIRE_RL_merged_0_awFlit,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_0_passFlit,
       WILL_FIRE_RL_merged_0_wFlit,
       WILL_FIRE_RL_merged_1_awFlit,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_merged_1_passFlit,
       WILL_FIRE_RL_merged_1_wFlit,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_output_selected,
       WILL_FIRE_RL_output_selected_1,
       WILL_FIRE_RL_output_selected_2,
       WILL_FIRE_RL_output_selected_3,
       WILL_FIRE_RL_output_selected_4,
       WILL_FIRE_RL_output_selected_5,
       WILL_FIRE_RL_output_selected_6,
       WILL_FIRE_RL_output_selected_7,
       WILL_FIRE_RL_output_selected_8,
       WILL_FIRE_RL_output_selected_9,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_set_dflt_output_canPut_wire_1,
       WILL_FIRE_RL_set_input_canPeek_wire,
       WILL_FIRE_RL_set_input_canPeek_wire_1,
       WILL_FIRE_RL_set_input_canPeek_wire_10,
       WILL_FIRE_RL_set_input_canPeek_wire_11,
       WILL_FIRE_RL_set_input_canPeek_wire_2,
       WILL_FIRE_RL_set_input_canPeek_wire_3,
       WILL_FIRE_RL_set_input_canPeek_wire_4,
       WILL_FIRE_RL_set_input_canPeek_wire_5,
       WILL_FIRE_RL_set_input_canPeek_wire_6,
       WILL_FIRE_RL_set_input_canPeek_wire_7,
       WILL_FIRE_RL_set_input_canPeek_wire_8,
       WILL_FIRE_RL_set_input_canPeek_wire_9,
       WILL_FIRE_RL_set_input_peek_wires,
       WILL_FIRE_RL_set_input_peek_wires_1,
       WILL_FIRE_RL_set_input_peek_wires_10,
       WILL_FIRE_RL_set_input_peek_wires_11,
       WILL_FIRE_RL_set_input_peek_wires_2,
       WILL_FIRE_RL_set_input_peek_wires_3,
       WILL_FIRE_RL_set_input_peek_wires_4,
       WILL_FIRE_RL_set_input_peek_wires_5,
       WILL_FIRE_RL_set_input_peek_wires_6,
       WILL_FIRE_RL_set_input_peek_wires_7,
       WILL_FIRE_RL_set_input_peek_wires_8,
       WILL_FIRE_RL_set_input_peek_wires_9,
       WILL_FIRE_RL_set_output_canPut_wire,
       WILL_FIRE_RL_set_output_canPut_wire_1,
       WILL_FIRE_RL_set_output_canPut_wire_2,
       WILL_FIRE_RL_set_output_canPut_wire_3,
       WILL_FIRE_RL_set_output_canPut_wire_4,
       WILL_FIRE_RL_set_output_canPut_wire_5,
       WILL_FIRE_RL_set_output_canPut_wire_6,
       WILL_FIRE_RL_set_output_canPut_wire_7,
       WILL_FIRE_RL_set_output_canPut_wire_8,
       WILL_FIRE_RL_set_output_canPut_wire_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_ug_snk_1_doPut,
       WILL_FIRE_RL_ug_snk_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_doPut,
       WILL_FIRE_RL_ug_snk_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_doPut,
       WILL_FIRE_RL_ug_snk_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_4_doPut,
       WILL_FIRE_RL_ug_snk_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_doPut,
       WILL_FIRE_RL_ug_snk_warnDoPut,
       WILL_FIRE_RL_ug_src_1_doDrop,
       WILL_FIRE_RL_ug_src_1_setPeek,
       WILL_FIRE_RL_ug_src_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_doDrop,
       WILL_FIRE_RL_ug_src_2_setPeek,
       WILL_FIRE_RL_ug_src_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_doDrop,
       WILL_FIRE_RL_ug_src_3_setPeek,
       WILL_FIRE_RL_ug_src_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_4_doDrop,
       WILL_FIRE_RL_ug_src_4_setPeek,
       WILL_FIRE_RL_ug_src_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_doDrop,
       WILL_FIRE_RL_ug_src_setPeek,
       WILL_FIRE_RL_ug_src_warnDoDrop,
       WILL_FIRE___me_check_104,
       WILL_FIRE___me_check_106,
       WILL_FIRE___me_check_108,
       WILL_FIRE___me_check_110,
       WILL_FIRE___me_check_112,
       WILL_FIRE___me_check_125,
       WILL_FIRE___me_check_127,
       WILL_FIRE___me_check_129,
       WILL_FIRE___me_check_152,
       WILL_FIRE___me_check_154,
       WILL_FIRE___me_check_156,
       WILL_FIRE___me_check_158,
       WILL_FIRE___me_check_160,
       WILL_FIRE___me_check_77,
       WILL_FIRE___me_check_79,
       WILL_FIRE___me_check_81,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_core_mem_master_ar_drop,
       WILL_FIRE_core_mem_master_aw_drop,
       WILL_FIRE_core_mem_master_b_put,
       WILL_FIRE_core_mem_master_r_put,
       WILL_FIRE_core_mem_master_w_drop,
       WILL_FIRE_cpu_imem_master_ar_drop,
       WILL_FIRE_cpu_imem_master_aw_drop,
       WILL_FIRE_cpu_imem_master_b_put,
       WILL_FIRE_cpu_imem_master_r_put,
       WILL_FIRE_cpu_imem_master_w_drop,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dm_dmi_read_addr,
       WILL_FIRE_dm_dmi_read_data,
       WILL_FIRE_dm_dmi_write,
       WILL_FIRE_dma_server_ar_put,
       WILL_FIRE_dma_server_aw_put,
       WILL_FIRE_dma_server_b_drop,
       WILL_FIRE_dma_server_r_drop,
       WILL_FIRE_dma_server_w_put,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_ndm_reset_client_request_get,
       WILL_FIRE_ndm_reset_client_response_put,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity;

  // inputs to muxes for submodule ports
  wire [172 : 0] MUX_toDfltOutput$wset_1__VAL_1,
		 MUX_toDfltOutput$wset_1__VAL_2;
  wire [140 : 0] MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1,
		 MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2;
  wire [97 : 0] MUX_toDfltOutput_1_1$wset_1__VAL_1,
		MUX_toDfltOutput_1_1$wset_1__VAL_2;
  wire [76 : 0] MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1,
		MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2;
  wire [74 : 0] MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1;
  wire [72 : 0] MUX_toDfltOutput_1_2$wset_1__VAL_1,
		MUX_toDfltOutput_1_2$wset_1__VAL_2,
		MUX_toDfltOutput_1_2$wset_1__VAL_3,
		MUX_toDfltOutput_1_2$wset_1__VAL_4;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_2,
	       MUX_merged_1_flitLeft$write_1__VAL_2,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire [6 : 0] MUX_moreFlits_1_2$write_1__VAL_1,
	       MUX_moreFlits_1_2$write_1__VAL_2,
	       MUX_moreFlits_1_2$write_1__VAL_3,
	       MUX_moreFlits_1_2$write_1__VAL_5,
	       MUX_moreFlits_1_2$write_1__VAL_7,
	       MUX_toDfltOutput_1$wset_1__VAL_1,
	       MUX_toDfltOutput_1$wset_1__VAL_2,
	       MUX_toDfltOutput_1$wset_1__VAL_3,
	       MUX_toDfltOutput_1$wset_1__VAL_4;
  wire [5 : 0] MUX_moreFlits$write_1__VAL_1,
	       MUX_moreFlits$write_1__VAL_2,
	       MUX_moreFlits$write_1__VAL_3;
  wire MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1,
       MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2,
       MUX_moreFlits$write_1__SEL_1,
       MUX_moreFlits$write_1__SEL_2,
       MUX_moreFlits$write_1__SEL_3,
       MUX_moreFlits$write_1__SEL_4,
       MUX_moreFlits_1_2$write_1__SEL_1,
       MUX_moreFlits_1_2$write_1__SEL_2,
       MUX_moreFlits_1_2$write_1__SEL_3,
       MUX_moreFlits_1_2$write_1__SEL_4,
       MUX_moreFlits_1_2$write_1__SEL_5,
       MUX_moreFlits_1_2$write_1__SEL_6,
       MUX_moreFlits_1_2$write_1__SEL_7,
       MUX_moreFlits_1_2$write_1__SEL_8,
       MUX_near_mem_io$axi4_slave_w_put_1__SEL_1,
       MUX_near_mem_io$axi4_slave_w_put_1__SEL_2,
       MUX_plic$axi4_slave_w_put_1__SEL_1,
       MUX_plic$axi4_slave_w_put_1__SEL_2,
       MUX_toDfltOutput$wset_1__SEL_1,
       MUX_toDfltOutput$wset_1__SEL_2,
       MUX_toDfltOutput$wset_1__SEL_3,
       MUX_toDfltOutput$wset_1__SEL_4,
       MUX_toDfltOutput_1_1$wset_1__SEL_1,
       MUX_toDfltOutput_1_1$wset_1__SEL_2,
       MUX_toDfltOutput_1_1$wset_1__SEL_3,
       MUX_toDfltOutput_1_1$wset_1__SEL_4,
       MUX_toOutput_0$wset_1__SEL_1,
       MUX_toOutput_0$wset_1__SEL_2,
       MUX_toOutput_0$wset_1__SEL_3,
       MUX_toOutput_0$wset_1__SEL_4,
       MUX_toOutput_0_1$wset_1__SEL_1,
       MUX_toOutput_0_1$wset_1__SEL_2,
       MUX_toOutput_0_1$wset_1__SEL_3,
       MUX_toOutput_0_1$wset_1__SEL_4,
       MUX_toOutput_0_1$wset_1__SEL_5,
       MUX_toOutput_0_1$wset_1__SEL_6,
       MUX_toOutput_0_1$wset_1__SEL_7,
       MUX_toOutput_0_1$wset_1__SEL_8,
       MUX_toOutput_1$wset_1__SEL_1,
       MUX_toOutput_1$wset_1__SEL_2,
       MUX_toOutput_1$wset_1__SEL_3,
       MUX_toOutput_1$wset_1__SEL_4,
       MUX_toOutput_1_0$wset_1__SEL_1,
       MUX_toOutput_1_0$wset_1__SEL_2,
       MUX_toOutput_1_0$wset_1__SEL_3,
       MUX_toOutput_1_0$wset_1__SEL_4,
       MUX_toOutput_1_0_1$wset_1__SEL_1,
       MUX_toOutput_1_0_1$wset_1__SEL_2,
       MUX_toOutput_1_0_1$wset_1__SEL_3,
       MUX_toOutput_1_0_1$wset_1__SEL_4,
       MUX_toOutput_1_0_1$wset_1__SEL_5,
       MUX_toOutput_1_0_1$wset_1__SEL_6,
       MUX_toOutput_1_0_1$wset_1__SEL_7,
       MUX_toOutput_1_0_1$wset_1__SEL_8,
       MUX_toOutput_1_1$wset_1__SEL_1,
       MUX_toOutput_1_1$wset_1__SEL_2,
       MUX_toOutput_1_1$wset_1__SEL_3,
       MUX_toOutput_1_1$wset_1__SEL_4,
       MUX_toOutput_1_1$wset_1__SEL_5,
       MUX_toOutput_1_1$wset_1__SEL_6,
       MUX_toOutput_1_1$wset_1__SEL_7,
       MUX_toOutput_1_1$wset_1__SEL_8,
       MUX_toOutput_1_1_1$wset_1__SEL_1,
       MUX_toOutput_1_1_1$wset_1__SEL_2,
       MUX_toOutput_1_1_1$wset_1__SEL_3,
       MUX_toOutput_1_1_1$wset_1__SEL_4,
       MUX_toOutput_1_1_2$wset_1__SEL_1,
       MUX_toOutput_1_1_2$wset_1__SEL_2,
       MUX_toOutput_1_1_2$wset_1__SEL_3,
       MUX_toOutput_1_1_2$wset_1__SEL_4,
       MUX_toOutput_1_1_2$wset_1__SEL_5,
       MUX_toOutput_1_1_2$wset_1__SEL_6,
       MUX_toOutput_1_1_2$wset_1__SEL_7,
       MUX_toOutput_1_1_2$wset_1__SEL_8,
       MUX_toOutput_1_2$wset_1__SEL_1,
       MUX_toOutput_1_2$wset_1__SEL_2,
       MUX_toOutput_1_2$wset_1__SEL_3,
       MUX_toOutput_1_2$wset_1__SEL_4,
       MUX_toOutput_2$wset_1__SEL_1,
       MUX_toOutput_2$wset_1__SEL_2,
       MUX_toOutput_2$wset_1__SEL_3,
       MUX_toOutput_2$wset_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h76251;
  reg [63 : 0] v__h76652;
  reg [63 : 0] v__h94892;
  reg [63 : 0] v__h95133;
  reg [63 : 0] v__h95422;
  reg [63 : 0] v__h95663;
  reg [63 : 0] v__h95952;
  reg [63 : 0] v__h96193;
  reg [63 : 0] v__h96482;
  reg [63 : 0] v__h96723;
  reg [63 : 0] v__h33411;
  reg [63 : 0] v__h33814;
  reg [31 : 0] v__h17328;
  reg [31 : 0] v__h17506;
  reg [31 : 0] v__h17872;
  reg [63 : 0] v__h56960;
  reg [63 : 0] v__h57201;
  reg [63 : 0] v__h57490;
  reg [63 : 0] v__h57731;
  reg [63 : 0] v__h58020;
  reg [63 : 0] v__h58261;
  reg [63 : 0] v__h58550;
  reg [63 : 0] v__h58791;
  reg [31 : 0] v__h17322;
  reg [31 : 0] v__h17500;
  reg [31 : 0] v__h17866;
  // synopsys translate_on

  // remaining internal signals
  wire [170 : 0] IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d557,
		 IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d600;
  wire [63 : 0] addr__h26801,
		addr__h27693,
		aw_awaddr__h10330,
		tmp__h10172,
		tmp__h7954,
		v_araddr__h15184,
		x__h26860,
		x__h26885,
		x__h27750,
		x__h27775,
		x__h69731,
		x__h69756,
		x__h70549,
		x__h70574,
		x__h7797;
  wire [39 : 0] x__h10362;
  wire [8 : 0] x__h97108;
  wire [7 : 0] arlen__h15168, v_arlen__h15185;
  wire [5 : 0] v_arid__h15183;
  wire [3 : 0] _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237,
	       arcache__h15172,
	       x__h10405,
	       x__h12139,
	       x__h12151,
	       x__h12163,
	       x__h12175,
	       x__h12187,
	       x__h12199,
	       x__h12211,
	       x__h13735,
	       x__h15248,
	       y__h12140,
	       y__h12152,
	       y__h12164,
	       y__h12176,
	       y__h12188,
	       y__h12200,
	       y__h12212;
  wire [2 : 0] aw_awsize_val__h12069, v_arsize_val__h15230;
  wire [1 : 0] SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21,
	       SEXT_SEXT_arbiter_1_firstHot_402_403_BIT_0_404_ETC__q15,
	       SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9,
	       SEXT_SEXT_arbiter_firstHot_25_26_BIT_0_27_AND__ETC__q3,
	       SEXT_arbiter_1_firstHot_1__q17,
	       SEXT_arbiter_1_firstHot__q13,
	       SEXT_arbiter_1_lastSelect_1_1__q19,
	       SEXT_arbiter_1_lastSelect_1__q18,
	       SEXT_arbiter_1_lastSelect_2__q20,
	       SEXT_arbiter_1_lastSelect__q14,
	       SEXT_arbiter_firstHot_1__q5,
	       SEXT_arbiter_firstHot__q1,
	       SEXT_arbiter_lastSelect_1_1__q7,
	       SEXT_arbiter_lastSelect_1__q6,
	       SEXT_arbiter_lastSelect_2__q8,
	       SEXT_arbiter_lastSelect__q2,
	       SEXT_x2702__q4,
	       SEXT_x3227__q22,
	       SEXT_x3264__q23,
	       SEXT_x3299__q24,
	       SEXT_x5295__q10,
	       SEXT_x5332__q11,
	       SEXT_x5367__q12,
	       SEXT_x5542__q16;
  wire IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950,
       IF_IF_inputDest_0_whas__43_THEN_NOT_inputDest__ETC___d683,
       IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584,
       IF_IF_inputDest_1_0_whas__320_THEN_NOT_inputDe_ETC___d1360,
       IF_IF_inputDest_1_1_1_whas__366_THEN_NOT_input_ETC___d1390,
       IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599,
       IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965,
       IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615,
       IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630,
       IF_IF_inputDest_1_whas__89_THEN_NOT_inputDest__ETC___d713,
       IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981,
       IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996,
       IF_NOT_moreFlits_17_BIT_0_97_08_OR_NOT_outputC_ETC___d814,
       IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191,
       IF_NOT_moreFlits_1_1_394_BIT_0_456_467_OR_NOT__ETC___d1473,
       IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829,
       IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d563,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d565,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d568,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d571,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d574,
       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d581,
       IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d606,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d608,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d611,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d614,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d617,
       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d624,
       IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626,
       IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630,
       IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634,
       NOT_IF_IF_inputDest_0_whas__43_THEN_inputDest__ETC___d661,
       NOT_IF_IF_inputDest_1_0_whas__320_THEN_inputDe_ETC___d1338,
       NOT_IF_IF_inputDest_1_1_1_whas__366_THEN_input_ETC___d1381,
       NOT_IF_IF_inputDest_1_whas__89_THEN_inputDest__ETC___d704,
       NOT_IF_moreFlits_17_BIT_0_97_THEN_1_ELSE_0_98__ETC___d807,
       NOT_IF_moreFlits_1_1_394_BIT_0_456_THEN_1_ELSE_ETC___d1466,
       NOT_SEXT_arbiter_1_lastSelect_1_638_639_BIT_0__ETC___d1684,
       NOT_SEXT_arbiter_lastSelect_1_004_005_BIT_0_00_ETC___d1050,
       SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680,
       SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410,
       SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664,
       SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1656,
       SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687,
       SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672,
       SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406,
       SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046,
       SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733,
       SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1022,
       SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053,
       SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030,
       SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729,
       SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038,
       cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1263,
       cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1265,
       cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1268,
       cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1271,
       cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1274,
       cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1281,
       debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1290,
       debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1292,
       debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1295,
       debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1298,
       debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1301,
       debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1308,
       inputCanPeek_0_whas__40_AND_inputCanPeek_0_wge_ETC___d716,
       inputCanPeek_1_0_whas__317_AND_inputCanPeek_1__ETC___d1393,
       plic_RDY_server_reset_request_put__93_AND_cpu__ETC___d299,
       split_0_doPut_whas__47_AND_split_0_doPut_wget__ETC___d458,
       split_1_doPut_whas__82_AND_split_1_doPut_wget__ETC___d489,
       split_2_doPut_whas__11_AND_split_2_doPut_wget__ETC___d518,
       x__h32175,
       x__h32278,
       x__h32643,
       x__h32702,
       x__h32784,
       x__h54094,
       x__h54096,
       x__h54168,
       x__h54294,
       x__h54296,
       x__h54356,
       x__h54470,
       x__h54472,
       x__h54532,
       x__h54646,
       x__h54648,
       x__h54708,
       x__h55232,
       x__h55234,
       x__h55295,
       x__h55303,
       x__h55332,
       x__h55367,
       x__h55471,
       x__h55473,
       x__h55533,
       x__h55691,
       x__h55693,
       x__h55753,
       x__h55917,
       x__h55919,
       x__h55979,
       x__h75015,
       x__h75118,
       x__h75483,
       x__h75542,
       x__h75624,
       x__h92026,
       x__h92028,
       x__h92100,
       x__h92226,
       x__h92228,
       x__h92288,
       x__h92402,
       x__h92404,
       x__h92464,
       x__h92578,
       x__h92580,
       x__h92640,
       x__h93164,
       x__h93166,
       x__h93227,
       x__h93235,
       x__h93264,
       x__h93299,
       x__h93403,
       x__h93405,
       x__h93465,
       x__h93623,
       x__h93625,
       x__h93685,
       x__h93849,
       x__h93851,
       x__h93911,
       y__h32176,
       y__h32279,
       y__h32644,
       y__h32785,
       y__h54095,
       y__h54097,
       y__h54169,
       y__h54295,
       y__h54297,
       y__h54357,
       y__h54471,
       y__h54473,
       y__h54533,
       y__h54647,
       y__h54649,
       y__h54709,
       y__h55233,
       y__h55235,
       y__h55304,
       y__h55472,
       y__h55474,
       y__h55534,
       y__h55692,
       y__h55694,
       y__h55754,
       y__h55918,
       y__h55920,
       y__h55980,
       y__h75016,
       y__h75119,
       y__h75484,
       y__h75625,
       y__h92027,
       y__h92029,
       y__h92101,
       y__h92227,
       y__h92229,
       y__h92289,
       y__h92403,
       y__h92405,
       y__h92465,
       y__h92579,
       y__h92581,
       y__h92641,
       y__h93165,
       y__h93167,
       y__h93236,
       y__h93404,
       y__h93406,
       y__h93466,
       y__h93624,
       y__h93626,
       y__h93686,
       y__h93850,
       y__h93852,
       y__h93912;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_canPeek
  assign cpu_imem_master_aw_canPeek = delay_shim_awff$EMPTY_N ;

  // value method cpu_imem_master_aw_peek
  assign cpu_imem_master_aw_peek = delay_shim_awff$D_OUT ;
  assign RDY_cpu_imem_master_aw_peek = delay_shim_awff$EMPTY_N ;

  // action method cpu_imem_master_aw_drop
  assign RDY_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_aw_drop = delay_shim_awff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_aw_drop = EN_cpu_imem_master_aw_drop ;

  // value method cpu_imem_master_w_canPeek
  assign cpu_imem_master_w_canPeek = delay_shim_wff$EMPTY_N ;

  // value method cpu_imem_master_w_peek
  assign cpu_imem_master_w_peek = delay_shim_wff$D_OUT[73:1] ;
  assign RDY_cpu_imem_master_w_peek = delay_shim_wff$EMPTY_N ;

  // action method cpu_imem_master_w_drop
  assign RDY_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_w_drop = delay_shim_wff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_w_drop = EN_cpu_imem_master_w_drop ;

  // value method cpu_imem_master_b_canPut
  assign cpu_imem_master_b_canPut = delay_shim_bff$FULL_N ;

  // action method cpu_imem_master_b_put
  assign RDY_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_b_put = delay_shim_bff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_b_put = EN_cpu_imem_master_b_put ;

  // value method cpu_imem_master_ar_canPeek
  assign cpu_imem_master_ar_canPeek = delay_shim_arff$EMPTY_N ;

  // value method cpu_imem_master_ar_peek
  assign cpu_imem_master_ar_peek = delay_shim_arff$D_OUT ;
  assign RDY_cpu_imem_master_ar_peek = delay_shim_arff$EMPTY_N ;

  // action method cpu_imem_master_ar_drop
  assign RDY_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign CAN_FIRE_cpu_imem_master_ar_drop = delay_shim_arff$EMPTY_N ;
  assign WILL_FIRE_cpu_imem_master_ar_drop = EN_cpu_imem_master_ar_drop ;

  // value method cpu_imem_master_r_canPut
  assign cpu_imem_master_r_canPut = delay_shim_rff$FULL_N ;

  // action method cpu_imem_master_r_put
  assign RDY_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign CAN_FIRE_cpu_imem_master_r_put = delay_shim_rff$FULL_N ;
  assign WILL_FIRE_cpu_imem_master_r_put = EN_cpu_imem_master_r_put ;

  // value method core_mem_master_aw_canPeek
  assign core_mem_master_aw_canPeek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // value method core_mem_master_aw_peek
  assign core_mem_master_aw_peek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[98:0] ;
  assign RDY_core_mem_master_aw_peek =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;

  // action method core_mem_master_aw_drop
  assign RDY_core_mem_master_aw_drop =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign CAN_FIRE_core_mem_master_aw_drop =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign WILL_FIRE_core_mem_master_aw_drop = EN_core_mem_master_aw_drop ;

  // value method core_mem_master_w_canPeek
  assign core_mem_master_w_canPeek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // value method core_mem_master_w_peek
  assign core_mem_master_w_peek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[72:0] ;
  assign RDY_core_mem_master_w_peek =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;

  // action method core_mem_master_w_drop
  assign RDY_core_mem_master_w_drop =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign CAN_FIRE_core_mem_master_w_drop =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign WILL_FIRE_core_mem_master_w_drop = EN_core_mem_master_w_drop ;

  // value method core_mem_master_b_canPut
  assign core_mem_master_b_canPut = !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;

  // action method core_mem_master_b_put
  assign RDY_core_mem_master_b_put = !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;
  assign CAN_FIRE_core_mem_master_b_put =
	     !axi4_mem_shim_tmp_shimMaster_bff_rv[8] ;
  assign WILL_FIRE_core_mem_master_b_put = EN_core_mem_master_b_put ;

  // value method core_mem_master_ar_canPeek
  assign core_mem_master_ar_canPeek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // value method core_mem_master_ar_peek
  assign core_mem_master_ar_peek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[98:0] ;
  assign RDY_core_mem_master_ar_peek =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;

  // action method core_mem_master_ar_drop
  assign RDY_core_mem_master_ar_drop =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign CAN_FIRE_core_mem_master_ar_drop =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign WILL_FIRE_core_mem_master_ar_drop = EN_core_mem_master_ar_drop ;

  // value method core_mem_master_r_canPut
  assign core_mem_master_r_canPut = !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;

  // action method core_mem_master_r_put
  assign RDY_core_mem_master_r_put =
	     !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;
  assign CAN_FIRE_core_mem_master_r_put =
	     !axi4_mem_shim_tmp_shimMaster_rff_rv[73] ;
  assign WILL_FIRE_core_mem_master_r_put = EN_core_mem_master_r_put ;

  // value method dma_server_aw_canPut
  assign dma_server_aw_canPut = cpu$dma_server_aw_canPut ;

  // action method dma_server_aw_put
  assign RDY_dma_server_aw_put = 1'd1 ;
  assign CAN_FIRE_dma_server_aw_put = 1'd1 ;
  assign WILL_FIRE_dma_server_aw_put = EN_dma_server_aw_put ;

  // value method dma_server_w_canPut
  assign dma_server_w_canPut = cpu$dma_server_w_canPut ;

  // action method dma_server_w_put
  assign RDY_dma_server_w_put = 1'd1 ;
  assign CAN_FIRE_dma_server_w_put = 1'd1 ;
  assign WILL_FIRE_dma_server_w_put = EN_dma_server_w_put ;

  // value method dma_server_b_canPeek
  assign dma_server_b_canPeek = cpu$dma_server_b_canPeek ;

  // value method dma_server_b_peek
  assign dma_server_b_peek = cpu$dma_server_b_peek ;
  assign RDY_dma_server_b_peek = cpu$RDY_dma_server_b_peek ;

  // action method dma_server_b_drop
  assign RDY_dma_server_b_drop = cpu$RDY_dma_server_b_drop ;
  assign CAN_FIRE_dma_server_b_drop = cpu$RDY_dma_server_b_drop ;
  assign WILL_FIRE_dma_server_b_drop = EN_dma_server_b_drop ;

  // value method dma_server_ar_canPut
  assign dma_server_ar_canPut = cpu$dma_server_ar_canPut ;

  // action method dma_server_ar_put
  assign RDY_dma_server_ar_put = 1'd1 ;
  assign CAN_FIRE_dma_server_ar_put = 1'd1 ;
  assign WILL_FIRE_dma_server_ar_put = EN_dma_server_ar_put ;

  // value method dma_server_r_canPeek
  assign dma_server_r_canPeek = cpu$dma_server_r_canPeek ;

  // value method dma_server_r_peek
  assign dma_server_r_peek = cpu$dma_server_r_peek ;
  assign RDY_dma_server_r_peek = cpu$RDY_dma_server_r_peek ;

  // action method dma_server_r_drop
  assign RDY_dma_server_r_drop = cpu$RDY_dma_server_r_drop ;
  assign CAN_FIRE_dma_server_r_drop = cpu$RDY_dma_server_r_drop ;
  assign WILL_FIRE_dma_server_r_drop = EN_dma_server_r_drop ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method dm_dmi_read_addr
  assign RDY_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign CAN_FIRE_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign WILL_FIRE_dm_dmi_read_addr = EN_dm_dmi_read_addr ;

  // actionvalue method dm_dmi_read_data
  assign dm_dmi_read_data = debug_module$dmi_read_data ;
  assign RDY_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign CAN_FIRE_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_dm_dmi_read_data = EN_dm_dmi_read_data ;

  // action method dm_dmi_write
  assign RDY_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign CAN_FIRE_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign WILL_FIRE_dm_dmi_write = EN_dm_dmi_write ;

  // actionvalue method ndm_reset_client_request_get
  assign ndm_reset_client_request_get =
	     debug_module$ndm_reset_client_request_get ;
  assign RDY_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign CAN_FIRE_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign WILL_FIRE_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;

  // action method ndm_reset_client_response_put
  assign RDY_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign CAN_FIRE_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign WILL_FIRE_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cpu$mv_status ;

  // submodule axi4_mem_shim_tmp_awreqff
  FIFO2 #(.width(32'd98),
	  .guarded(32'd1)) axi4_mem_shim_tmp_awreqff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(axi4_mem_shim_tmp_awreqff$D_IN),
						     .ENQ(axi4_mem_shim_tmp_awreqff$ENQ),
						     .DEQ(axi4_mem_shim_tmp_awreqff$DEQ),
						     .CLR(axi4_mem_shim_tmp_awreqff$CLR),
						     .D_OUT(axi4_mem_shim_tmp_awreqff$D_OUT),
						     .FULL_N(axi4_mem_shim_tmp_awreqff$FULL_N),
						     .EMPTY_N(axi4_mem_shim_tmp_awreqff$EMPTY_N));

  // submodule axi4_mem_shim_tmp_newRst
  MakeReset0 #(.init(1'd0)) axi4_mem_shim_tmp_newRst(.CLK(CLK),
						     .RST(RST_N),
						     .ASSERT_IN(axi4_mem_shim_tmp_newRst$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST(axi4_mem_shim_tmp_newRst$OUT_RST));

  // submodule axi4_mem_shim_tmp_tagCon
  mkTagController axi4_mem_shim_tmp_tagCon(.CLK(CLK),
					   .RST_N(axi4_mem_shim_tmp_newRst$OUT_RST),
					   .cache_request_put_val(axi4_mem_shim_tmp_tagCon$cache_request_put_val),
					   .memory_response_put_val(axi4_mem_shim_tmp_tagCon$memory_response_put_val),
					   .EN_cache_request_put(axi4_mem_shim_tmp_tagCon$EN_cache_request_put),
					   .EN_cache_response_get(axi4_mem_shim_tmp_tagCon$EN_cache_response_get),
					   .EN_memory_request_get(axi4_mem_shim_tmp_tagCon$EN_memory_request_get),
					   .EN_memory_response_put(axi4_mem_shim_tmp_tagCon$EN_memory_response_put),
					   .cache_request_canPut(),
					   .RDY_cache_request_put(axi4_mem_shim_tmp_tagCon$RDY_cache_request_put),
					   .cache_response_canGet(),
					   .cache_response_peek(),
					   .RDY_cache_response_peek(),
					   .cache_response_get(axi4_mem_shim_tmp_tagCon$cache_response_get),
					   .RDY_cache_response_get(axi4_mem_shim_tmp_tagCon$RDY_cache_response_get),
					   .memory_request_canGet(),
					   .memory_request_peek(),
					   .RDY_memory_request_peek(),
					   .memory_request_get(axi4_mem_shim_tmp_tagCon$memory_request_get),
					   .RDY_memory_request_get(axi4_mem_shim_tmp_tagCon$RDY_memory_request_get),
					   .memory_response_canPut(),
					   .RDY_memory_response_put(axi4_mem_shim_tmp_tagCon$RDY_memory_response_put));

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dma_server_ar_put_val(cpu$dma_server_ar_put_val),
	    .dma_server_aw_put_val(cpu$dma_server_aw_put_val),
	    .dma_server_w_put_val(cpu$dma_server_w_put_val),
	    .hart0_csr_mem_server_request_put(cpu$hart0_csr_mem_server_request_put),
	    .hart0_fpr_mem_server_request_put(cpu$hart0_fpr_mem_server_request_put),
	    .hart0_gpr_mem_server_request_put(cpu$hart0_gpr_mem_server_request_put),
	    .hart0_put_other_req_put(cpu$hart0_put_other_req_put),
	    .hart0_server_reset_request_put(cpu$hart0_server_reset_request_put),
	    .hart0_server_run_halt_request_put(cpu$hart0_server_run_halt_request_put),
	    .imem_master_b_put_val(cpu$imem_master_b_put_val),
	    .imem_master_r_put_val(cpu$imem_master_r_put_val),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .mem_master_b_put_val(cpu$mem_master_b_put_val),
	    .mem_master_r_put_val(cpu$mem_master_r_put_val),
	    .nmi_req_set_not_clear(cpu$nmi_req_set_not_clear),
	    .s_external_interrupt_req_set_not_clear(cpu$s_external_interrupt_req_set_not_clear),
	    .set_verbosity_logdelay(cpu$set_verbosity_logdelay),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart0_server_reset_request_put(cpu$EN_hart0_server_reset_request_put),
	    .EN_hart0_server_reset_response_get(cpu$EN_hart0_server_reset_response_get),
	    .EN_imem_master_aw_drop(cpu$EN_imem_master_aw_drop),
	    .EN_imem_master_w_drop(cpu$EN_imem_master_w_drop),
	    .EN_imem_master_b_put(cpu$EN_imem_master_b_put),
	    .EN_imem_master_ar_drop(cpu$EN_imem_master_ar_drop),
	    .EN_imem_master_r_put(cpu$EN_imem_master_r_put),
	    .EN_mem_master_aw_drop(cpu$EN_mem_master_aw_drop),
	    .EN_mem_master_w_drop(cpu$EN_mem_master_w_drop),
	    .EN_mem_master_b_put(cpu$EN_mem_master_b_put),
	    .EN_mem_master_ar_drop(cpu$EN_mem_master_ar_drop),
	    .EN_mem_master_r_put(cpu$EN_mem_master_r_put),
	    .EN_dma_server_aw_put(cpu$EN_dma_server_aw_put),
	    .EN_dma_server_w_put(cpu$EN_dma_server_w_put),
	    .EN_dma_server_b_drop(cpu$EN_dma_server_b_drop),
	    .EN_dma_server_ar_put(cpu$EN_dma_server_ar_put),
	    .EN_dma_server_r_drop(cpu$EN_dma_server_r_drop),
	    .EN_hart0_server_run_halt_request_put(cpu$EN_hart0_server_run_halt_request_put),
	    .EN_hart0_server_run_halt_response_get(cpu$EN_hart0_server_run_halt_response_get),
	    .EN_hart0_put_other_req_put(cpu$EN_hart0_put_other_req_put),
	    .EN_hart0_gpr_mem_server_request_put(cpu$EN_hart0_gpr_mem_server_request_put),
	    .EN_hart0_gpr_mem_server_response_get(cpu$EN_hart0_gpr_mem_server_response_get),
	    .EN_hart0_fpr_mem_server_request_put(cpu$EN_hart0_fpr_mem_server_request_put),
	    .EN_hart0_fpr_mem_server_response_get(cpu$EN_hart0_fpr_mem_server_response_get),
	    .EN_hart0_csr_mem_server_request_put(cpu$EN_hart0_csr_mem_server_request_put),
	    .EN_hart0_csr_mem_server_response_get(cpu$EN_hart0_csr_mem_server_response_get),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_ma_ddr4_ready(cpu$EN_ma_ddr4_ready),
	    .RDY_hart0_server_reset_request_put(cpu$RDY_hart0_server_reset_request_put),
	    .hart0_server_reset_response_get(cpu$hart0_server_reset_response_get),
	    .RDY_hart0_server_reset_response_get(cpu$RDY_hart0_server_reset_response_get),
	    .imem_master_aw_canPeek(cpu$imem_master_aw_canPeek),
	    .imem_master_aw_peek(cpu$imem_master_aw_peek),
	    .RDY_imem_master_aw_peek(cpu$RDY_imem_master_aw_peek),
	    .RDY_imem_master_aw_drop(cpu$RDY_imem_master_aw_drop),
	    .imem_master_w_canPeek(cpu$imem_master_w_canPeek),
	    .imem_master_w_peek(cpu$imem_master_w_peek),
	    .RDY_imem_master_w_peek(cpu$RDY_imem_master_w_peek),
	    .RDY_imem_master_w_drop(cpu$RDY_imem_master_w_drop),
	    .imem_master_b_canPut(cpu$imem_master_b_canPut),
	    .RDY_imem_master_b_put(cpu$RDY_imem_master_b_put),
	    .imem_master_ar_canPeek(cpu$imem_master_ar_canPeek),
	    .imem_master_ar_peek(cpu$imem_master_ar_peek),
	    .RDY_imem_master_ar_peek(cpu$RDY_imem_master_ar_peek),
	    .RDY_imem_master_ar_drop(cpu$RDY_imem_master_ar_drop),
	    .imem_master_r_canPut(cpu$imem_master_r_canPut),
	    .RDY_imem_master_r_put(cpu$RDY_imem_master_r_put),
	    .mem_master_aw_canPeek(),
	    .mem_master_aw_peek(cpu$mem_master_aw_peek),
	    .RDY_mem_master_aw_peek(cpu$RDY_mem_master_aw_peek),
	    .RDY_mem_master_aw_drop(cpu$RDY_mem_master_aw_drop),
	    .mem_master_w_canPeek(),
	    .mem_master_w_peek(cpu$mem_master_w_peek),
	    .RDY_mem_master_w_peek(cpu$RDY_mem_master_w_peek),
	    .RDY_mem_master_w_drop(cpu$RDY_mem_master_w_drop),
	    .mem_master_b_canPut(cpu$mem_master_b_canPut),
	    .RDY_mem_master_b_put(cpu$RDY_mem_master_b_put),
	    .mem_master_ar_canPeek(cpu$mem_master_ar_canPeek),
	    .mem_master_ar_peek(cpu$mem_master_ar_peek),
	    .RDY_mem_master_ar_peek(cpu$RDY_mem_master_ar_peek),
	    .RDY_mem_master_ar_drop(cpu$RDY_mem_master_ar_drop),
	    .mem_master_r_canPut(cpu$mem_master_r_canPut),
	    .RDY_mem_master_r_put(cpu$RDY_mem_master_r_put),
	    .dma_server_aw_canPut(cpu$dma_server_aw_canPut),
	    .RDY_dma_server_aw_put(),
	    .dma_server_w_canPut(cpu$dma_server_w_canPut),
	    .RDY_dma_server_w_put(),
	    .dma_server_b_canPeek(cpu$dma_server_b_canPeek),
	    .dma_server_b_peek(cpu$dma_server_b_peek),
	    .RDY_dma_server_b_peek(cpu$RDY_dma_server_b_peek),
	    .RDY_dma_server_b_drop(cpu$RDY_dma_server_b_drop),
	    .dma_server_ar_canPut(cpu$dma_server_ar_canPut),
	    .RDY_dma_server_ar_put(),
	    .dma_server_r_canPeek(cpu$dma_server_r_canPeek),
	    .dma_server_r_peek(cpu$dma_server_r_peek),
	    .RDY_dma_server_r_peek(cpu$RDY_dma_server_r_peek),
	    .RDY_dma_server_r_drop(cpu$RDY_dma_server_r_drop),
	    .RDY_hart0_server_run_halt_request_put(cpu$RDY_hart0_server_run_halt_request_put),
	    .hart0_server_run_halt_response_get(cpu$hart0_server_run_halt_response_get),
	    .RDY_hart0_server_run_halt_response_get(cpu$RDY_hart0_server_run_halt_response_get),
	    .RDY_hart0_put_other_req_put(),
	    .RDY_hart0_gpr_mem_server_request_put(cpu$RDY_hart0_gpr_mem_server_request_put),
	    .hart0_gpr_mem_server_response_get(cpu$hart0_gpr_mem_server_response_get),
	    .RDY_hart0_gpr_mem_server_response_get(cpu$RDY_hart0_gpr_mem_server_response_get),
	    .RDY_hart0_fpr_mem_server_request_put(cpu$RDY_hart0_fpr_mem_server_request_put),
	    .hart0_fpr_mem_server_response_get(cpu$hart0_fpr_mem_server_response_get),
	    .RDY_hart0_fpr_mem_server_response_get(cpu$RDY_hart0_fpr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_request_put(cpu$RDY_hart0_csr_mem_server_request_put),
	    .hart0_csr_mem_server_response_get(cpu$hart0_csr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_response_get(cpu$RDY_hart0_csr_mem_server_response_get),
	    .RDY_set_verbosity(),
	    .RDY_ma_ddr4_ready(),
	    .mv_status(cpu$mv_status));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_client_run_halt_response_put(debug_module$hart0_client_run_halt_response_put),
			      .hart0_csr_mem_client_response_put(debug_module$hart0_csr_mem_client_response_put),
			      .hart0_fpr_mem_client_response_put(debug_module$hart0_fpr_mem_client_response_put),
			      .hart0_gpr_mem_client_response_put(debug_module$hart0_gpr_mem_client_response_put),
			      .hart0_reset_client_response_put(debug_module$hart0_reset_client_response_put),
			      .master_b_put_val(debug_module$master_b_put_val),
			      .master_r_put_val(debug_module$master_r_put_val),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_reset_client_request_get(debug_module$EN_hart0_reset_client_request_get),
			      .EN_hart0_reset_client_response_put(debug_module$EN_hart0_reset_client_response_put),
			      .EN_hart0_client_run_halt_request_get(debug_module$EN_hart0_client_run_halt_request_get),
			      .EN_hart0_client_run_halt_response_put(debug_module$EN_hart0_client_run_halt_response_put),
			      .EN_hart0_get_other_req_get(debug_module$EN_hart0_get_other_req_get),
			      .EN_hart0_gpr_mem_client_request_get(debug_module$EN_hart0_gpr_mem_client_request_get),
			      .EN_hart0_gpr_mem_client_response_put(debug_module$EN_hart0_gpr_mem_client_response_put),
			      .EN_hart0_fpr_mem_client_request_get(debug_module$EN_hart0_fpr_mem_client_request_get),
			      .EN_hart0_fpr_mem_client_response_put(debug_module$EN_hart0_fpr_mem_client_response_put),
			      .EN_hart0_csr_mem_client_request_get(debug_module$EN_hart0_csr_mem_client_request_get),
			      .EN_hart0_csr_mem_client_response_put(debug_module$EN_hart0_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .EN_master_aw_drop(debug_module$EN_master_aw_drop),
			      .EN_master_w_drop(debug_module$EN_master_w_drop),
			      .EN_master_b_put(debug_module$EN_master_b_put),
			      .EN_master_ar_drop(debug_module$EN_master_ar_drop),
			      .EN_master_r_put(debug_module$EN_master_r_put),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_reset_client_request_get(debug_module$hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_request_get(debug_module$RDY_hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_response_put(debug_module$RDY_hart0_reset_client_response_put),
			      .hart0_client_run_halt_request_get(debug_module$hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_request_get(debug_module$RDY_hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_response_put(debug_module$RDY_hart0_client_run_halt_response_put),
			      .hart0_get_other_req_get(debug_module$hart0_get_other_req_get),
			      .RDY_hart0_get_other_req_get(debug_module$RDY_hart0_get_other_req_get),
			      .hart0_gpr_mem_client_request_get(debug_module$hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_request_get(debug_module$RDY_hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_response_put(debug_module$RDY_hart0_gpr_mem_client_response_put),
			      .hart0_fpr_mem_client_request_get(debug_module$hart0_fpr_mem_client_request_get),
			      .RDY_hart0_fpr_mem_client_request_get(debug_module$RDY_hart0_fpr_mem_client_request_get),
			      .RDY_hart0_fpr_mem_client_response_put(debug_module$RDY_hart0_fpr_mem_client_response_put),
			      .hart0_csr_mem_client_request_get(debug_module$hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_request_get(debug_module$RDY_hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_response_put(debug_module$RDY_hart0_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .master_aw_canPeek(),
			      .master_aw_peek(debug_module$master_aw_peek),
			      .RDY_master_aw_peek(debug_module$RDY_master_aw_peek),
			      .RDY_master_aw_drop(debug_module$RDY_master_aw_drop),
			      .master_w_canPeek(),
			      .master_w_peek(debug_module$master_w_peek),
			      .RDY_master_w_peek(debug_module$RDY_master_w_peek),
			      .RDY_master_w_drop(debug_module$RDY_master_w_drop),
			      .master_b_canPut(debug_module$master_b_canPut),
			      .RDY_master_b_put(debug_module$RDY_master_b_put),
			      .master_ar_canPeek(debug_module$master_ar_canPeek),
			      .master_ar_peek(debug_module$master_ar_peek),
			      .RDY_master_ar_peek(debug_module$RDY_master_ar_peek),
			      .RDY_master_ar_drop(debug_module$RDY_master_ar_drop),
			      .master_r_canPut(debug_module$master_r_canPut),
			      .RDY_master_r_put(debug_module$RDY_master_r_put));

  // submodule delay_shim_arff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_arff(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(delay_shim_arff$D_IN),
					       .ENQ(delay_shim_arff$ENQ),
					       .DEQ(delay_shim_arff$DEQ),
					       .CLR(delay_shim_arff$CLR),
					       .D_OUT(delay_shim_arff$D_OUT),
					       .FULL_N(delay_shim_arff$FULL_N),
					       .EMPTY_N(delay_shim_arff$EMPTY_N));

  // submodule delay_shim_awff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_awff(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(delay_shim_awff$D_IN),
					       .ENQ(delay_shim_awff$ENQ),
					       .DEQ(delay_shim_awff$DEQ),
					       .CLR(delay_shim_awff$CLR),
					       .D_OUT(delay_shim_awff$D_OUT),
					       .FULL_N(delay_shim_awff$FULL_N),
					       .EMPTY_N(delay_shim_awff$EMPTY_N));

  // submodule delay_shim_bff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_bff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_bff$D_IN),
					      .ENQ(delay_shim_bff$ENQ),
					      .DEQ(delay_shim_bff$DEQ),
					      .CLR(delay_shim_bff$CLR),
					      .D_OUT(delay_shim_bff$D_OUT),
					      .FULL_N(delay_shim_bff$FULL_N),
					      .EMPTY_N(delay_shim_bff$EMPTY_N));

  // submodule delay_shim_rff
  SizedFIFO #(.p1width(32'd73),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_rff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_rff$D_IN),
					      .ENQ(delay_shim_rff$ENQ),
					      .DEQ(delay_shim_rff$DEQ),
					      .CLR(delay_shim_rff$CLR),
					      .D_OUT(delay_shim_rff$D_OUT),
					      .FULL_N(delay_shim_rff$FULL_N),
					      .EMPTY_N(delay_shim_rff$EMPTY_N));

  // submodule delay_shim_wff
  SizedFIFO #(.p1width(32'd74),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) delay_shim_wff(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(delay_shim_wff$D_IN),
					      .ENQ(delay_shim_wff$ENQ),
					      .DEQ(delay_shim_wff$DEQ),
					      .CLR(delay_shim_wff$CLR),
					      .D_OUT(delay_shim_wff$D_OUT),
					      .FULL_N(delay_shim_wff$FULL_N),
					      .EMPTY_N(delay_shim_wff$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_requestor(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_reset_requestor$D_IN),
							    .ENQ(f_reset_requestor$ENQ),
							    .DEQ(f_reset_requestor$DEQ),
							    .CLR(f_reset_requestor$CLR),
							    .D_OUT(f_reset_requestor$D_OUT),
							    .FULL_N(f_reset_requestor$FULL_N),
							    .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule merged_0_awff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) merged_0_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(merged_0_awff$D_IN),
							 .ENQ(merged_0_awff$ENQ),
							 .DEQ(merged_0_awff$DEQ),
							 .CLR(merged_0_awff$CLR),
							 .D_OUT(merged_0_awff$D_OUT),
							 .FULL_N(merged_0_awff$FULL_N),
							 .EMPTY_N(merged_0_awff$EMPTY_N));

  // submodule merged_0_wff
  FIFO2 #(.width(32'd74), .guarded(32'd1)) merged_0_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_0_wff$D_IN),
							.ENQ(merged_0_wff$ENQ),
							.DEQ(merged_0_wff$DEQ),
							.CLR(merged_0_wff$CLR),
							.D_OUT(merged_0_wff$D_OUT),
							.FULL_N(merged_0_wff$FULL_N),
							.EMPTY_N(merged_0_wff$EMPTY_N));

  // submodule merged_1_awff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) merged_1_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(merged_1_awff$D_IN),
							 .ENQ(merged_1_awff$ENQ),
							 .DEQ(merged_1_awff$DEQ),
							 .CLR(merged_1_awff$CLR),
							 .D_OUT(merged_1_awff$D_OUT),
							 .FULL_N(merged_1_awff$FULL_N),
							 .EMPTY_N(merged_1_awff$EMPTY_N));

  // submodule merged_1_wff
  FIFO2 #(.width(32'd74), .guarded(32'd1)) merged_1_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(merged_1_wff$D_IN),
							.ENQ(merged_1_wff$ENQ),
							.DEQ(merged_1_wff$DEQ),
							.CLR(merged_1_wff$CLR),
							.D_OUT(merged_1_wff$D_OUT),
							.FULL_N(merged_1_wff$FULL_N),
							.EMPTY_N(merged_1_wff$EMPTY_N));

  // submodule near_mem_io
  mkNear_Mem_IO_AXI4 near_mem_io(.CLK(CLK),
				 .RST_N(RST_N),
				 .axi4_slave_ar_put_val(near_mem_io$axi4_slave_ar_put_val),
				 .axi4_slave_aw_put_val(near_mem_io$axi4_slave_aw_put_val),
				 .axi4_slave_w_put_val(near_mem_io$axi4_slave_w_put_val),
				 .set_addr_map_addr_base(near_mem_io$set_addr_map_addr_base),
				 .set_addr_map_addr_lim(near_mem_io$set_addr_map_addr_lim),
				 .EN_server_reset_request_put(near_mem_io$EN_server_reset_request_put),
				 .EN_server_reset_response_get(near_mem_io$EN_server_reset_response_get),
				 .EN_set_addr_map(near_mem_io$EN_set_addr_map),
				 .EN_axi4_slave_aw_put(near_mem_io$EN_axi4_slave_aw_put),
				 .EN_axi4_slave_w_put(near_mem_io$EN_axi4_slave_w_put),
				 .EN_axi4_slave_b_drop(near_mem_io$EN_axi4_slave_b_drop),
				 .EN_axi4_slave_ar_put(near_mem_io$EN_axi4_slave_ar_put),
				 .EN_axi4_slave_r_drop(near_mem_io$EN_axi4_slave_r_drop),
				 .EN_get_timer_interrupt_req_get(near_mem_io$EN_get_timer_interrupt_req_get),
				 .EN_get_sw_interrupt_req_get(near_mem_io$EN_get_sw_interrupt_req_get),
				 .RDY_server_reset_request_put(near_mem_io$RDY_server_reset_request_put),
				 .RDY_server_reset_response_get(near_mem_io$RDY_server_reset_response_get),
				 .RDY_set_addr_map(),
				 .axi4_slave_aw_canPut(near_mem_io$axi4_slave_aw_canPut),
				 .RDY_axi4_slave_aw_put(near_mem_io$RDY_axi4_slave_aw_put),
				 .axi4_slave_w_canPut(near_mem_io$axi4_slave_w_canPut),
				 .RDY_axi4_slave_w_put(near_mem_io$RDY_axi4_slave_w_put),
				 .axi4_slave_b_canPeek(near_mem_io$axi4_slave_b_canPeek),
				 .axi4_slave_b_peek(near_mem_io$axi4_slave_b_peek),
				 .RDY_axi4_slave_b_peek(near_mem_io$RDY_axi4_slave_b_peek),
				 .RDY_axi4_slave_b_drop(near_mem_io$RDY_axi4_slave_b_drop),
				 .axi4_slave_ar_canPut(near_mem_io$axi4_slave_ar_canPut),
				 .RDY_axi4_slave_ar_put(near_mem_io$RDY_axi4_slave_ar_put),
				 .axi4_slave_r_canPeek(near_mem_io$axi4_slave_r_canPeek),
				 .axi4_slave_r_peek(near_mem_io$axi4_slave_r_peek),
				 .RDY_axi4_slave_r_peek(near_mem_io$RDY_axi4_slave_r_peek),
				 .RDY_axi4_slave_r_drop(near_mem_io$RDY_axi4_slave_r_drop),
				 .get_timer_interrupt_req_get(near_mem_io$get_timer_interrupt_req_get),
				 .RDY_get_timer_interrupt_req_get(near_mem_io$RDY_get_timer_interrupt_req_get),
				 .get_sw_interrupt_req_get(near_mem_io$get_sw_interrupt_req_get),
				 .RDY_get_sw_interrupt_req_get(near_mem_io$RDY_get_sw_interrupt_req_get));

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_ar_put_val(plic$axi4_slave_ar_put_val),
		     .axi4_slave_aw_put_val(plic$axi4_slave_aw_put_val),
		     .axi4_slave_w_put_val(plic$axi4_slave_w_put_val),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .EN_axi4_slave_aw_put(plic$EN_axi4_slave_aw_put),
		     .EN_axi4_slave_w_put(plic$EN_axi4_slave_w_put),
		     .EN_axi4_slave_b_drop(plic$EN_axi4_slave_b_drop),
		     .EN_axi4_slave_ar_put(plic$EN_axi4_slave_ar_put),
		     .EN_axi4_slave_r_drop(plic$EN_axi4_slave_r_drop),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(plic$RDY_server_reset_request_put),
		     .RDY_server_reset_response_get(plic$RDY_server_reset_response_get),
		     .RDY_set_addr_map(),
		     .axi4_slave_aw_canPut(plic$axi4_slave_aw_canPut),
		     .RDY_axi4_slave_aw_put(plic$RDY_axi4_slave_aw_put),
		     .axi4_slave_w_canPut(plic$axi4_slave_w_canPut),
		     .RDY_axi4_slave_w_put(plic$RDY_axi4_slave_w_put),
		     .axi4_slave_b_canPeek(plic$axi4_slave_b_canPeek),
		     .axi4_slave_b_peek(plic$axi4_slave_b_peek),
		     .RDY_axi4_slave_b_peek(plic$RDY_axi4_slave_b_peek),
		     .RDY_axi4_slave_b_drop(plic$RDY_axi4_slave_b_drop),
		     .axi4_slave_ar_canPut(plic$axi4_slave_ar_canPut),
		     .RDY_axi4_slave_ar_put(plic$RDY_axi4_slave_ar_put),
		     .axi4_slave_r_canPeek(plic$axi4_slave_r_canPeek),
		     .axi4_slave_r_peek(plic$axi4_slave_r_peek),
		     .RDY_axi4_slave_r_peek(plic$RDY_axi4_slave_r_peek),
		     .RDY_axi4_slave_r_drop(plic$RDY_axi4_slave_r_drop),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_near_mem_io_addr_range(soc_map$m_near_mem_io_addr_range),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     debug_module$RDY_hart0_client_run_halt_response_put &&
	     cpu$RDY_hart0_server_run_halt_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     debug_module$RDY_hart0_gpr_mem_client_request_get &&
	     cpu$RDY_hart0_gpr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     debug_module$RDY_hart0_gpr_mem_client_response_put &&
	     cpu$RDY_hart0_gpr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     debug_module$RDY_hart0_fpr_mem_client_request_get &&
	     cpu$RDY_hart0_fpr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     debug_module$RDY_hart0_fpr_mem_client_response_put &&
	     cpu$RDY_hart0_fpr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     debug_module$RDY_hart0_csr_mem_client_request_get &&
	     cpu$RDY_hart0_csr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     debug_module$RDY_hart0_csr_mem_client_response_put &&
	     cpu$RDY_hart0_csr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_set_input_canPeek_wire
  assign CAN_FIRE_RL_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire = 1'd1 ;

  // rule RL_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_set_output_canPut_wire
  assign CAN_FIRE_RL_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire = 1'd1 ;

  // rule RL_set_output_canPut_wire_1
  assign CAN_FIRE_RL_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_set_output_canPut_wire_2
  assign CAN_FIRE_RL_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_set_input_peek_wires_4
  assign CAN_FIRE_RL_set_input_peek_wires_4 =
	     near_mem_io$RDY_axi4_slave_b_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_4 =
	     near_mem_io$RDY_axi4_slave_b_peek ;

  // rule RL_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_set_input_peek_wires_5
  assign CAN_FIRE_RL_set_input_peek_wires_5 = plic$RDY_axi4_slave_b_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_5 = plic$RDY_axi4_slave_b_peek ;

  // rule RL_set_output_canPut_wire_3
  assign CAN_FIRE_RL_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_set_output_canPut_wire_4
  assign CAN_FIRE_RL_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_input_follow_flit_4
  assign CAN_FIRE_RL_input_follow_flit_4 =
	     near_mem_io$RDY_axi4_slave_b_drop && moreFlits_1[6] &&
	     moreFlits_1[4] &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191 ;
  assign WILL_FIRE_RL_input_follow_flit_4 = CAN_FIRE_RL_input_follow_flit_4 ;

  // rule RL_input_follow_flit_5
  assign CAN_FIRE_RL_input_follow_flit_5 =
	     plic$RDY_axi4_slave_b_drop && moreFlits_1[6] && moreFlits_1[5] &&
	     plic$axi4_slave_b_canPeek &&
	     IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191 ;
  assign WILL_FIRE_RL_input_follow_flit_5 = CAN_FIRE_RL_input_follow_flit_5 ;

  // rule RL_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_set_input_peek_wires_6
  assign CAN_FIRE_RL_set_input_peek_wires_6 = cpu$RDY_mem_master_ar_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_6 = cpu$RDY_mem_master_ar_peek ;

  // rule RL_set_input_canPeek_wire_7
  assign CAN_FIRE_RL_set_input_canPeek_wire_7 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_7 = 1'd1 ;

  // rule RL_set_input_peek_wires_7
  assign CAN_FIRE_RL_set_input_peek_wires_7 =
	     debug_module$RDY_master_ar_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_7 =
	     debug_module$RDY_master_ar_peek ;

  // rule RL_set_output_canPut_wire_5
  assign CAN_FIRE_RL_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_set_output_canPut_wire_6
  assign CAN_FIRE_RL_set_output_canPut_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_6 = 1'd1 ;

  // rule RL_set_output_canPut_wire_7
  assign CAN_FIRE_RL_set_output_canPut_wire_7 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_7 = 1'd1 ;

  // rule RL_set_dflt_output_canPut_wire_1
  assign CAN_FIRE_RL_set_dflt_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_set_dflt_output_canPut_wire_1 = 1'd1 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     inputCanPeek_1_0_whas__317_AND_inputCanPeek_1__ETC___d1393 &&
	     !moreFlits_1_1[5] ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_arbitration_fail_6
  assign CAN_FIRE_RL_arbitration_fail_6 =
	     CAN_FIRE_RL_arbitrate_2 && selectInput_1_0$wget &&
	     !cpu$mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_6 = CAN_FIRE_RL_arbitration_fail_6 ;

  // rule RL_arbitration_fail_7
  assign CAN_FIRE_RL_arbitration_fail_7 =
	     CAN_FIRE_RL_arbitrate_2 && selectInput_1_1_1$wget &&
	     !debug_module$master_ar_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_7 = CAN_FIRE_RL_arbitration_fail_7 ;

  // rule RL_input_first_flit_6
  assign CAN_FIRE_RL_input_first_flit_6 =
	     cpu$RDY_mem_master_ar_drop && !moreFlits_1_1[5] &&
	     CAN_FIRE_RL_arbitrate_2 &&
	     selectInput_1_0$wget &&
	     cpu$mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_6 = CAN_FIRE_RL_input_first_flit_6 ;

  // rule RL_input_follow_flit_6
  assign CAN_FIRE_RL_input_follow_flit_6 =
	     cpu$RDY_mem_master_ar_drop && moreFlits_1_1[5] &&
	     moreFlits_1_1[3] &&
	     cpu$mem_master_ar_canPeek &&
	     (NOT_IF_moreFlits_1_1_394_BIT_0_456_THEN_1_ELSE_ETC___d1466 ||
	      IF_NOT_moreFlits_1_1_394_BIT_0_456_467_OR_NOT__ETC___d1473) ;
  assign WILL_FIRE_RL_input_follow_flit_6 = CAN_FIRE_RL_input_follow_flit_6 ;

  // rule RL_input_first_flit_7
  assign CAN_FIRE_RL_input_first_flit_7 =
	     debug_module$RDY_master_ar_drop && !moreFlits_1_1[5] &&
	     CAN_FIRE_RL_arbitrate_2 &&
	     selectInput_1_1_1$wget &&
	     debug_module$master_ar_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_7 = CAN_FIRE_RL_input_first_flit_7 ;

  // rule RL_input_follow_flit_7
  assign CAN_FIRE_RL_input_follow_flit_7 =
	     debug_module$RDY_master_ar_drop && moreFlits_1_1[5] &&
	     moreFlits_1_1[4] &&
	     debug_module$master_ar_canPeek &&
	     (NOT_IF_moreFlits_1_1_394_BIT_0_456_THEN_1_ELSE_ETC___d1466 ||
	      IF_NOT_moreFlits_1_1_394_BIT_0_456_467_OR_NOT__ETC___d1473) ;
  assign WILL_FIRE_RL_input_follow_flit_7 = CAN_FIRE_RL_input_follow_flit_7 ;

  // rule __me_check_125
  assign CAN_FIRE___me_check_125 = 1'b1 ;
  assign WILL_FIRE___me_check_125 = 1'b1 ;

  // rule __me_check_127
  assign CAN_FIRE___me_check_127 = 1'b1 ;
  assign WILL_FIRE___me_check_127 = 1'b1 ;

  // rule RL_output_selected_5
  assign CAN_FIRE_RL_output_selected_5 =
	     toOutput_1_0$whas && !axi4_mem_shim_tmp_shimSlave_arff_rv[98] ;
  assign WILL_FIRE_RL_output_selected_5 = CAN_FIRE_RL_output_selected_5 ;

  // rule RL_dflt_output_selected_1
  assign CAN_FIRE_RL_dflt_output_selected_1 =
	     toDfltOutput_1_1$whas && noRouteSlv_1_flitCount == 9'd0 ;
  assign WILL_FIRE_RL_dflt_output_selected_1 =
	     CAN_FIRE_RL_dflt_output_selected_1 ;

  // rule RL_set_input_canPeek_wire_8
  assign CAN_FIRE_RL_set_input_canPeek_wire_8 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_8 = 1'd1 ;

  // rule RL_set_input_peek_wires_8
  assign CAN_FIRE_RL_set_input_peek_wires_8 = x__h97108 != 9'd0 ;
  assign WILL_FIRE_RL_set_input_peek_wires_8 =
	     CAN_FIRE_RL_set_input_peek_wires_8 ;

  // rule RL_set_input_canPeek_wire_10
  assign CAN_FIRE_RL_set_input_canPeek_wire_10 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_10 = 1'd1 ;

  // rule RL_output_selected_6
  assign CAN_FIRE_RL_output_selected_6 =
	     near_mem_io$RDY_axi4_slave_ar_put && toOutput_1_1_1$whas &&
	     near_mem_io$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_output_selected_6 = CAN_FIRE_RL_output_selected_6 ;

  // rule RL_set_input_peek_wires_10
  assign CAN_FIRE_RL_set_input_peek_wires_10 =
	     near_mem_io$RDY_axi4_slave_r_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_10 =
	     near_mem_io$RDY_axi4_slave_r_peek ;

  // rule RL_set_input_canPeek_wire_11
  assign CAN_FIRE_RL_set_input_canPeek_wire_11 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_11 = 1'd1 ;

  // rule RL_output_selected_7
  assign CAN_FIRE_RL_output_selected_7 =
	     plic$RDY_axi4_slave_ar_put && toOutput_1_2$whas &&
	     plic$axi4_slave_ar_canPut ;
  assign WILL_FIRE_RL_output_selected_7 = CAN_FIRE_RL_output_selected_7 ;

  // rule __me_check_129
  assign CAN_FIRE___me_check_129 = 1'b1 ;
  assign WILL_FIRE___me_check_129 = 1'b1 ;

  // rule RL_set_input_peek_wires_11
  assign CAN_FIRE_RL_set_input_peek_wires_11 = plic$RDY_axi4_slave_r_peek ;
  assign WILL_FIRE_RL_set_input_peek_wires_11 = plic$RDY_axi4_slave_r_peek ;

  // rule RL_set_output_canPut_wire_8
  assign CAN_FIRE_RL_set_output_canPut_wire_8 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_8 = 1'd1 ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     debug_module$RDY_hart0_client_run_halt_request_get &&
	     cpu$RDY_hart0_server_run_halt_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_set_output_canPut_wire_9
  assign CAN_FIRE_RL_set_output_canPut_wire_9 = 1'd1 ;
  assign WILL_FIRE_RL_set_output_canPut_wire_9 = 1'd1 ;

  // rule RL_input_follow_flit_8
  assign CAN_FIRE_RL_input_follow_flit_8 =
	     x__h97108 != 9'd0 && moreFlits_1_2[6] && moreFlits_1_2[2] &&
	     x__h97108 != 9'd0 &&
	     IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829 ;
  assign WILL_FIRE_RL_input_follow_flit_8 = CAN_FIRE_RL_input_follow_flit_8 ;

  // rule RL_input_follow_flit_10
  assign CAN_FIRE_RL_input_follow_flit_10 =
	     near_mem_io$RDY_axi4_slave_r_drop && moreFlits_1_2[6] &&
	     moreFlits_1_2[4] &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829 ;
  assign WILL_FIRE_RL_input_follow_flit_10 =
	     CAN_FIRE_RL_input_follow_flit_10 ;

  // rule RL_input_follow_flit_11
  assign CAN_FIRE_RL_input_follow_flit_11 =
	     plic$RDY_axi4_slave_r_drop && moreFlits_1_2[6] &&
	     moreFlits_1_2[5] &&
	     plic$axi4_slave_r_canPeek &&
	     IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829 ;
  assign WILL_FIRE_RL_input_follow_flit_11 =
	     CAN_FIRE_RL_input_follow_flit_11 ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_ug_src_setPeek
  assign CAN_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;
  assign WILL_FIRE_RL_ug_src_setPeek = cpu$RDY_imem_master_aw_peek ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect =
	     cpu$imem_master_aw_canPeek && delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_connect = CAN_FIRE_RL_connect ;

  // rule RL_ug_src_warnDoDrop
  assign CAN_FIRE_RL_ug_src_warnDoDrop =
	     CAN_FIRE_RL_connect && !cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_warnDoDrop = CAN_FIRE_RL_ug_src_warnDoDrop ;

  // rule RL_ug_src_doDrop
  assign CAN_FIRE_RL_ug_src_doDrop =
	     cpu$RDY_imem_master_aw_drop && CAN_FIRE_RL_connect &&
	     cpu$imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_ug_src_doDrop = CAN_FIRE_RL_ug_src_doDrop ;

  // rule RL_ug_snk_warnDoPut
  assign CAN_FIRE_RL_ug_snk_warnDoPut =
	     CAN_FIRE_RL_connect && !delay_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_warnDoPut = CAN_FIRE_RL_ug_snk_warnDoPut ;

  // rule RL_ug_snk_doPut
  assign CAN_FIRE_RL_ug_snk_doPut =
	     delay_shim_awff$FULL_N && CAN_FIRE_RL_connect ;
  assign WILL_FIRE_RL_ug_snk_doPut = CAN_FIRE_RL_ug_snk_doPut ;

  // rule RL_ug_src_1_setPeek
  assign CAN_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;
  assign WILL_FIRE_RL_ug_src_1_setPeek = cpu$RDY_imem_master_w_peek ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 =
	     cpu$imem_master_w_canPeek && delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_connect_1 = CAN_FIRE_RL_connect_1 ;

  // rule RL_ug_src_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop =
	     CAN_FIRE_RL_connect_1 && !cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop = CAN_FIRE_RL_ug_src_1_warnDoDrop ;

  // rule RL_ug_src_1_doDrop
  assign CAN_FIRE_RL_ug_src_1_doDrop =
	     cpu$RDY_imem_master_w_drop && CAN_FIRE_RL_connect_1 &&
	     cpu$imem_master_w_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_doDrop = CAN_FIRE_RL_ug_src_1_doDrop ;

  // rule RL_ug_snk_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut =
	     CAN_FIRE_RL_connect_1 && !delay_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut = CAN_FIRE_RL_ug_snk_1_warnDoPut ;

  // rule RL_ug_snk_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_doPut =
	     delay_shim_wff$FULL_N && CAN_FIRE_RL_connect_1 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut = CAN_FIRE_RL_ug_snk_1_doPut ;

  // rule RL_ug_src_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek = delay_shim_bff$EMPTY_N ;

  // rule RL_connect_2
  assign CAN_FIRE_RL_connect_2 =
	     delay_shim_bff$EMPTY_N && cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_connect_2 = CAN_FIRE_RL_connect_2 ;

  // rule RL_ug_src_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop =
	     CAN_FIRE_RL_connect_2 && !delay_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop = CAN_FIRE_RL_ug_src_2_warnDoDrop ;

  // rule RL_ug_src_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_doDrop =
	     delay_shim_bff$EMPTY_N && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop = CAN_FIRE_RL_ug_src_2_doDrop ;

  // rule RL_ug_snk_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut =
	     CAN_FIRE_RL_connect_2 && !cpu$imem_master_b_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut = CAN_FIRE_RL_ug_snk_2_warnDoPut ;

  // rule RL_ug_snk_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_doPut =
	     cpu$RDY_imem_master_b_put && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut = CAN_FIRE_RL_ug_snk_2_doPut ;

  // rule RL_ug_src_3_setPeek
  assign CAN_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;
  assign WILL_FIRE_RL_ug_src_3_setPeek = cpu$RDY_imem_master_ar_peek ;

  // rule RL_connect_3
  assign CAN_FIRE_RL_connect_3 =
	     cpu$imem_master_ar_canPeek && delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_connect_3 = CAN_FIRE_RL_connect_3 ;

  // rule RL_ug_src_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop =
	     CAN_FIRE_RL_connect_3 && !cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop = CAN_FIRE_RL_ug_src_3_warnDoDrop ;

  // rule RL_ug_src_3_doDrop
  assign CAN_FIRE_RL_ug_src_3_doDrop =
	     cpu$RDY_imem_master_ar_drop && CAN_FIRE_RL_connect_3 &&
	     cpu$imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_doDrop = CAN_FIRE_RL_ug_src_3_doDrop ;

  // rule RL_ug_snk_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut =
	     CAN_FIRE_RL_connect_3 && !delay_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut = CAN_FIRE_RL_ug_snk_3_warnDoPut ;

  // rule RL_ug_snk_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_doPut =
	     delay_shim_arff$FULL_N && CAN_FIRE_RL_connect_3 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut = CAN_FIRE_RL_ug_snk_3_doPut ;

  // rule RL_ug_src_4_setPeek
  assign CAN_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_setPeek = delay_shim_rff$EMPTY_N ;

  // rule RL_connect_4
  assign CAN_FIRE_RL_connect_4 =
	     delay_shim_rff$EMPTY_N && cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_connect_4 = CAN_FIRE_RL_connect_4 ;

  // rule RL_ug_src_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_4_warnDoDrop =
	     CAN_FIRE_RL_connect_4 && !delay_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_warnDoDrop = CAN_FIRE_RL_ug_src_4_warnDoDrop ;

  // rule RL_ug_src_4_doDrop
  assign CAN_FIRE_RL_ug_src_4_doDrop =
	     delay_shim_rff$EMPTY_N && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_src_4_doDrop = CAN_FIRE_RL_ug_src_4_doDrop ;

  // rule RL_ug_snk_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_4_warnDoPut =
	     CAN_FIRE_RL_connect_4 && !cpu$imem_master_r_canPut ;
  assign WILL_FIRE_RL_ug_snk_4_warnDoPut = CAN_FIRE_RL_ug_snk_4_warnDoPut ;

  // rule RL_ug_snk_4_doPut
  assign CAN_FIRE_RL_ug_snk_4_doPut =
	     cpu$RDY_imem_master_r_put && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_snk_4_doPut = CAN_FIRE_RL_ug_snk_4_doPut ;

  // rule RL_axi4_mem_shim_tmp_passCacheRead
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead =
	     axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[98] &&
	     axi4_mem_shim_tmp_tagCon$RDY_cache_request_put &&
	     !axi4_mem_shim_tmp_writeBurst ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;

  // rule RL_axi4_mem_shim_tmp_passCacheResponse
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse =
	     axi4_mem_shim_tmp_tagCon$RDY_cache_response_get &&
	     !axi4_mem_shim_tmp_shimSlave_bff_rv[7] &&
	     !axi4_mem_shim_tmp_shimSlave_rff_rv[73] ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse ;

  // rule RL_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_set_input_peek_wires_3
  assign CAN_FIRE_RL_set_input_peek_wires_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_set_input_peek_wires_3 =
	     CAN_FIRE_RL_set_input_peek_wires_3 ;

  // rule RL_input_follow_flit_3
  assign CAN_FIRE_RL_input_follow_flit_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     moreFlits_1[6] &&
	     moreFlits_1[3] &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191 ;
  assign WILL_FIRE_RL_input_follow_flit_3 = CAN_FIRE_RL_input_follow_flit_3 ;

  // rule RL_set_input_canPeek_wire_9
  assign CAN_FIRE_RL_set_input_canPeek_wire_9 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_9 = 1'd1 ;

  // rule RL_set_input_peek_wires_9
  assign CAN_FIRE_RL_set_input_peek_wires_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_set_input_peek_wires_9 =
	     CAN_FIRE_RL_set_input_peek_wires_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     (x__h97108 != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584 ||
	      axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599 ||
	      near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615 ||
	      plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630) &&
	     !moreFlits_1_2[6] ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_arbitration_fail_8
  assign CAN_FIRE_RL_arbitration_fail_8 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_0_1$wget &&
	     !(x__h97108 != 9'd0) ;
  assign WILL_FIRE_RL_arbitration_fail_8 = CAN_FIRE_RL_arbitration_fail_8 ;

  // rule RL_legal_destination_fail_8
  assign CAN_FIRE_RL_legal_destination_fail_8 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_0_1$wget &&
	     x__h97108 != 9'd0 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_8 =
	     CAN_FIRE_RL_legal_destination_fail_8 ;

  // rule RL_arbitration_fail_9
  assign CAN_FIRE_RL_arbitration_fail_9 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_1_2$wget &&
	     !axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_arbitration_fail_9 = CAN_FIRE_RL_arbitration_fail_9 ;

  // rule RL_legal_destination_fail_9
  assign CAN_FIRE_RL_legal_destination_fail_9 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_1_2$wget &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_9 =
	     CAN_FIRE_RL_legal_destination_fail_9 ;

  // rule RL_arbitration_fail_10
  assign CAN_FIRE_RL_arbitration_fail_10 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_2$wget &&
	     !near_mem_io$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_10 = CAN_FIRE_RL_arbitration_fail_10 ;

  // rule RL_legal_destination_fail_10
  assign CAN_FIRE_RL_legal_destination_fail_10 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_2$wget &&
	     near_mem_io$axi4_slave_r_canPeek &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_10 =
	     CAN_FIRE_RL_legal_destination_fail_10 ;

  // rule RL_arbitration_fail_11
  assign CAN_FIRE_RL_arbitration_fail_11 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_3$wget &&
	     !plic$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_11 = CAN_FIRE_RL_arbitration_fail_11 ;

  // rule RL_legal_destination_fail_11
  assign CAN_FIRE_RL_legal_destination_fail_11 =
	     CAN_FIRE_RL_arbitrate_3 && selectInput_1_3$wget &&
	     plic$axi4_slave_r_canPeek &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_11 =
	     CAN_FIRE_RL_legal_destination_fail_11 ;

  // rule RL_input_first_flit_8
  assign CAN_FIRE_RL_input_first_flit_8 =
	     x__h97108 != 9'd0 && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_0_1$wget &&
	     x__h97108 != 9'd0 ;
  assign WILL_FIRE_RL_input_first_flit_8 = CAN_FIRE_RL_input_first_flit_8 ;

  // rule RL_input_first_flit_9
  assign CAN_FIRE_RL_input_first_flit_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_1_2$wget &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_input_first_flit_9 = CAN_FIRE_RL_input_first_flit_9 ;

  // rule RL_input_follow_flit_9
  assign CAN_FIRE_RL_input_follow_flit_9 =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     moreFlits_1_2[6] &&
	     moreFlits_1_2[3] &&
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	     IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829 ;
  assign WILL_FIRE_RL_input_follow_flit_9 = CAN_FIRE_RL_input_follow_flit_9 ;

  // rule __me_check_154
  assign CAN_FIRE___me_check_154 = 1'b1 ;
  assign WILL_FIRE___me_check_154 = 1'b1 ;

  // rule RL_input_first_flit_10
  assign CAN_FIRE_RL_input_first_flit_10 =
	     near_mem_io$RDY_axi4_slave_r_drop && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_2$wget &&
	     near_mem_io$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_10 = CAN_FIRE_RL_input_first_flit_10 ;

  // rule __me_check_156
  assign CAN_FIRE___me_check_156 = 1'b1 ;
  assign WILL_FIRE___me_check_156 = 1'b1 ;

  // rule RL_input_first_flit_11
  assign CAN_FIRE_RL_input_first_flit_11 =
	     plic$RDY_axi4_slave_r_drop && !moreFlits_1_2[6] &&
	     CAN_FIRE_RL_arbitrate_3 &&
	     selectInput_1_3$wget &&
	     plic$axi4_slave_r_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_11 = CAN_FIRE_RL_input_first_flit_11 ;

  // rule __me_check_152
  assign CAN_FIRE___me_check_152 = 1'b1 ;
  assign WILL_FIRE___me_check_152 = 1'b1 ;

  // rule __me_check_158
  assign CAN_FIRE___me_check_158 = 1'b1 ;
  assign WILL_FIRE___me_check_158 = 1'b1 ;

  // rule RL_output_selected_8
  assign CAN_FIRE_RL_output_selected_8 =
	     cpu$RDY_mem_master_r_put && toOutput_1_0_1$whas &&
	     cpu$mem_master_r_canPut ;
  assign WILL_FIRE_RL_output_selected_8 = CAN_FIRE_RL_output_selected_8 ;

  // rule RL_output_selected_9
  assign CAN_FIRE_RL_output_selected_9 =
	     debug_module$RDY_master_r_put && toOutput_1_1_2$whas &&
	     debug_module$master_r_canPut ;
  assign WILL_FIRE_RL_output_selected_9 = CAN_FIRE_RL_output_selected_9 ;

  // rule __me_check_160
  assign CAN_FIRE___me_check_160 = 1'b1 ;
  assign WILL_FIRE___me_check_160 = 1'b1 ;

  // rule RL_axi4_mem_shim_tmp_passMemoryRequest
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest =
	     axi4_mem_shim_tmp_tagCon$RDY_memory_request_get &&
	     !axi4_mem_shim_tmp_shimMaster_wff_rv[73] &&
	     (axi4_mem_shim_tmp_doneSendingAW ||
	      !axi4_mem_shim_tmp_shimMaster_awff_rv[99]) &&
	     !axi4_mem_shim_tmp_shimMaster_arff_rv[99] ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest ;

  // rule RL_axi4_mem_shim_tmp_passMemoryResponseWrite
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite =
	     axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[8] &&
	     axi4_mem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // rule RL_axi4_mem_shim_tmp_passMemoryResponseRead
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead =
	     axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[73] &&
	     axi4_mem_shim_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // rule RL_merged_0_passFlit
  assign CAN_FIRE_RL_merged_0_passFlit =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_passFlit = CAN_FIRE_RL_merged_0_passFlit ;

  // rule RL_set_input_peek_wires
  assign CAN_FIRE_RL_set_input_peek_wires =
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	     (CAN_FIRE_RL_merged_0_passFlit || merged_0_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_set_input_peek_wires =
	     CAN_FIRE_RL_set_input_peek_wires ;

  // rule RL_input_follow_flit
  assign CAN_FIRE_RL_input_follow_flit =
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	     moreFlits[5] &&
	     moreFlits[3] &&
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	     (NOT_IF_moreFlits_17_BIT_0_97_THEN_1_ELSE_0_98__ETC___d807 ||
	      IF_NOT_moreFlits_17_BIT_0_97_08_OR_NOT_outputC_ETC___d814) ;
  assign WILL_FIRE_RL_input_follow_flit = CAN_FIRE_RL_input_follow_flit ;

  // rule RL_merged_1_passFlit
  assign CAN_FIRE_RL_merged_1_passFlit =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_passFlit = CAN_FIRE_RL_merged_1_passFlit ;

  // rule RL_set_input_peek_wires_1
  assign CAN_FIRE_RL_set_input_peek_wires_1 =
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	     (CAN_FIRE_RL_merged_1_passFlit || merged_1_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_set_input_peek_wires_1 =
	     CAN_FIRE_RL_set_input_peek_wires_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     inputCanPeek_0_whas__40_AND_inputCanPeek_0_wge_ETC___d716 &&
	     !moreFlits[5] ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_arbitration_fail
  assign CAN_FIRE_RL_arbitration_fail =
	     CAN_FIRE_RL_arbitrate && selectInput_0$wget &&
	     !IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 ;
  assign WILL_FIRE_RL_arbitration_fail = CAN_FIRE_RL_arbitration_fail ;

  // rule RL_arbitration_fail_1
  assign CAN_FIRE_RL_arbitration_fail_1 =
	     CAN_FIRE_RL_arbitrate && selectInput_1$wget &&
	     !IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 ;
  assign WILL_FIRE_RL_arbitration_fail_1 = CAN_FIRE_RL_arbitration_fail_1 ;

  // rule RL_input_first_flit
  assign CAN_FIRE_RL_input_first_flit =
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	     !moreFlits[5] &&
	     CAN_FIRE_RL_arbitrate &&
	     selectInput_0$wget &&
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 ;
  assign WILL_FIRE_RL_input_first_flit = CAN_FIRE_RL_input_first_flit ;

  // rule RL_input_first_flit_1
  assign CAN_FIRE_RL_input_first_flit_1 =
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	     !moreFlits[5] &&
	     CAN_FIRE_RL_arbitrate &&
	     selectInput_1$wget &&
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 ;
  assign WILL_FIRE_RL_input_first_flit_1 = CAN_FIRE_RL_input_first_flit_1 ;

  // rule RL_input_follow_flit_1
  assign CAN_FIRE_RL_input_follow_flit_1 =
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	     moreFlits[5] &&
	     moreFlits[4] &&
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	     (NOT_IF_moreFlits_17_BIT_0_97_THEN_1_ELSE_0_98__ETC___d807 ||
	      IF_NOT_moreFlits_17_BIT_0_97_08_OR_NOT_outputC_ETC___d814) ;
  assign WILL_FIRE_RL_input_follow_flit_1 = CAN_FIRE_RL_input_follow_flit_1 ;

  // rule __me_check_77
  assign CAN_FIRE___me_check_77 = 1'b1 ;
  assign WILL_FIRE___me_check_77 = 1'b1 ;

  // rule __me_check_79
  assign CAN_FIRE___me_check_79 = 1'b1 ;
  assign WILL_FIRE___me_check_79 = 1'b1 ;

  // rule RL_output_selected
  assign CAN_FIRE_RL_output_selected =
	     IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626 &&
	     toOutput_0$whas &&
	     IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626 ;
  assign WILL_FIRE_RL_output_selected = CAN_FIRE_RL_output_selected ;

  // rule RL_output_selected_1
  assign CAN_FIRE_RL_output_selected_1 =
	     IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630 &&
	     toOutput_1$whas &&
	     IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630 ;
  assign WILL_FIRE_RL_output_selected_1 = CAN_FIRE_RL_output_selected_1 ;

  // rule RL_output_selected_2
  assign CAN_FIRE_RL_output_selected_2 =
	     IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 &&
	     toOutput_2$whas &&
	     IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 ;
  assign WILL_FIRE_RL_output_selected_2 = CAN_FIRE_RL_output_selected_2 ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__93_AND_cpu__ETC___d299 ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_from_dm_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     debug_module$RDY_hart0_reset_client_request_get &&
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_requestor$FULL_N &&
	     !CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start &&
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     (f_reset_requestor$D_OUT ||
	      debug_module$RDY_hart0_reset_client_response_put) &&
	     (!f_reset_requestor$D_OUT || f_reset_rsps$FULL_N) ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_dflt_output_selected
  assign CAN_FIRE_RL_dflt_output_selected =
	     (noRouteSlv_drain_until_last || !noRouteSlv_m_send_rsp[5]) &&
	     toDfltOutput$whas &&
	     dfltOutputCanPut$wget ;
  assign WILL_FIRE_RL_dflt_output_selected =
	     CAN_FIRE_RL_dflt_output_selected ;

  // rule __me_check_81
  assign CAN_FIRE___me_check_81 = 1'b1 ;
  assign WILL_FIRE___me_check_81 = 1'b1 ;

  // rule RL_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_set_input_peek_wires_2
  assign CAN_FIRE_RL_set_input_peek_wires_2 =
	     noRouteSlv_m_send_rsp$port1__read[5] ;
  assign WILL_FIRE_RL_set_input_peek_wires_2 =
	     CAN_FIRE_RL_set_input_peek_wires_2 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     (noRouteSlv_m_send_rsp$port1__read[5] &&
	      IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950 ||
	      axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965 ||
	      near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981 ||
	      plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996) &&
	     !moreFlits_1[6] ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_arbitration_fail_2
  assign CAN_FIRE_RL_arbitration_fail_2 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_0_1$wget &&
	     !noRouteSlv_m_send_rsp$port1__read[5] ;
  assign WILL_FIRE_RL_arbitration_fail_2 = CAN_FIRE_RL_arbitration_fail_2 ;

  // rule RL_legal_destination_fail_2
  assign CAN_FIRE_RL_legal_destination_fail_2 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_0_1$wget &&
	     noRouteSlv_m_send_rsp$port1__read[5] &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_2 =
	     CAN_FIRE_RL_legal_destination_fail_2 ;

  // rule RL_arbitration_fail_3
  assign CAN_FIRE_RL_arbitration_fail_3 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_1_1$wget &&
	     !axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_arbitration_fail_3 = CAN_FIRE_RL_arbitration_fail_3 ;

  // rule RL_legal_destination_fail_3
  assign CAN_FIRE_RL_legal_destination_fail_3 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_1_1$wget &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_3 =
	     CAN_FIRE_RL_legal_destination_fail_3 ;

  // rule RL_arbitration_fail_4
  assign CAN_FIRE_RL_arbitration_fail_4 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_2$wget &&
	     !near_mem_io$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_4 = CAN_FIRE_RL_arbitration_fail_4 ;

  // rule RL_legal_destination_fail_4
  assign CAN_FIRE_RL_legal_destination_fail_4 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_2$wget &&
	     near_mem_io$axi4_slave_b_canPeek &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_4 =
	     CAN_FIRE_RL_legal_destination_fail_4 ;

  // rule RL_arbitration_fail_5
  assign CAN_FIRE_RL_arbitration_fail_5 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_3$wget &&
	     !plic$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_arbitration_fail_5 = CAN_FIRE_RL_arbitration_fail_5 ;

  // rule RL_legal_destination_fail_5
  assign CAN_FIRE_RL_legal_destination_fail_5 =
	     CAN_FIRE_RL_arbitrate_1 && selectInput_3$wget &&
	     plic$axi4_slave_b_canPeek &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_legal_destination_fail_5 =
	     CAN_FIRE_RL_legal_destination_fail_5 ;

  // rule RL_input_first_flit_2
  assign CAN_FIRE_RL_input_first_flit_2 =
	     noRouteSlv_m_send_rsp$port1__read[5] && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_0_1$wget &&
	     noRouteSlv_m_send_rsp$port1__read[5] ;
  assign WILL_FIRE_RL_input_first_flit_2 = CAN_FIRE_RL_input_first_flit_2 ;

  // rule RL_input_follow_flit_2
  assign CAN_FIRE_RL_input_follow_flit_2 =
	     noRouteSlv_m_send_rsp$port1__read[5] && moreFlits_1[6] &&
	     moreFlits_1[2] &&
	     noRouteSlv_m_send_rsp$port1__read[5] &&
	     IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191 ;
  assign WILL_FIRE_RL_input_follow_flit_2 = CAN_FIRE_RL_input_follow_flit_2 ;

  // rule RL_input_first_flit_3
  assign CAN_FIRE_RL_input_first_flit_3 =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	     !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_1_1$wget &&
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_input_first_flit_3 = CAN_FIRE_RL_input_first_flit_3 ;

  // rule __me_check_106
  assign CAN_FIRE___me_check_106 = 1'b1 ;
  assign WILL_FIRE___me_check_106 = 1'b1 ;

  // rule RL_input_first_flit_4
  assign CAN_FIRE_RL_input_first_flit_4 =
	     near_mem_io$RDY_axi4_slave_b_drop && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_2$wget &&
	     near_mem_io$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_4 = CAN_FIRE_RL_input_first_flit_4 ;

  // rule __me_check_108
  assign CAN_FIRE___me_check_108 = 1'b1 ;
  assign WILL_FIRE___me_check_108 = 1'b1 ;

  // rule RL_input_first_flit_5
  assign CAN_FIRE_RL_input_first_flit_5 =
	     plic$RDY_axi4_slave_b_drop && !moreFlits_1[6] &&
	     CAN_FIRE_RL_arbitrate_1 &&
	     selectInput_3$wget &&
	     plic$axi4_slave_b_canPeek ;
  assign WILL_FIRE_RL_input_first_flit_5 = CAN_FIRE_RL_input_first_flit_5 ;

  // rule __me_check_104
  assign CAN_FIRE___me_check_104 = 1'b1 ;
  assign WILL_FIRE___me_check_104 = 1'b1 ;

  // rule __me_check_110
  assign CAN_FIRE___me_check_110 = 1'b1 ;
  assign WILL_FIRE___me_check_110 = 1'b1 ;

  // rule RL_output_selected_3
  assign CAN_FIRE_RL_output_selected_3 =
	     cpu$RDY_mem_master_b_put && toOutput_0_1$whas &&
	     cpu$mem_master_b_canPut ;
  assign WILL_FIRE_RL_output_selected_3 = CAN_FIRE_RL_output_selected_3 ;

  // rule RL_output_selected_4
  assign CAN_FIRE_RL_output_selected_4 =
	     debug_module$RDY_master_b_put && toOutput_1_1$whas &&
	     debug_module$master_b_canPut ;
  assign WILL_FIRE_RL_output_selected_4 = CAN_FIRE_RL_output_selected_4 ;

  // rule __me_check_112
  assign CAN_FIRE___me_check_112 = 1'b1 ;
  assign WILL_FIRE___me_check_112 = 1'b1 ;

  // rule RL_merged_0_awFlit
  assign CAN_FIRE_RL_merged_0_awFlit =
	     cpu$RDY_mem_master_aw_drop && cpu$RDY_mem_master_aw_peek &&
	     merged_0_awff$FULL_N ;
  assign WILL_FIRE_RL_merged_0_awFlit = CAN_FIRE_RL_merged_0_awFlit ;

  // rule RL_merged_0_wFlit
  assign CAN_FIRE_RL_merged_0_wFlit =
	     cpu$RDY_mem_master_w_drop && cpu$RDY_mem_master_w_peek &&
	     merged_0_wff$FULL_N ;
  assign WILL_FIRE_RL_merged_0_wFlit = CAN_FIRE_RL_merged_0_wFlit ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     merged_0_wff$EMPTY_N && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_merged_1_awFlit
  assign CAN_FIRE_RL_merged_1_awFlit =
	     debug_module$RDY_master_aw_drop &&
	     debug_module$RDY_master_aw_peek &&
	     merged_1_awff$FULL_N ;
  assign WILL_FIRE_RL_merged_1_awFlit = CAN_FIRE_RL_merged_1_awFlit ;

  // rule RL_merged_1_wFlit
  assign CAN_FIRE_RL_merged_1_wFlit =
	     debug_module$RDY_master_w_drop &&
	     debug_module$RDY_master_w_peek &&
	     merged_1_wff$FULL_N ;
  assign WILL_FIRE_RL_merged_1_wFlit = CAN_FIRE_RL_merged_1_wFlit ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst =
	     merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genFirst = CAN_FIRE_RL_merged_1_genFirst ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     merged_1_wff$EMPTY_N && merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__47_AND_split_0_doPut_wget__ETC___d458 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_axi4_mem_shim_tmp_getCacheAW
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read[98] &&
	     axi4_mem_shim_tmp_awreqff$FULL_N ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_getCacheAW =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_output_selected &&
	     (!split_0_doPut$wget[172] ||
	      !axi4_mem_shim_tmp_shimSlave_wff_rv[74]) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_axi4_mem_shim_tmp_passCacheWrite
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[74] &&
	     axi4_mem_shim_tmp_tagCon$RDY_cache_request_put &&
	     axi4_mem_shim_tmp_awreqff$EMPTY_N ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	     !WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;

  // rule RL_axi4_mem_shim_tmp_propagateReset
  assign CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset =
	     !axi4_mem_shim_tmp_reset_done ;
  assign WILL_FIRE_RL_axi4_mem_shim_tmp_propagateReset =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__82_AND_split_1_doPut_wget__ETC___d489 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_output_selected_1 &&
	     (!split_1_doPut$wget[172] || near_mem_io$RDY_axi4_slave_w_put) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__11_AND_split_2_doPut_wget__ETC___d518 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_output_selected_2 &&
	     (!split_2_doPut$wget[172] || plic$RDY_axi4_slave_w_put) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // inputs to muxes for submodule ports
  assign MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ;
  assign MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign MUX_moreFlits$write_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit && !inputPeek_0$wget[2] ;
  assign MUX_moreFlits$write_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit && inputPeek_0$wget[2] ;
  assign MUX_moreFlits$write_1__SEL_3 =
	     WILL_FIRE_RL_input_first_flit_1 && !inputPeek_1$wget[2] ;
  assign MUX_moreFlits$write_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_1 && inputPeek_1$wget[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_3 =
	     WILL_FIRE_RL_input_first_flit_9 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_5 =
	     WILL_FIRE_RL_input_first_flit_10 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_6 =
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_11 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;
  assign MUX_moreFlits_1_2$write_1__SEL_8 =
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;
  assign MUX_near_mem_io$axi4_slave_w_put_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ;
  assign MUX_near_mem_io$axi4_slave_w_put_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign MUX_plic$axi4_slave_w_put_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ;
  assign MUX_plic$axi4_slave_w_put_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign MUX_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toDfltOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign MUX_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[0] ;
  assign MUX_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ;
  assign MUX_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ;
  assign MUX_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[0] ;
  assign MUX_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[0] ;
  assign MUX_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[1] ;
  assign MUX_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ;
  assign MUX_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ;
  assign MUX_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[1] ;
  assign MUX_toOutput_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[0] ;
  assign MUX_toOutput_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[0] ;
  assign MUX_toOutput_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[0] ;
  assign MUX_toOutput_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[0] ;
  assign MUX_toOutput_1_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[0] ;
  assign MUX_toOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[1] ;
  assign MUX_toOutput_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[1] ;
  assign MUX_toOutput_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[1] ;
  assign MUX_toOutput_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[1] ;
  assign MUX_toOutput_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[1] ;
  assign MUX_toOutput_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_5 =
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_6 =
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_7 =
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[1] ;
  assign MUX_toOutput_1_1_2$wset_1__SEL_8 =
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[1] ;
  assign MUX_toOutput_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[2] ;
  assign MUX_toOutput_1_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[2] ;
  assign MUX_toOutput_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[2] ;
  assign MUX_toOutput_1_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[2] ;
  assign MUX_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[2] ;
  assign MUX_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ;
  assign MUX_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ;
  assign MUX_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[2] ;
  assign MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1, split_0_doPut$wget[73:0] } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1 =
	     { tmp__h7954[39:3],
	       4'd0,
	       axi4_mem_shim_tmp_awreqff$D_OUT[97:93],
	       3'd1,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1],
	       axi4_mem_shim_tmp_awreqff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[9:2],
	       8'd255,
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[0],
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[73:10],
	       axi4_mem_shim_tmp_awreqff$D_OUT[28:21] } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[68:29],
	       1'd0,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[97:93],
	       3'd0,
	       83'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[14:11] < 4'd4,
	       2'd0,
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read[23:18] } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1 =
	     { axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read[7:2],
	       4'd1,
	       2'bxx /* unspecified value */ ,
	       65'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[72:67],
	       4'd0,
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[0],
	       1'd0,
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read[67:3] } ;
  assign MUX_merged_0_flitLeft$write_1__VAL_2 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_2 = merged_1_flitLeft - 8'd1 ;
  assign MUX_moreFlits$write_1__VAL_1 = { 3'd5, inputDest_0$wget } ;
  assign MUX_moreFlits$write_1__VAL_2 =
	     { 1'd0, 5'bxxxxx /* unspecified value */  } ;
  assign MUX_moreFlits$write_1__VAL_3 = { 3'd6, inputDest_1$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_1 = { 5'd17, inputDest_1_0_1$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_2 =
	     { 1'd0, 6'bxxxxxx /* unspecified value */  } ;
  assign MUX_moreFlits_1_2$write_1__VAL_3 = { 5'd18, inputDest_1_1_2$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_5 = { 5'd20, inputDest_1_2$wget } ;
  assign MUX_moreFlits_1_2$write_1__VAL_7 = { 5'd24, inputDest_1_3$wget } ;
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_toDfltOutput$wset_1__VAL_1 =
	     { !CAN_FIRE_RL_set_input_peek_wires || inputPeek_0$wget[172],
	       (CAN_FIRE_RL_set_input_peek_wires && !inputPeek_0$wget[172]) ?
		 inputPeek_0$wget[171:1] :
		 { 97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		   inputPeek_0$wget[74:1] },
	       inputPeek_0$wget[0] } ;
  assign MUX_toDfltOutput$wset_1__VAL_2 =
	     { !CAN_FIRE_RL_set_input_peek_wires_1 || inputPeek_1$wget[172],
	       (CAN_FIRE_RL_set_input_peek_wires_1 &&
		!inputPeek_1$wget[172]) ?
		 inputPeek_1$wget[171:1] :
		 { 97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		   inputPeek_1$wget[74:1] },
	       inputPeek_1$wget[0] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_1 =
	     { noRouteSlv_m_send_rsp$port1__read[3:0],
	       2'd3,
	       noRouteSlv_m_send_rsp$port1__read[4] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[5:0],
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[6] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_3 =
	     { near_mem_io$axi4_slave_b_peek[5:0],
	       near_mem_io$axi4_slave_b_peek[6] } ;
  assign MUX_toDfltOutput_1$wset_1__VAL_4 =
	     { plic$axi4_slave_b_peek[5:0], plic$axi4_slave_b_peek[6] } ;
  assign MUX_toDfltOutput_1_1$wset_1__VAL_1 =
	     { cpu$mem_master_ar_peek, 1'd0 } ;
  assign MUX_toDfltOutput_1_1$wset_1__VAL_2 =
	     { debug_module$master_ar_peek, 1'd1 } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_1 =
	     { noRouteSlv_1_currentReq$port1__read[96:93],
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       2'd3,
	       x__h97108 == 9'd1,
	       1'bx /* unspecified value */ ,
	       noRouteSlv_1_currentReq$port1__read[97] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_2 =
	     { axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[71:0],
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[72] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_3 =
	     { near_mem_io$axi4_slave_r_peek[70:0],
	       1'd0,
	       near_mem_io$axi4_slave_r_peek[71] } ;
  assign MUX_toDfltOutput_1_2$wset_1__VAL_4 =
	     { plic$axi4_slave_r_peek[70:0],
	       1'd0,
	       plic$axi4_slave_r_peek[71] } ;

  // inlined wires
  assign merged_0_outflit$wget =
	     { 1'd0, merged_0_awff$D_OUT, merged_0_wff$D_OUT } ;
  assign merged_1_outflit$wget =
	     { 1'd0, merged_1_awff$D_OUT, merged_1_wff$D_OUT } ;
  assign split_0_doPut$wget =
	     { toOutput_0$wget[172],
	       toOutput_0$wget[172] ?
		 toOutput_0$wget[172:1] :
		 { toOutput_0$wget[0], toOutput_0$wget[171:1] } } ;
  assign split_1_doPut$wget =
	     { toOutput_1$wget[172],
	       toOutput_1$wget[172] ?
		 toOutput_1$wget[172:1] :
		 { toOutput_1$wget[0], toOutput_1$wget[171:1] } } ;
  assign split_2_doPut$wget =
	     { toOutput_2$wget[172],
	       toOutput_2$wget[172] ?
		 toOutput_2$wget[172:1] :
		 { toOutput_2$wget[0], toOutput_2$wget[171:1] } } ;
  assign inputPeek_0$wget =
	     { !CAN_FIRE_RL_merged_0_passFlit || merged_0_outflit$wget[171],
	       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d557,
	       1'd0 } ;
  assign inputPeek_1$wget =
	     { !CAN_FIRE_RL_merged_1_passFlit || merged_1_outflit$wget[171],
	       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d600,
	       1'd1 } ;
  assign inputDest_0$wget =
	     { IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d574,
	       addr__h26801[63:40] == 24'd0 &&
	       !IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d563 &&
	       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d565,
	       IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d581 } ;
  assign inputDest_1$wget =
	     { IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d617,
	       addr__h27693[63:40] == 24'd0 &&
	       !IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d606 &&
	       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d608,
	       IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d624 } ;
  assign dfltOutputCanPut$wget =
	     noRouteSlv_drain_until_last || !noRouteSlv_m_send_rsp[5] ;
  always@(MUX_toOutput_0$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_0$wset_1__SEL_2 or
	  MUX_toOutput_0$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_0$wset_1__SEL_1:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_0$wset_1__SEL_2:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_0$wset_1__SEL_3:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_0$wset_1__SEL_4:
	  toOutput_0$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_0$wget =
		   173'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_0$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[0] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[0] ;
  always@(MUX_toOutput_1$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_1$wset_1__SEL_2 or
	  MUX_toOutput_1$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1$wset_1__SEL_1:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_1$wset_1__SEL_2:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_1$wset_1__SEL_3:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_1$wset_1__SEL_4:
	  toOutput_1$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_1$wget =
		   173'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[1] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[1] ;
  always@(MUX_toOutput_2$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toOutput_2$wset_1__SEL_2 or
	  MUX_toOutput_2$wset_1__SEL_3 or
	  MUX_toDfltOutput$wset_1__VAL_2 or MUX_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_2$wset_1__SEL_1:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_2$wset_1__SEL_2:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toOutput_2$wset_1__SEL_3:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toOutput_2$wset_1__SEL_4:
	  toOutput_2$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toOutput_2$wget =
		   173'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_2$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits[2] ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1$wget[2] ;
  always@(MUX_toDfltOutput$wset_1__SEL_1 or
	  MUX_toDfltOutput$wset_1__VAL_1 or
	  MUX_toDfltOutput$wset_1__SEL_2 or
	  MUX_toDfltOutput$wset_1__VAL_2 or
	  MUX_toDfltOutput$wset_1__SEL_3 or MUX_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toDfltOutput$wset_1__SEL_1:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toDfltOutput$wset_1__SEL_2:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_2;
      MUX_toDfltOutput$wset_1__SEL_3:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_1;
      MUX_toDfltOutput$wset_1__SEL_4:
	  toDfltOutput$wget = MUX_toDfltOutput$wset_1__VAL_2;
      default: toDfltOutput$wget =
		   173'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toDfltOutput$whas =
	     WILL_FIRE_RL_input_first_flit &&
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_first_flit_1 &&
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit_1 &&
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign selectInput_0$wget =
	     (SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 ||
	      SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733) ?
	       x__h32643 | y__h32644 :
	       arbiter_lastSelect ;
  assign selectInput_1$wget =
	     (SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 ||
	      SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733) ?
	       x__h32784 | y__h32785 :
	       arbiter_firstHot ;
  assign inputDest_0_1$wget = 2'd1 << noRouteSlv_m_send_rsp$port1__read[4] ;
  assign inputDest_1_1$wget =
	     2'd1 << axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[6] ;
  assign inputDest_2$wget = 2'd1 << near_mem_io$axi4_slave_b_peek[6] ;
  assign inputDest_3$wget = 2'd1 << plic$axi4_slave_b_peek[6] ;
  always@(MUX_toOutput_0_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_toOutput_0_1$wset_1__SEL_2 or
	  MUX_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_toOutput_0_1$wset_1__SEL_3 or
	  MUX_toOutput_0_1$wset_1__SEL_4 or
	  MUX_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_toOutput_0_1$wset_1__SEL_5 or
	  MUX_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_toOutput_0_1$wset_1__SEL_6 or
	  MUX_toOutput_0_1$wset_1__SEL_7 or MUX_toOutput_0_1$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_0_1$wset_1__SEL_1:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_0_1$wset_1__SEL_2:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_0_1$wset_1__SEL_3:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_0_1$wset_1__SEL_4:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_0_1$wset_1__SEL_5:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      MUX_toOutput_0_1$wset_1__SEL_6:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_0_1$wset_1__SEL_7:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_0_1$wset_1__SEL_8:
	  toOutput_0_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      default: toOutput_0_1$wget = 7'bxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_0_1$whas =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[0] ||
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[0] ;
  always@(MUX_toOutput_1_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_toOutput_1_1$wset_1__SEL_2 or
	  MUX_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_toOutput_1_1$wset_1__SEL_3 or
	  MUX_toOutput_1_1$wset_1__SEL_4 or
	  MUX_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_toOutput_1_1$wset_1__SEL_5 or
	  MUX_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_toOutput_1_1$wset_1__SEL_6 or
	  MUX_toOutput_1_1$wset_1__SEL_7 or MUX_toOutput_1_1$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_1$wset_1__SEL_1:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_1_1$wset_1__SEL_2:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_1_1$wset_1__SEL_3:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_1;
      MUX_toOutput_1_1$wset_1__SEL_4:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_1_1$wset_1__SEL_5:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      MUX_toOutput_1_1$wset_1__SEL_6:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_2;
      MUX_toOutput_1_1$wset_1__SEL_7:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_3;
      MUX_toOutput_1_1$wset_1__SEL_8:
	  toOutput_1_1$wget = MUX_toDfltOutput_1$wset_1__VAL_4;
      default: toOutput_1_1$wget = 7'bxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_1$whas =
	     WILL_FIRE_RL_input_first_flit_2 &&
	     (inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_0_1$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit_4 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ||
	     WILL_FIRE_RL_input_follow_flit_2 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ||
	     WILL_FIRE_RL_input_follow_flit_3 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ||
	     WILL_FIRE_RL_input_follow_flit_5 &&
	     (moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1[1] ||
	     WILL_FIRE_RL_input_first_flit_3 &&
	     (inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1$wget[1] ||
	     WILL_FIRE_RL_input_first_flit_4 &&
	     (inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_2$wget[1] ||
	     WILL_FIRE_RL_input_first_flit_5 &&
	     (inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_3$wget[1] ;
  assign selectInput_0_1$wget =
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053 ?
	       x__h55232 | y__h55233 :
	       arbiter_lastSelect_1 ;
  assign selectInput_1_1$wget =
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053 ?
	       x__h55471 | y__h55472 :
	       arbiter_lastSelect_1_1 ;
  assign selectInput_2$wget =
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053 ?
	       x__h55691 | y__h55692 :
	       arbiter_lastSelect_2 ;
  assign selectInput_3$wget =
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053 ?
	       x__h55917 | y__h55918 :
	       arbiter_firstHot_1 ;
  assign inputDest_1_0$wget =
	     { cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1274,
	       cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	       !cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1263 &&
	       cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1265,
	       cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1281 } ;
  assign inputDest_1_1_1$wget =
	     { debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1301,
	       debug_module$master_ar_peek[92:69] == 24'd0 &&
	       !debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1290 &&
	       debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1292,
	       debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1308 } ;
  always@(MUX_toOutput_1_0$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_1 or
	  MUX_toOutput_1_0$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_2 or
	  MUX_toOutput_1_0$wset_1__SEL_3 or MUX_toOutput_1_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_0$wset_1__SEL_1:
	  toOutput_1_0$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_0$wset_1__SEL_2:
	  toOutput_1_0$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      MUX_toOutput_1_0$wset_1__SEL_3:
	  toOutput_1_0$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_0$wset_1__SEL_4:
	  toOutput_1_0$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      default: toOutput_1_0$wget =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_0$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[0] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[0] ||
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[0] ;
  always@(MUX_toOutput_1_1_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_1 or
	  MUX_toOutput_1_1_1$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_2 or
	  MUX_toOutput_1_1_1$wset_1__SEL_3 or
	  MUX_toOutput_1_1_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_1_1$wset_1__SEL_1:
	  toOutput_1_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_1_1$wset_1__SEL_2:
	  toOutput_1_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      MUX_toOutput_1_1_1$wset_1__SEL_3:
	  toOutput_1_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_1_1$wset_1__SEL_4:
	  toOutput_1_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      default: toOutput_1_1_1$wget =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_1_1$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[1] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[1] ||
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[1] ;
  always@(MUX_toOutput_1_2$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_1 or
	  MUX_toOutput_1_2$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_2 or
	  MUX_toOutput_1_2$wset_1__SEL_3 or MUX_toOutput_1_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_2$wset_1__SEL_1:
	  toOutput_1_2$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_2$wset_1__SEL_2:
	  toOutput_1_2$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      MUX_toOutput_1_2$wset_1__SEL_3:
	  toOutput_1_2$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toOutput_1_2$wset_1__SEL_4:
	  toOutput_1_2$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      default: toOutput_1_2$wget =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_2$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[2] ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_1[2] ||
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_1$wget[2] ;
  always@(MUX_toDfltOutput_1_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_1 or
	  MUX_toDfltOutput_1_1$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_1$wset_1__VAL_2 or
	  MUX_toDfltOutput_1_1$wset_1__SEL_3 or
	  MUX_toDfltOutput_1_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toDfltOutput_1_1$wset_1__SEL_1:
	  toDfltOutput_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      MUX_toDfltOutput_1_1$wset_1__SEL_2:
	  toDfltOutput_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      MUX_toDfltOutput_1_1$wset_1__SEL_3:
	  toDfltOutput_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_2;
      MUX_toDfltOutput_1_1$wset_1__SEL_4:
	  toDfltOutput_1_1$wget = MUX_toDfltOutput_1_1$wset_1__VAL_1;
      default: toDfltOutput_1_1$wget =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toDfltOutput_1_1$whas =
	     WILL_FIRE_RL_input_first_flit_6 &&
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_first_flit_7 &&
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit_7 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 ||
	     WILL_FIRE_RL_input_follow_flit_6 &&
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign selectInput_1_0$wget =
	     (SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 ||
	      SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410) ?
	       x__h75483 | y__h75484 :
	       arbiter_1_lastSelect ;
  assign selectInput_1_1_1$wget =
	     (SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 ||
	      SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410) ?
	       x__h75624 | y__h75625 :
	       arbiter_1_firstHot ;
  assign inputDest_1_0_1$wget =
	     2'd1 << noRouteSlv_1_currentReq$port1__read[97] ;
  assign inputDest_1_1_2$wget =
	     2'd1 << axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[72] ;
  assign inputDest_1_2$wget = 2'd1 << near_mem_io$axi4_slave_r_peek[71] ;
  assign inputDest_1_3$wget = 2'd1 << plic$axi4_slave_r_peek[71] ;
  always@(MUX_toOutput_1_0_1$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_1 or
	  MUX_toOutput_1_0_1$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_2 or
	  MUX_toOutput_1_0_1$wset_1__SEL_3 or
	  MUX_toOutput_1_0_1$wset_1__SEL_4 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_3 or
	  MUX_toOutput_1_0_1$wset_1__SEL_5 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_4 or
	  MUX_toOutput_1_0_1$wset_1__SEL_6 or
	  MUX_toOutput_1_0_1$wset_1__SEL_7 or
	  MUX_toOutput_1_0_1$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_0_1$wset_1__SEL_1:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_0_1$wset_1__SEL_2:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_0_1$wset_1__SEL_3:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_0_1$wset_1__SEL_4:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_0_1$wset_1__SEL_5:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      MUX_toOutput_1_0_1$wset_1__SEL_6:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_0_1$wset_1__SEL_7:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_0_1$wset_1__SEL_8:
	  toOutput_1_0_1$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      default: toOutput_1_0_1$wget =
		   73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_0_1$whas =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[0] ||
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[0] ||
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[0] ||
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[0] ;
  always@(MUX_toOutput_1_1_2$wset_1__SEL_1 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_1 or
	  MUX_toOutput_1_1_2$wset_1__SEL_2 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_2 or
	  MUX_toOutput_1_1_2$wset_1__SEL_3 or
	  MUX_toOutput_1_1_2$wset_1__SEL_4 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_3 or
	  MUX_toOutput_1_1_2$wset_1__SEL_5 or
	  MUX_toDfltOutput_1_2$wset_1__VAL_4 or
	  MUX_toOutput_1_1_2$wset_1__SEL_6 or
	  MUX_toOutput_1_1_2$wset_1__SEL_7 or
	  MUX_toOutput_1_1_2$wset_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toOutput_1_1_2$wset_1__SEL_1:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_1_2$wset_1__SEL_2:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_1_2$wset_1__SEL_3:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_1;
      MUX_toOutput_1_1_2$wset_1__SEL_4:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_1_2$wset_1__SEL_5:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      MUX_toOutput_1_1_2$wset_1__SEL_6:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_2;
      MUX_toOutput_1_1_2$wset_1__SEL_7:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_3;
      MUX_toOutput_1_1_2$wset_1__SEL_8:
	  toOutput_1_1_2$wget = MUX_toDfltOutput_1_2$wset_1__VAL_4;
      default: toOutput_1_1_2$wget =
		   73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign toOutput_1_1_2$whas =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     (inputDest_1_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_0_1$wget[1] ||
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ||
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ||
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ||
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     (moreFlits_1_2[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_2[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     moreFlits_1_2[1] ||
	     WILL_FIRE_RL_input_first_flit_9 &&
	     (inputDest_1_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_1_2$wget[1] ||
	     WILL_FIRE_RL_input_first_flit_10 &&
	     (inputDest_1_2$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_2$wget[1] ||
	     WILL_FIRE_RL_input_first_flit_11 &&
	     (inputDest_1_3$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     inputDest_1_3$wget[1] ;
  assign selectInput_1_0_1$wget =
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687 ?
	       x__h93164 | y__h93165 :
	       arbiter_1_lastSelect_1 ;
  assign selectInput_1_1_2$wget =
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687 ?
	       x__h93403 | y__h93404 :
	       arbiter_1_lastSelect_1_1 ;
  assign selectInput_1_2$wget =
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687 ?
	       x__h93623 | y__h93624 :
	       arbiter_1_lastSelect_2 ;
  assign selectInput_1_3$wget =
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687 ?
	       x__h93849 | y__h93850 :
	       arbiter_1_firstHot_1 ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_input_follow_flit || WILL_FIRE_RL_input_first_flit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_input_follow_flit_1 ||
	     WILL_FIRE_RL_input_first_flit_1 ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1 =
	     { 1'd1, split_0_doPut$wget[171:74] } ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read =
	     MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_2 ?
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_awff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_awff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1 =
	     MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 ?
	       MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 :
	       MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__VAL_1 ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_wff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port1__write_1 =
	     { 1'd0,
	       74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ?
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_wff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse &&
	     axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] != 2'd0 ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1 =
	     { 1'd1,
	       (axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd1) ?
		 axi4_mem_shim_tmp_tagCon$cache_response_get[75:71] :
		 5'd0,
	       2'd0 } ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port1__write =
	     WILL_FIRE_RL_input_follow_flit_3 ||
	     WILL_FIRE_RL_input_first_flit_3 ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port1__write_1 =
	     { 1'd0, 7'bxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$EN_port1__write ?
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_bff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1 =
	     { 1'd1, toOutput_1_0$wget[0], toOutput_1_0$wget[97:1] } ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read =
	     CAN_FIRE_RL_output_selected_5 ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_arff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1 =
	     { 1'd0,
	       98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_arff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse &&
	     axi4_mem_shim_tmp_tagCon$cache_response_get[68:67] == 2'd0 ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$cache_response_get[75:71],
	       axi4_mem_shim_tmp_tagCon$cache_response_get[63:0],
	       2'd0,
	       axi4_mem_shim_tmp_tagCon$cache_response_get[66],
	       axi4_mem_shim_tmp_tagCon$cache_response_get[64] } ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_input_follow_flit_9 ||
	     WILL_FIRE_RL_input_first_flit_9 ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$EN_port1__write ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimSlave_rff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	     !axi4_mem_shim_tmp_doneSendingAW ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[100:95],
	       aw_awaddr__h10330,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[7:0],
	       aw_awsize_val__h12069,
	       3'd2,
	       x__h13735,
	       11'd0 } ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_awff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read =
	     EN_core_mem_master_aw_drop ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_awff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_mem_shim_tmp_tagCon$memory_request_get[71:8],
	       axi4_mem_shim_tmp_tagCon$memory_request_get[88:81],
	       axi4_mem_shim_tmp_tagCon$memory_request_get[91] } ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_wff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read =
	     EN_core_mem_master_w_drop ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_wff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1 =
	     { 1'd1, core_mem_master_b_put_val } ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read =
	     EN_core_mem_master_b_put ?
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port1__write_1 =
	     { 1'd0, 8'bxxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ?
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_bff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] != 2'd1 ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1 =
	     { 1'd1,
	       v_arid__h15183,
	       v_araddr__h15184,
	       v_arlen__h15185,
	       v_arsize_val__h15230,
	       3'd2,
	       x__h15248,
	       11'd0 } ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$EN_port0__write ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_arff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1 =
	     { 1'd0,
	       99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read =
	     EN_core_mem_master_ar_drop ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_arff_rv$port2__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1 =
	     { 1'd1, core_mem_master_r_put_val } ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read =
	     EN_core_mem_master_r_put ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port0__write_1 :
	       axi4_mem_shim_tmp_shimMaster_rff_rv ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 =
	     { 1'd0,
	       73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read =
	     (!axi4_mem_shim_tmp_reset_done) ?
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port1__write_1 :
	       axi4_mem_shim_tmp_shimMaster_rff_rv$port2__read ;
  assign noRouteSlv_m_send_rsp$EN_port0__write =
	     WILL_FIRE_RL_dflt_output_selected && !toDfltOutput$wget[172] ;
  assign noRouteSlv_m_send_rsp$port0__write_1 =
	     { 1'd1, toDfltOutput$wget[0], toDfltOutput$wget[171:168] } ;
  assign noRouteSlv_m_send_rsp$port1__read =
	     noRouteSlv_m_send_rsp$EN_port0__write ?
	       noRouteSlv_m_send_rsp$port0__write_1 :
	       noRouteSlv_m_send_rsp ;
  assign noRouteSlv_m_send_rsp$EN_port1__write =
	     WILL_FIRE_RL_input_follow_flit_2 ||
	     WILL_FIRE_RL_input_first_flit_2 ;
  assign noRouteSlv_m_send_rsp$port2__read =
	     noRouteSlv_m_send_rsp$EN_port1__write ?
	       MUX_moreFlits$write_1__VAL_2 :
	       noRouteSlv_m_send_rsp$port1__read ;
  assign noRouteSlv_1_currentReq$port0__write_1 =
	     { toDfltOutput_1_1$wget[0], toDfltOutput_1_1$wget[97:1] } ;
  assign noRouteSlv_1_currentReq$port1__read =
	     CAN_FIRE_RL_dflt_output_selected_1 ?
	       noRouteSlv_1_currentReq$port0__write_1 :
	       noRouteSlv_1_currentReq ;
  assign noRouteSlv_1_flitCount$port0__write_1 =
	     { 1'd0, toDfltOutput_1_1$wget[29:22] } + 9'd1 ;
  assign noRouteSlv_1_flitCount$EN_port1__write =
	     WILL_FIRE_RL_input_follow_flit_8 ||
	     WILL_FIRE_RL_input_first_flit_8 ;
  assign noRouteSlv_1_flitCount$port1__write_1 = x__h97108 - 9'd1 ;
  assign noRouteSlv_1_flitCount$port2__read =
	     noRouteSlv_1_flitCount$EN_port1__write ?
	       noRouteSlv_1_flitCount$port1__write_1 :
	       x__h97108 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN = selectInput_1_1_1$wget ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN = selectInput_1_3$wget ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN = selectInput_1_0$wget ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN = selectInput_1_0_1$wget ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect_1_1
  assign arbiter_1_lastSelect_1_1$D_IN = selectInput_1_1_2$wget ;
  assign arbiter_1_lastSelect_1_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN = selectInput_1_2$wget ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN = selectInput_1$wget ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_firstHot_1
  assign arbiter_firstHot_1$D_IN = selectInput_3$wget ;
  assign arbiter_firstHot_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN = selectInput_0$wget ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect_1
  assign arbiter_lastSelect_1$D_IN = selectInput_0_1$wget ;
  assign arbiter_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect_1_1
  assign arbiter_lastSelect_1_1$D_IN = selectInput_1_1$wget ;
  assign arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_lastSelect_2
  assign arbiter_lastSelect_2$D_IN = selectInput_2$wget ;
  assign arbiter_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register axi4_mem_shim_tmp_addrOffset
  assign axi4_mem_shim_tmp_addrOffset$D_IN =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ?
	       64'd0 :
	       x__h7797 ;
  assign axi4_mem_shim_tmp_addrOffset$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ;

  // register axi4_mem_shim_tmp_doneSendingAW
  assign axi4_mem_shim_tmp_doneSendingAW$D_IN =
	     !axi4_mem_shim_tmp_tagCon$memory_request_get[91] ;
  assign axi4_mem_shim_tmp_doneSendingAW$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest &&
	     axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;

  // register axi4_mem_shim_tmp_reset_done
  assign axi4_mem_shim_tmp_reset_done$D_IN = 1'd1 ;
  assign axi4_mem_shim_tmp_reset_done$EN =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // register axi4_mem_shim_tmp_shimMaster_arff_rv
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_arff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_arff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_awff_rv
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_awff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_awff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_bff_rv
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_bff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_bff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_rff_rv
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_rff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_rff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimMaster_wff_rv
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN =
	     axi4_mem_shim_tmp_shimMaster_wff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimMaster_wff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_arff_rv
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_arff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_arff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_awff_rv
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_awff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_bff_rv
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_bff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_bff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_rff_rv
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_rff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_rff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_shimSlave_wff_rv
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN =
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port3__read ;
  assign axi4_mem_shim_tmp_shimSlave_wff_rv$EN = 1'b1 ;

  // register axi4_mem_shim_tmp_writeBurst
  assign axi4_mem_shim_tmp_writeBurst$D_IN =
	     !axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign axi4_mem_shim_tmp_writeBurst$EN =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genFirst ?
	       merged_0_awff$D_OUT[28:21] :
	       MUX_merged_0_flitLeft$write_1__VAL_2 ;
  assign merged_0_flitLeft$EN =
	     WILL_FIRE_RL_merged_0_genFirst ||
	     WILL_FIRE_RL_merged_0_genOther ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genFirst ?
	       merged_1_awff$D_OUT[28:21] :
	       MUX_merged_1_flitLeft$write_1__VAL_2 ;
  assign merged_1_flitLeft$EN =
	     WILL_FIRE_RL_merged_1_genFirst ||
	     WILL_FIRE_RL_merged_1_genOther ;

  // register moreFlits
  always@(MUX_moreFlits$write_1__SEL_1 or
	  MUX_moreFlits$write_1__VAL_1 or
	  MUX_moreFlits$write_1__SEL_2 or
	  MUX_moreFlits$write_1__VAL_2 or
	  MUX_moreFlits$write_1__SEL_3 or
	  MUX_moreFlits$write_1__VAL_3 or MUX_moreFlits$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_moreFlits$write_1__SEL_1:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_1;
      MUX_moreFlits$write_1__SEL_2:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_2;
      MUX_moreFlits$write_1__SEL_3:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_3;
      MUX_moreFlits$write_1__SEL_4:
	  moreFlits$D_IN = MUX_moreFlits$write_1__VAL_2;
      default: moreFlits$D_IN = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign moreFlits$EN =
	     WILL_FIRE_RL_input_first_flit && !inputPeek_0$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit && inputPeek_0$wget[2] ||
	     WILL_FIRE_RL_input_first_flit_1 && !inputPeek_1$wget[2] ||
	     WILL_FIRE_RL_input_follow_flit_1 && inputPeek_1$wget[2] ;

  // register moreFlits_1
  assign moreFlits_1$D_IN = MUX_moreFlits_1_2$write_1__VAL_2 ;
  assign moreFlits_1$EN =
	     WILL_FIRE_RL_input_follow_flit_5 ||
	     WILL_FIRE_RL_input_follow_flit_4 ||
	     WILL_FIRE_RL_input_follow_flit_3 ||
	     WILL_FIRE_RL_input_follow_flit_2 ;

  // register moreFlits_1_1
  assign moreFlits_1_1$D_IN = MUX_moreFlits$write_1__VAL_2 ;
  assign moreFlits_1_1$EN =
	     WILL_FIRE_RL_input_follow_flit_7 ||
	     WILL_FIRE_RL_input_follow_flit_6 ;

  // register moreFlits_1_2
  always@(MUX_moreFlits_1_2$write_1__SEL_1 or
	  MUX_moreFlits_1_2$write_1__VAL_1 or
	  MUX_moreFlits_1_2$write_1__SEL_2 or
	  MUX_moreFlits_1_2$write_1__VAL_2 or
	  MUX_moreFlits_1_2$write_1__SEL_3 or
	  MUX_moreFlits_1_2$write_1__VAL_3 or
	  MUX_moreFlits_1_2$write_1__SEL_4 or
	  MUX_moreFlits_1_2$write_1__SEL_5 or
	  MUX_moreFlits_1_2$write_1__VAL_5 or
	  MUX_moreFlits_1_2$write_1__SEL_6 or
	  MUX_moreFlits_1_2$write_1__SEL_7 or
	  MUX_moreFlits_1_2$write_1__VAL_7 or
	  MUX_moreFlits_1_2$write_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_moreFlits_1_2$write_1__SEL_1:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_1;
      MUX_moreFlits_1_2$write_1__SEL_2:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_2;
      MUX_moreFlits_1_2$write_1__SEL_3:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_3;
      MUX_moreFlits_1_2$write_1__SEL_4:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_2;
      MUX_moreFlits_1_2$write_1__SEL_5:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_5;
      MUX_moreFlits_1_2$write_1__SEL_6:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_2;
      MUX_moreFlits_1_2$write_1__SEL_7:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_7;
      MUX_moreFlits_1_2$write_1__SEL_8:
	  moreFlits_1_2$D_IN = MUX_moreFlits_1_2$write_1__VAL_2;
      default: moreFlits_1_2$D_IN = 7'bxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign moreFlits_1_2$EN =
	     WILL_FIRE_RL_input_first_flit_8 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_follow_flit_8 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_1[2] ||
	     WILL_FIRE_RL_input_first_flit_9 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ||
	     WILL_FIRE_RL_input_follow_flit_9 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_2[2] ||
	     WILL_FIRE_RL_input_first_flit_10 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ||
	     WILL_FIRE_RL_input_follow_flit_10 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_3[2] ||
	     WILL_FIRE_RL_input_first_flit_11 &&
	     !MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ||
	     WILL_FIRE_RL_input_follow_flit_11 &&
	     MUX_toDfltOutput_1_2$wset_1__VAL_4[2] ;

  // register noRouteSlv_1_currentReq
  assign noRouteSlv_1_currentReq$D_IN = noRouteSlv_1_currentReq$port1__read ;
  assign noRouteSlv_1_currentReq$EN = 1'b1 ;

  // register noRouteSlv_1_flitCount
  assign noRouteSlv_1_flitCount$D_IN = noRouteSlv_1_flitCount$port2__read ;
  assign noRouteSlv_1_flitCount$EN = 1'b1 ;

  // register noRouteSlv_drain_until_last
  assign noRouteSlv_drain_until_last$D_IN = !toDfltOutput$wget[2] ;
  assign noRouteSlv_drain_until_last$EN = CAN_FIRE_RL_dflt_output_selected ;

  // register noRouteSlv_m_send_rsp
  assign noRouteSlv_m_send_rsp$D_IN = noRouteSlv_m_send_rsp$port2__read ;
  assign noRouteSlv_m_send_rsp$EN = 1'b1 ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_axi4_mem_shim_tmp_shimSlave_wff_rv$port0__write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[102:95] ;
  assign split_0_flitLeft$EN =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_near_mem_io$axi4_slave_w_put_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[102:95] ;
  assign split_1_flitLeft$EN =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_plic$axi4_slave_w_put_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[102:95] ;
  assign split_2_flitLeft$EN =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;

  // submodule axi4_mem_shim_tmp_awreqff
  assign axi4_mem_shim_tmp_awreqff$D_IN =
	     axi4_mem_shim_tmp_shimSlave_awff_rv$port1__read[97:0] ;
  assign axi4_mem_shim_tmp_awreqff$ENQ =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_getCacheAW ;
  assign axi4_mem_shim_tmp_awreqff$DEQ =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite &&
	     axi4_mem_shim_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign axi4_mem_shim_tmp_awreqff$CLR = 1'b0 ;

  // submodule axi4_mem_shim_tmp_newRst
  assign axi4_mem_shim_tmp_newRst$ASSERT_IN =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_propagateReset ;

  // submodule axi4_mem_shim_tmp_tagCon
  assign axi4_mem_shim_tmp_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ?
	       MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_1 :
	       MUX_axi4_mem_shim_tmp_tagCon$cache_request_put_1__VAL_2 ;
  assign axi4_mem_shim_tmp_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ?
	       MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_1 :
	       MUX_axi4_mem_shim_tmp_tagCon$memory_response_put_1__VAL_2 ;
  assign axi4_mem_shim_tmp_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheWrite ||
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passCacheRead ;
  assign axi4_mem_shim_tmp_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passCacheResponse ;
  assign axi4_mem_shim_tmp_tagCon$EN_memory_request_get =
	     CAN_FIRE_RL_axi4_mem_shim_tmp_passMemoryRequest ;
  assign axi4_mem_shim_tmp_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseWrite ||
	     WILL_FIRE_RL_axi4_mem_shim_tmp_passMemoryResponseRead ;

  // submodule cpu
  assign cpu$dma_server_ar_put_val = dma_server_ar_put_val ;
  assign cpu$dma_server_aw_put_val = dma_server_aw_put_val ;
  assign cpu$dma_server_w_put_val = dma_server_w_put_val ;
  assign cpu$hart0_csr_mem_server_request_put =
	     debug_module$hart0_csr_mem_client_request_get ;
  assign cpu$hart0_fpr_mem_server_request_put =
	     debug_module$hart0_fpr_mem_client_request_get ;
  assign cpu$hart0_gpr_mem_server_request_put =
	     debug_module$hart0_gpr_mem_client_request_get ;
  assign cpu$hart0_put_other_req_put = debug_module$hart0_get_other_req_get ;
  assign cpu$hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ?
	       f_reset_reqs$D_OUT :
	       debug_module$hart0_reset_client_request_get ;
  assign cpu$hart0_server_run_halt_request_put =
	     debug_module$hart0_client_run_halt_request_get ;
  assign cpu$imem_master_b_put_val = delay_shim_bff$D_OUT ;
  assign cpu$imem_master_r_put_val = delay_shim_rff$D_OUT ;
  assign cpu$m_external_interrupt_req_set_not_clear = plic$v_targets_0_m_eip ;
  assign cpu$mem_master_b_put_val = toOutput_0_1$wget[6:1] ;
  assign cpu$mem_master_r_put_val = toOutput_1_0_1$wget[72:1] ;
  assign cpu$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign cpu$s_external_interrupt_req_set_not_clear = plic$v_targets_1_m_eip ;
  assign cpu$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$software_interrupt_req_set_not_clear =
	     near_mem_io$get_sw_interrupt_req_get ;
  assign cpu$timer_interrupt_req_set_not_clear =
	     near_mem_io$get_timer_interrupt_req_get ;
  assign cpu$EN_hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign cpu$EN_hart0_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$EN_imem_master_aw_drop = CAN_FIRE_RL_ug_src_doDrop ;
  assign cpu$EN_imem_master_w_drop = CAN_FIRE_RL_ug_src_1_doDrop ;
  assign cpu$EN_imem_master_b_put = CAN_FIRE_RL_ug_snk_2_doPut ;
  assign cpu$EN_imem_master_ar_drop = CAN_FIRE_RL_ug_src_3_doDrop ;
  assign cpu$EN_imem_master_r_put = CAN_FIRE_RL_ug_snk_4_doPut ;
  assign cpu$EN_mem_master_aw_drop = CAN_FIRE_RL_merged_0_awFlit ;
  assign cpu$EN_mem_master_w_drop = CAN_FIRE_RL_merged_0_wFlit ;
  assign cpu$EN_mem_master_b_put = CAN_FIRE_RL_output_selected_3 ;
  assign cpu$EN_mem_master_ar_drop =
	     WILL_FIRE_RL_input_follow_flit_6 ||
	     WILL_FIRE_RL_input_first_flit_6 ;
  assign cpu$EN_mem_master_r_put = CAN_FIRE_RL_output_selected_8 ;
  assign cpu$EN_dma_server_aw_put = EN_dma_server_aw_put ;
  assign cpu$EN_dma_server_w_put = EN_dma_server_w_put ;
  assign cpu$EN_dma_server_b_drop = EN_dma_server_b_drop ;
  assign cpu$EN_dma_server_ar_put = EN_dma_server_ar_put ;
  assign cpu$EN_dma_server_r_drop = EN_dma_server_r_drop ;
  assign cpu$EN_hart0_server_run_halt_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign cpu$EN_hart0_server_run_halt_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign cpu$EN_hart0_put_other_req_put =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign cpu$EN_hart0_gpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign cpu$EN_hart0_gpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign cpu$EN_hart0_fpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign cpu$EN_hart0_fpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign cpu$EN_hart0_csr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign cpu$EN_hart0_csr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = dm_dmi_read_addr_dm_addr ;
  assign debug_module$dmi_write_dm_addr = dm_dmi_write_dm_addr ;
  assign debug_module$dmi_write_dm_word = dm_dmi_write_dm_word ;
  assign debug_module$hart0_client_run_halt_response_put =
	     cpu$hart0_server_run_halt_response_get ;
  assign debug_module$hart0_csr_mem_client_response_put =
	     cpu$hart0_csr_mem_server_response_get ;
  assign debug_module$hart0_fpr_mem_client_response_put =
	     cpu$hart0_fpr_mem_server_response_get ;
  assign debug_module$hart0_gpr_mem_client_response_put =
	     cpu$hart0_gpr_mem_server_response_get ;
  assign debug_module$hart0_reset_client_response_put =
	     cpu$hart0_server_reset_response_get ;
  assign debug_module$master_b_put_val = toOutput_1_1$wget[6:1] ;
  assign debug_module$master_r_put_val = toOutput_1_1_2$wget[72:1] ;
  assign debug_module$ndm_reset_client_response_put =
	     ndm_reset_client_response_put ;
  assign debug_module$EN_dmi_read_addr = EN_dm_dmi_read_addr ;
  assign debug_module$EN_dmi_read_data = EN_dm_dmi_read_data ;
  assign debug_module$EN_dmi_write = EN_dm_dmi_write ;
  assign debug_module$EN_hart0_reset_client_request_get =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign debug_module$EN_hart0_reset_client_response_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     !f_reset_requestor$D_OUT ;
  assign debug_module$EN_hart0_client_run_halt_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign debug_module$EN_hart0_client_run_halt_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign debug_module$EN_hart0_get_other_req_get =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign debug_module$EN_hart0_gpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign debug_module$EN_hart0_gpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign debug_module$EN_hart0_fpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign debug_module$EN_hart0_fpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign debug_module$EN_hart0_csr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign debug_module$EN_hart0_csr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;
  assign debug_module$EN_master_aw_drop = CAN_FIRE_RL_merged_1_awFlit ;
  assign debug_module$EN_master_w_drop = CAN_FIRE_RL_merged_1_wFlit ;
  assign debug_module$EN_master_b_put = CAN_FIRE_RL_output_selected_4 ;
  assign debug_module$EN_master_ar_drop =
	     WILL_FIRE_RL_input_follow_flit_7 ||
	     WILL_FIRE_RL_input_first_flit_7 ;
  assign debug_module$EN_master_r_put = CAN_FIRE_RL_output_selected_9 ;

  // submodule delay_shim_arff
  assign delay_shim_arff$D_IN = cpu$imem_master_ar_peek ;
  assign delay_shim_arff$ENQ = CAN_FIRE_RL_ug_snk_3_doPut ;
  assign delay_shim_arff$DEQ = EN_cpu_imem_master_ar_drop ;
  assign delay_shim_arff$CLR = 1'b0 ;

  // submodule delay_shim_awff
  assign delay_shim_awff$D_IN = cpu$imem_master_aw_peek ;
  assign delay_shim_awff$ENQ = CAN_FIRE_RL_ug_snk_doPut ;
  assign delay_shim_awff$DEQ = EN_cpu_imem_master_aw_drop ;
  assign delay_shim_awff$CLR = 1'b0 ;

  // submodule delay_shim_bff
  assign delay_shim_bff$D_IN = cpu_imem_master_b_put_val ;
  assign delay_shim_bff$ENQ = EN_cpu_imem_master_b_put ;
  assign delay_shim_bff$DEQ = CAN_FIRE_RL_ug_src_2_doDrop ;
  assign delay_shim_bff$CLR = 1'b0 ;

  // submodule delay_shim_rff
  assign delay_shim_rff$D_IN = { cpu_imem_master_r_put_val, 1'd0 } ;
  assign delay_shim_rff$ENQ = EN_cpu_imem_master_r_put ;
  assign delay_shim_rff$DEQ = CAN_FIRE_RL_ug_src_4_doDrop ;
  assign delay_shim_rff$CLR = 1'b0 ;

  // submodule delay_shim_wff
  assign delay_shim_wff$D_IN = cpu$imem_master_w_peek ;
  assign delay_shim_wff$ENQ = CAN_FIRE_RL_ug_snk_1_doPut ;
  assign delay_shim_wff$DEQ = EN_cpu_imem_master_w_drop ;
  assign delay_shim_wff$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__93_AND_cpu__ETC___d299 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN =
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign f_reset_requestor$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart0_server_reset_response_get ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule merged_0_awff
  assign merged_0_awff$D_IN = cpu$mem_master_aw_peek ;
  assign merged_0_awff$ENQ = CAN_FIRE_RL_merged_0_awFlit ;
  assign merged_0_awff$DEQ = CAN_FIRE_RL_merged_0_genFirst ;
  assign merged_0_awff$CLR = 1'b0 ;

  // submodule merged_0_wff
  assign merged_0_wff$D_IN = cpu$mem_master_w_peek ;
  assign merged_0_wff$ENQ = CAN_FIRE_RL_merged_0_wFlit ;
  assign merged_0_wff$DEQ =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign merged_0_wff$CLR = 1'b0 ;

  // submodule merged_1_awff
  assign merged_1_awff$D_IN = debug_module$master_aw_peek ;
  assign merged_1_awff$ENQ = CAN_FIRE_RL_merged_1_awFlit ;
  assign merged_1_awff$DEQ = CAN_FIRE_RL_merged_1_genFirst ;
  assign merged_1_awff$CLR = 1'b0 ;

  // submodule merged_1_wff
  assign merged_1_wff$D_IN = debug_module$master_w_peek ;
  assign merged_1_wff$ENQ = CAN_FIRE_RL_merged_1_wFlit ;
  assign merged_1_wff$DEQ =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign merged_1_wff$CLR = 1'b0 ;

  // submodule near_mem_io
  assign near_mem_io$axi4_slave_ar_put_val =
	     { toOutput_1_1_1$wget[0], toOutput_1_1_1$wget[97:1] } ;
  assign near_mem_io$axi4_slave_aw_put_val = split_1_doPut$wget[171:74] ;
  assign near_mem_io$axi4_slave_w_put_val = split_1_doPut$wget[73:1] ;
  assign near_mem_io$set_addr_map_addr_base =
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign near_mem_io$set_addr_map_addr_lim =
	     soc_map$m_near_mem_io_addr_range[127:64] +
	     soc_map$m_near_mem_io_addr_range[63:0] ;
  assign near_mem_io$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign near_mem_io$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_set_addr_map =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_axi4_slave_aw_put =
	     MUX_near_mem_io$axi4_slave_w_put_1__SEL_2 ;
  assign near_mem_io$EN_axi4_slave_w_put =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign near_mem_io$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_input_follow_flit_4 ||
	     WILL_FIRE_RL_input_first_flit_4 ;
  assign near_mem_io$EN_axi4_slave_ar_put = CAN_FIRE_RL_output_selected_6 ;
  assign near_mem_io$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_input_follow_flit_10 ||
	     WILL_FIRE_RL_input_first_flit_10 ;
  assign near_mem_io$EN_get_timer_interrupt_req_get =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign near_mem_io$EN_get_sw_interrupt_req_get =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // submodule plic
  assign plic$axi4_slave_ar_put_val =
	     { toOutput_1_2$wget[0], toOutput_1_2$wget[97:1] } ;
  assign plic$axi4_slave_aw_put_val = split_2_doPut$wget[171:74] ;
  assign plic$axi4_slave_w_put_val = split_2_doPut$wget[73:1] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign plic$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_set_addr_map = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_axi4_slave_aw_put = MUX_plic$axi4_slave_w_put_1__SEL_2 ;
  assign plic$EN_axi4_slave_w_put =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign plic$EN_axi4_slave_b_drop =
	     WILL_FIRE_RL_input_follow_flit_5 ||
	     WILL_FIRE_RL_input_first_flit_5 ;
  assign plic$EN_axi4_slave_ar_put = CAN_FIRE_RL_output_selected_7 ;
  assign plic$EN_axi4_slave_r_drop =
	     WILL_FIRE_RL_input_follow_flit_11 ||
	     WILL_FIRE_RL_input_first_flit_11 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950 =
	     (!inputDest_0_1$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_0_1$wget[1] && debug_module$master_b_canPut :
	       inputDest_0_1$wget[0] ;
  assign IF_IF_inputDest_0_whas__43_THEN_NOT_inputDest__ETC___d683 =
	     (!inputDest_0$wget[0] ||
	      !IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626) ?
	       ((!inputDest_0$wget[1] ||
		 !IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630) ?
		  inputDest_0$wget[2] &&
		  IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 :
		  inputDest_0$wget[1]) :
	       inputDest_0$wget[0] ;
  assign IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584 =
	     (!inputDest_1_0_1$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_0_1$wget[1] && debug_module$master_r_canPut :
	       inputDest_1_0_1$wget[0] ;
  assign IF_IF_inputDest_1_0_whas__320_THEN_NOT_inputDe_ETC___d1360 =
	     (!inputDest_1_0$wget[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) ?
	       ((!inputDest_1_0$wget[1] ||
		 !near_mem_io$axi4_slave_ar_canPut) ?
		  inputDest_1_0$wget[2] && plic$axi4_slave_ar_canPut :
		  inputDest_1_0$wget[1]) :
	       inputDest_1_0$wget[0] ;
  assign IF_IF_inputDest_1_1_1_whas__366_THEN_NOT_input_ETC___d1390 =
	     (!inputDest_1_1_1$wget[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) ?
	       ((!inputDest_1_1_1$wget[1] ||
		 !near_mem_io$axi4_slave_ar_canPut) ?
		  inputDest_1_1_1$wget[2] && plic$axi4_slave_ar_canPut :
		  inputDest_1_1_1$wget[1]) :
	       inputDest_1_1_1$wget[0] ;
  assign IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599 =
	     (!inputDest_1_1_2$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_1_2$wget[1] && debug_module$master_r_canPut :
	       inputDest_1_1_2$wget[0] ;
  assign IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965 =
	     (!inputDest_1_1$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_1_1$wget[1] && debug_module$master_b_canPut :
	       inputDest_1_1$wget[0] ;
  assign IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615 =
	     (!inputDest_1_2$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_2$wget[1] && debug_module$master_r_canPut :
	       inputDest_1_2$wget[0] ;
  assign IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630 =
	     (!inputDest_1_3$wget[0] || !cpu$mem_master_r_canPut) ?
	       inputDest_1_3$wget[1] && debug_module$master_r_canPut :
	       inputDest_1_3$wget[0] ;
  assign IF_IF_inputDest_1_whas__89_THEN_NOT_inputDest__ETC___d713 =
	     (!inputDest_1$wget[0] ||
	      !IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626) ?
	       ((!inputDest_1$wget[1] ||
		 !IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630) ?
		  inputDest_1$wget[2] &&
		  IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 :
		  inputDest_1$wget[1]) :
	       inputDest_1$wget[0] ;
  assign IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981 =
	     (!inputDest_2$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_2$wget[1] && debug_module$master_b_canPut :
	       inputDest_2$wget[0] ;
  assign IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996 =
	     (!inputDest_3$wget[0] || !cpu$mem_master_b_canPut) ?
	       inputDest_3$wget[1] && debug_module$master_b_canPut :
	       inputDest_3$wget[0] ;
  assign IF_NOT_moreFlits_17_BIT_0_97_08_OR_NOT_outputC_ETC___d814 =
	     (!moreFlits[0] ||
	      !IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626) ?
	       ((!moreFlits[1] ||
		 !IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630) ?
		  moreFlits[2] &&
		  IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 :
		  moreFlits[1]) :
	       moreFlits[0] ;
  assign IF_NOT_moreFlits_1_000_BIT_0_186_187_OR_NOT_ou_ETC___d1191 =
	     (!moreFlits_1[0] || !cpu$mem_master_b_canPut) ?
	       moreFlits_1[1] && debug_module$master_b_canPut :
	       moreFlits_1[0] ;
  assign IF_NOT_moreFlits_1_1_394_BIT_0_456_467_OR_NOT__ETC___d1473 =
	     (!moreFlits_1_1[0] ||
	      !(!axi4_mem_shim_tmp_shimSlave_arff_rv[98])) ?
	       ((!moreFlits_1_1[1] || !near_mem_io$axi4_slave_ar_canPut) ?
		  moreFlits_1_1[2] && plic$axi4_slave_ar_canPut :
		  moreFlits_1_1[1]) :
	       moreFlits_1_1[0] ;
  assign IF_NOT_moreFlits_1_2_634_BIT_0_824_825_OR_NOT__ETC___d1829 =
	     (!moreFlits_1_2[0] || !cpu$mem_master_r_canPut) ?
	       moreFlits_1_2[1] && debug_module$master_r_canPut :
	       moreFlits_1_2[0] ;
  assign IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 =
	     (merged_0_flitLeft == 8'd0) ?
	       merged_0_awff$EMPTY_N && merged_0_wff$EMPTY_N :
	       merged_0_wff$EMPTY_N ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d557 =
	     (CAN_FIRE_RL_merged_0_passFlit && !merged_0_outflit$wget[171]) ?
	       merged_0_outflit$wget[170:0] :
	       { 97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 CAN_FIRE_RL_merged_0_passFlit ?
		   merged_0_outflit$wget[73:0] :
		   merged_0_wff$D_OUT } ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d563 =
	     addr__h26801 < soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d565 =
	     x__h26860 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d568 =
	     addr__h26801 < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d571 =
	     x__h26885 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d574 =
	     addr__h26801[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d563 ||
	      !IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d565) &&
	     !IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d568 &&
	     IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d571 ;
  assign IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d581 =
	     addr__h26801[63:40] == 24'd0 &&
	     (IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d563 ||
	      !IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d565) &&
	     (IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d568 ||
	      !IF_merged_0_outflit_whas__44_AND_NOT_merged_0__ETC___d571) ;
  assign IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 =
	     (merged_1_flitLeft == 8'd0) ?
	       merged_1_awff$EMPTY_N && merged_1_wff$EMPTY_N :
	       merged_1_wff$EMPTY_N ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d600 =
	     (CAN_FIRE_RL_merged_1_passFlit && !merged_1_outflit$wget[171]) ?
	       merged_1_outflit$wget[170:0] :
	       { 97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 CAN_FIRE_RL_merged_1_passFlit ?
		   merged_1_outflit$wget[73:0] :
		   merged_1_wff$D_OUT } ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d606 =
	     addr__h27693 < soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d608 =
	     x__h27750 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d611 =
	     addr__h27693 < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d614 =
	     x__h27775 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d617 =
	     addr__h27693[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d606 ||
	      !IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d608) &&
	     !IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d611 &&
	     IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d614 ;
  assign IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d624 =
	     addr__h27693[63:40] == 24'd0 &&
	     (IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d606 ||
	      !IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d608) &&
	     (IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d611 ||
	      !IF_merged_1_outflit_whas__87_AND_NOT_merged_1__ETC___d614) ;
  assign IF_split_0_flitLeft_59_EQ_0_60_THEN_NOT_axi4_m_ETC___d626 =
	     (split_0_flitLeft == 8'd0) ?
	       !axi4_mem_shim_tmp_shimSlave_awff_rv[98] &&
	       !axi4_mem_shim_tmp_shimSlave_wff_rv[74] :
	       !axi4_mem_shim_tmp_shimSlave_wff_rv[74] ;
  assign IF_split_1_flitLeft_90_EQ_0_91_THEN_near_mem_i_ETC___d630 =
	     (split_1_flitLeft == 8'd0) ?
	       near_mem_io$axi4_slave_aw_canPut &&
	       near_mem_io$axi4_slave_w_canPut :
	       near_mem_io$axi4_slave_w_canPut ;
  assign IF_split_2_flitLeft_19_EQ_0_20_THEN_plic_axi4__ETC___d634 =
	     (split_2_flitLeft == 8'd0) ?
	       plic$axi4_slave_aw_canPut && plic$axi4_slave_w_canPut :
	       plic$axi4_slave_w_canPut ;
  assign NOT_IF_IF_inputDest_0_whas__43_THEN_inputDest__ETC___d661 =
	     (inputDest_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     dfltOutputCanPut$wget ;
  assign NOT_IF_IF_inputDest_1_0_whas__320_THEN_inputDe_ETC___d1338 =
	     (inputDest_1_0$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_0$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_1_flitCount == 9'd0 ;
  assign NOT_IF_IF_inputDest_1_1_1_whas__366_THEN_input_ETC___d1381 =
	     (inputDest_1_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1_1_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_1_flitCount == 9'd0 ;
  assign NOT_IF_IF_inputDest_1_whas__89_THEN_inputDest__ETC___d704 =
	     (inputDest_1$wget[0] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[1] ? 2'd1 : 2'd0) +
	     (inputDest_1$wget[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     dfltOutputCanPut$wget ;
  assign NOT_IF_moreFlits_17_BIT_0_97_THEN_1_ELSE_0_98__ETC___d807 =
	     (moreFlits[0] ? 2'd1 : 2'd0) + (moreFlits[1] ? 2'd1 : 2'd0) +
	     (moreFlits[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     dfltOutputCanPut$wget ;
  assign NOT_IF_moreFlits_1_1_394_BIT_0_456_THEN_1_ELSE_ETC___d1466 =
	     (moreFlits_1_1[0] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[1] ? 2'd1 : 2'd0) +
	     (moreFlits_1_1[2] ? 2'd1 : 2'd0) !=
	     2'd1 &&
	     noRouteSlv_1_flitCount == 9'd0 ;
  assign NOT_SEXT_arbiter_1_lastSelect_1_638_639_BIT_0__ETC___d1684 =
	     !SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1656 &&
	     !SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664 &&
	     !SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 &&
	     !SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 ;
  assign NOT_SEXT_arbiter_lastSelect_1_004_005_BIT_0_00_ETC___d1050 =
	     !SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1022 &&
	     !SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030 &&
	     !SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 &&
	     !SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21 =
	     {2{SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_402_403_BIT_0_404_ETC__q15 =
	     {2{SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410}} ;
  assign SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9 =
	     {2{SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046}} ;
  assign SEXT_SEXT_arbiter_firstHot_25_26_BIT_0_27_AND__ETC__q3 =
	     {2{SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733}} ;
  assign SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 =
	     x__h92578 | y__h92579 ;
  assign SEXT_arbiter_1_firstHot_1__q17 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410 =
	     x__h75118 | y__h75119 ;
  assign SEXT_arbiter_1_firstHot__q13 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664 =
	     x__h92226 | y__h92227 ;
  assign SEXT_arbiter_1_lastSelect_1_1__q19 = {2{arbiter_1_lastSelect_1_1}} ;
  assign SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1656 =
	     x__h92026 | y__h92027 ;
  assign SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1687 =
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1656 ||
	     SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664 ||
	     SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 ||
	     SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 ;
  assign SEXT_arbiter_1_lastSelect_1__q18 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 =
	     x__h92402 | y__h92403 ;
  assign SEXT_arbiter_1_lastSelect_2__q20 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 =
	     x__h75015 | y__h75016 ;
  assign SEXT_arbiter_1_lastSelect__q14 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 =
	     x__h54646 | y__h54647 ;
  assign SEXT_arbiter_firstHot_1__q5 = {2{arbiter_firstHot_1}} ;
  assign SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733 =
	     x__h32278 | y__h32279 ;
  assign SEXT_arbiter_firstHot__q1 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1022 =
	     x__h54094 | y__h54095 ;
  assign SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1053 =
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1022 ||
	     SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030 ||
	     SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 ||
	     SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 ;
  assign SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030 =
	     x__h54294 | y__h54295 ;
  assign SEXT_arbiter_lastSelect_1_1__q7 = {2{arbiter_lastSelect_1_1}} ;
  assign SEXT_arbiter_lastSelect_1__q6 = {2{arbiter_lastSelect_1}} ;
  assign SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 =
	     x__h32175 | y__h32176 ;
  assign SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 =
	     x__h54470 | y__h54471 ;
  assign SEXT_arbiter_lastSelect_2__q8 = {2{arbiter_lastSelect_2}} ;
  assign SEXT_arbiter_lastSelect__q2 = {2{arbiter_lastSelect}} ;
  assign SEXT_x2702__q4 = {2{x__h32702}} ;
  assign SEXT_x3227__q22 = {2{x__h93227}} ;
  assign SEXT_x3264__q23 = {2{x__h93264}} ;
  assign SEXT_x3299__q24 = {2{x__h93299}} ;
  assign SEXT_x5295__q10 = {2{x__h55295}} ;
  assign SEXT_x5332__q11 = {2{x__h55332}} ;
  assign SEXT_x5367__q12 = {2{x__h55367}} ;
  assign SEXT_x5542__q16 = {2{x__h75542}} ;
  assign _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237 =
	     x__h12139 + y__h12140 ;
  assign addr__h26801 =
	     (CAN_FIRE_RL_merged_0_passFlit && !merged_0_outflit$wget[171]) ?
	       merged_0_outflit$wget[166:103] :
	       64'd0 ;
  assign addr__h27693 =
	     (CAN_FIRE_RL_merged_1_passFlit && !merged_1_outflit$wget[171]) ?
	       merged_1_outflit$wget[166:103] :
	       64'd0 ;
  assign arcache__h15172 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[8] ? 4'd0 : 4'd15 ;
  assign arlen__h15168 =
	     { 5'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[5:3] } ;
  assign aw_awaddr__h10330 = tmp__h10172 + { 60'd0, x__h10405 } ;
  assign aw_awsize_val__h12069 =
	     _0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237[0] ?
	       3'd0 :
	       (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237[1] ?
		  3'd1 :
		  (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237[2] ?
		     3'd2 :
		     (_0_CONCAT_axi4_mem_shim_tmp_tagCon_memory_reque_ETC___d237[3] ?
			3'd3 :
			3'd4))) ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1263 =
	     cpu$mem_master_ar_peek[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1265 =
	     x__h69731 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1268 =
	     cpu$mem_master_ar_peek[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1271 =
	     x__h69756 < soc_map$m_plic_addr_range[63:0] ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1274 =
	     cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1263 ||
	      !cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1265) &&
	     !cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1268 &&
	     cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1271 ;
  assign cpu_mem_master_ar_peek__258_BITS_92_TO_69_260__ETC___d1281 =
	     cpu$mem_master_ar_peek[92:69] == 24'd0 &&
	     (cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1263 ||
	      !cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1265) &&
	     (cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1268 ||
	      !cpu_mem_master_ar_peek__258_BITS_92_TO_29_262__ETC___d1271) ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1290 =
	     debug_module$master_ar_peek[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1292 =
	     x__h70549 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1295 =
	     debug_module$master_ar_peek[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1298 =
	     x__h70574 < soc_map$m_plic_addr_range[63:0] ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1301 =
	     debug_module$master_ar_peek[92:69] == 24'd0 &&
	     (debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1290 ||
	      !debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1292) &&
	     !debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1295 &&
	     debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1298 ;
  assign debug_module_master_ar_peek__285_BITS_92_TO_69_ETC___d1308 =
	     debug_module$master_ar_peek[92:69] == 24'd0 &&
	     (debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1290 ||
	      !debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1292) &&
	     (debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1295 ||
	      !debug_module_master_ar_peek__285_BITS_92_TO_29_ETC___d1298) ;
  assign inputCanPeek_0_whas__40_AND_inputCanPeek_0_wge_ETC___d716 =
	     IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	     (NOT_IF_IF_inputDest_0_whas__43_THEN_inputDest__ETC___d661 ||
	      IF_IF_inputDest_0_whas__43_THEN_NOT_inputDest__ETC___d683) ||
	     IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	     (NOT_IF_IF_inputDest_1_whas__89_THEN_inputDest__ETC___d704 ||
	      IF_IF_inputDest_1_whas__89_THEN_NOT_inputDest__ETC___d713) ;
  assign inputCanPeek_1_0_whas__317_AND_inputCanPeek_1__ETC___d1393 =
	     cpu$mem_master_ar_canPeek &&
	     (NOT_IF_IF_inputDest_1_0_whas__320_THEN_inputDe_ETC___d1338 ||
	      IF_IF_inputDest_1_0_whas__320_THEN_NOT_inputDe_ETC___d1360) ||
	     debug_module$master_ar_canPeek &&
	     (NOT_IF_IF_inputDest_1_1_1_whas__366_THEN_input_ETC___d1381 ||
	      IF_IF_inputDest_1_1_1_whas__366_THEN_NOT_input_ETC___d1390) ;
  assign plic_RDY_server_reset_request_put__93_AND_cpu__ETC___d299 =
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign split_0_doPut_whas__47_AND_split_0_doPut_wget__ETC___d458 =
	     CAN_FIRE_RL_output_selected &&
	     (split_0_doPut$wget[172] ||
	      !axi4_mem_shim_tmp_shimSlave_awff_rv[98] &&
	      !axi4_mem_shim_tmp_shimSlave_wff_rv[74]) ;
  assign split_1_doPut_whas__82_AND_split_1_doPut_wget__ETC___d489 =
	     CAN_FIRE_RL_output_selected_1 &&
	     (split_1_doPut$wget[172] ||
	      near_mem_io$RDY_axi4_slave_w_put &&
	      near_mem_io$RDY_axi4_slave_aw_put) ;
  assign split_2_doPut_whas__11_AND_split_2_doPut_wget__ETC___d518 =
	     CAN_FIRE_RL_output_selected_2 &&
	     (split_2_doPut$wget[172] ||
	      plic$RDY_axi4_slave_w_put && plic$RDY_axi4_slave_aw_put) ;
  assign tmp__h10172 = { 24'd0, x__h10362 } ;
  assign tmp__h7954 =
	     axi4_mem_shim_tmp_awreqff$D_OUT[92:29] +
	     axi4_mem_shim_tmp_addrOffset ;
  assign v_araddr__h15184 =
	     { 24'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[140:101] } ;
  assign v_arid__h15183 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[100:95] :
	       6'd0 ;
  assign v_arlen__h15185 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arlen__h15168 :
	       8'd0 ;
  assign v_arsize_val__h15230 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       axi4_mem_shim_tmp_tagCon$memory_request_get[2:0] :
	       3'b0 ;
  assign x__h10362 =
	     { axi4_mem_shim_tmp_tagCon$memory_request_get[140:104], 3'd0 } ;
  assign x__h10405 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[81] ?
	       4'd0 :
	       (axi4_mem_shim_tmp_tagCon$memory_request_get[82] ?
		  4'd1 :
		  (axi4_mem_shim_tmp_tagCon$memory_request_get[83] ?
		     4'd2 :
		     (axi4_mem_shim_tmp_tagCon$memory_request_get[84] ?
			4'd3 :
			(axi4_mem_shim_tmp_tagCon$memory_request_get[85] ?
			   4'd4 :
			   (axi4_mem_shim_tmp_tagCon$memory_request_get[86] ?
			      4'd5 :
			      (axi4_mem_shim_tmp_tagCon$memory_request_get[87] ?
				 4'd6 :
				 (axi4_mem_shim_tmp_tagCon$memory_request_get[88] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h12139 = x__h12151 + y__h12152 ;
  assign x__h12151 = x__h12163 + y__h12164 ;
  assign x__h12163 = x__h12175 + y__h12176 ;
  assign x__h12175 = x__h12187 + y__h12188 ;
  assign x__h12187 = x__h12199 + y__h12200 ;
  assign x__h12199 = x__h12211 + y__h12212 ;
  assign x__h12211 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[88] } ;
  assign x__h13735 =
	     axi4_mem_shim_tmp_tagCon$memory_request_get[90] ? 4'd0 : 4'd15 ;
  assign x__h15248 =
	     (axi4_mem_shim_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arcache__h15172 :
	       4'd0 ;
  assign x__h26860 = addr__h26801 - soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h26885 = addr__h26801 - soc_map$m_plic_addr_range[127:64] ;
  assign x__h27750 = addr__h27693 - soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h27775 = addr__h27693 - soc_map$m_plic_addr_range[127:64] ;
  assign x__h32175 =
	     SEXT_arbiter_lastSelect__q2[0] &
	     (IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	      (NOT_IF_IF_inputDest_0_whas__43_THEN_inputDest__ETC___d661 ||
	       IF_IF_inputDest_0_whas__43_THEN_NOT_inputDest__ETC___d683)) ;
  assign x__h32278 =
	     SEXT_arbiter_firstHot__q1[0] &
	     (IF_merged_0_flitLeft_90_EQ_0_91_THEN_merged_0__ETC___d543 &&
	      (NOT_IF_IF_inputDest_0_whas__43_THEN_inputDest__ETC___d661 ||
	       IF_IF_inputDest_0_whas__43_THEN_NOT_inputDest__ETC___d683)) ;
  assign x__h32643 =
	     SEXT_SEXT_arbiter_firstHot_25_26_BIT_0_27_AND__ETC__q3[0] &
	     arbiter_firstHot ;
  assign x__h32702 =
	     !SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733 &&
	     SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 ;
  assign x__h32784 = SEXT_x2702__q4[0] & arbiter_firstHot ;
  assign x__h54094 = x__h54096 | y__h54097 ;
  assign x__h54096 =
	     SEXT_arbiter_lastSelect_1__q6[0] &
	     (noRouteSlv_m_send_rsp$port1__read[5] &&
	      IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950) ;
  assign x__h54168 =
	     SEXT_arbiter_lastSelect_2__q8[0] &
	     (near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981) ;
  assign x__h54294 = x__h54296 | y__h54297 ;
  assign x__h54296 =
	     SEXT_arbiter_lastSelect_1_1__q7[0] &
	     (noRouteSlv_m_send_rsp$port1__read[5] &&
	      IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950) ;
  assign x__h54356 =
	     SEXT_arbiter_firstHot_1__q5[0] &
	     (near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981) ;
  assign x__h54470 = x__h54472 | y__h54473 ;
  assign x__h54472 =
	     SEXT_arbiter_lastSelect_2__q8[0] &
	     (noRouteSlv_m_send_rsp$port1__read[5] &&
	      IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950) ;
  assign x__h54532 =
	     SEXT_arbiter_lastSelect_1__q6[0] &
	     (near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981) ;
  assign x__h54646 = x__h54648 | y__h54649 ;
  assign x__h54648 =
	     SEXT_arbiter_firstHot_1__q5[0] &
	     (noRouteSlv_m_send_rsp$port1__read[5] &&
	      IF_IF_inputDest_0_1_whas__32_THEN_NOT_inputDes_ETC___d950) ;
  assign x__h54708 =
	     SEXT_arbiter_lastSelect_1_1__q7[0] &
	     (near_mem_io$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_2_whas__71_THEN_NOT_inputDest__ETC___d981) ;
  assign x__h55232 = x__h55234 | y__h55235 ;
  assign x__h55234 =
	     SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9[0] &
	     arbiter_firstHot_1 ;
  assign x__h55295 =
	     !SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 &&
	     SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 ;
  assign x__h55303 = SEXT_x5332__q11[0] & arbiter_lastSelect_1_1 ;
  assign x__h55332 =
	     !SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 &&
	     !SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 &&
	     SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030 ;
  assign x__h55367 =
	     !SEXT_arbiter_lastSelect_1_1_008_009_BIT_0_010__ETC___d1030 &&
	     !SEXT_arbiter_lastSelect_2_013_014_BIT_0_015_AN_ETC___d1038 &&
	     !SEXT_arbiter_firstHot_1_017_018_BIT_0_019_AND__ETC___d1046 &&
	     SEXT_arbiter_lastSelect_1_004_005_BIT_0_006_AN_ETC___d1022 ;
  assign x__h55471 = x__h55473 | y__h55474 ;
  assign x__h55473 = SEXT_x5295__q10[0] & arbiter_firstHot_1 ;
  assign x__h55533 = SEXT_x5367__q12[0] & arbiter_lastSelect_1_1 ;
  assign x__h55691 = x__h55693 | y__h55694 ;
  assign x__h55693 = SEXT_x5332__q11[0] & arbiter_firstHot_1 ;
  assign x__h55753 =
	     SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9[0] &
	     arbiter_lastSelect_1_1 ;
  assign x__h55917 = x__h55919 | y__h55920 ;
  assign x__h55919 = SEXT_x5367__q12[0] & arbiter_firstHot_1 ;
  assign x__h55979 = SEXT_x5295__q10[0] & arbiter_lastSelect_1_1 ;
  assign x__h69731 =
	     cpu$mem_master_ar_peek[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h69756 =
	     cpu$mem_master_ar_peek[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h70549 =
	     debug_module$master_ar_peek[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h70574 =
	     debug_module$master_ar_peek[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h75015 =
	     SEXT_arbiter_1_lastSelect__q14[0] &
	     (cpu$mem_master_ar_canPeek &&
	      (NOT_IF_IF_inputDest_1_0_whas__320_THEN_inputDe_ETC___d1338 ||
	       IF_IF_inputDest_1_0_whas__320_THEN_NOT_inputDe_ETC___d1360)) ;
  assign x__h75118 =
	     SEXT_arbiter_1_firstHot__q13[0] &
	     (cpu$mem_master_ar_canPeek &&
	      (NOT_IF_IF_inputDest_1_0_whas__320_THEN_inputDe_ETC___d1338 ||
	       IF_IF_inputDest_1_0_whas__320_THEN_NOT_inputDe_ETC___d1360)) ;
  assign x__h75483 =
	     SEXT_SEXT_arbiter_1_firstHot_402_403_BIT_0_404_ETC__q15[0] &
	     arbiter_1_firstHot ;
  assign x__h75542 =
	     !SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410 &&
	     SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 ;
  assign x__h75624 = SEXT_x5542__q16[0] & arbiter_1_firstHot ;
  assign x__h7797 =
	     axi4_mem_shim_tmp_addrOffset +
	     (64'd1 << axi4_mem_shim_tmp_awreqff$D_OUT[20:18]) ;
  assign x__h92026 = x__h92028 | y__h92029 ;
  assign x__h92028 =
	     SEXT_arbiter_1_lastSelect_1__q18[0] &
	     (x__h97108 != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584) ;
  assign x__h92100 =
	     SEXT_arbiter_1_lastSelect_2__q20[0] &
	     (near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615) ;
  assign x__h92226 = x__h92228 | y__h92229 ;
  assign x__h92228 =
	     SEXT_arbiter_1_lastSelect_1_1__q19[0] &
	     (x__h97108 != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584) ;
  assign x__h92288 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615) ;
  assign x__h92402 = x__h92404 | y__h92405 ;
  assign x__h92404 =
	     SEXT_arbiter_1_lastSelect_2__q20[0] &
	     (x__h97108 != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584) ;
  assign x__h92464 =
	     SEXT_arbiter_1_lastSelect_1__q18[0] &
	     (near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615) ;
  assign x__h92578 = x__h92580 | y__h92581 ;
  assign x__h92580 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (x__h97108 != 9'd0 &&
	      IF_IF_inputDest_1_0_1_whas__566_THEN_NOT_input_ETC___d1584) ;
  assign x__h92640 =
	     SEXT_arbiter_1_lastSelect_1_1__q19[0] &
	     (near_mem_io$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_2_whas__605_THEN_NOT_inputDe_ETC___d1615) ;
  assign x__h93164 = x__h93166 | y__h93167 ;
  assign x__h93166 =
	     SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h93227 =
	     !SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 &&
	     SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 ;
  assign x__h93235 = SEXT_x3264__q23[0] & arbiter_1_lastSelect_1_1 ;
  assign x__h93264 =
	     !SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 &&
	     !SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 &&
	     SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664 ;
  assign x__h93299 =
	     !SEXT_arbiter_1_lastSelect_1_1_642_643_BIT_0_64_ETC___d1664 &&
	     !SEXT_arbiter_1_lastSelect_2_647_648_BIT_0_649__ETC___d1672 &&
	     !SEXT_arbiter_1_firstHot_1_651_652_BIT_0_653_AN_ETC___d1680 &&
	     SEXT_arbiter_1_lastSelect_1_638_639_BIT_0_640__ETC___d1656 ;
  assign x__h93403 = x__h93405 | y__h93406 ;
  assign x__h93405 = SEXT_x3227__q22[0] & arbiter_1_firstHot_1 ;
  assign x__h93465 = SEXT_x3299__q24[0] & arbiter_1_lastSelect_1_1 ;
  assign x__h93623 = x__h93625 | y__h93626 ;
  assign x__h93625 = SEXT_x3264__q23[0] & arbiter_1_firstHot_1 ;
  assign x__h93685 =
	     SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21[0] &
	     arbiter_1_lastSelect_1_1 ;
  assign x__h93849 = x__h93851 | y__h93852 ;
  assign x__h93851 = SEXT_x3299__q24[0] & arbiter_1_firstHot_1 ;
  assign x__h93911 = SEXT_x3227__q22[0] & arbiter_1_lastSelect_1_1 ;
  assign x__h97108 =
	     CAN_FIRE_RL_dflt_output_selected_1 ?
	       noRouteSlv_1_flitCount$port0__write_1 :
	       noRouteSlv_1_flitCount ;
  assign y__h12140 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[81] } ;
  assign y__h12152 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[82] } ;
  assign y__h12164 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[83] } ;
  assign y__h12176 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[84] } ;
  assign y__h12188 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[85] } ;
  assign y__h12200 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[86] } ;
  assign y__h12212 =
	     { 3'd0, axi4_mem_shim_tmp_tagCon$memory_request_get[87] } ;
  assign y__h32176 =
	     SEXT_arbiter_firstHot__q1[0] &
	     (IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	      (NOT_IF_IF_inputDest_1_whas__89_THEN_inputDest__ETC___d704 ||
	       IF_IF_inputDest_1_whas__89_THEN_NOT_inputDest__ETC___d713)) ;
  assign y__h32279 =
	     SEXT_arbiter_lastSelect__q2[0] &
	     (IF_merged_1_flitLeft_26_EQ_0_27_THEN_merged_1__ETC___d586 &&
	      (NOT_IF_IF_inputDest_1_whas__89_THEN_inputDest__ETC___d704 ||
	       IF_IF_inputDest_1_whas__89_THEN_NOT_inputDest__ETC___d713)) ;
  assign y__h32644 = SEXT_x2702__q4[0] & arbiter_lastSelect ;
  assign y__h32785 =
	     SEXT_SEXT_arbiter_firstHot_25_26_BIT_0_27_AND__ETC__q3[0] &
	     arbiter_lastSelect ;
  assign y__h54095 = x__h54168 | y__h54169 ;
  assign y__h54097 =
	     SEXT_arbiter_lastSelect_1_1__q7[0] &
	     (axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965) ;
  assign y__h54169 =
	     SEXT_arbiter_firstHot_1__q5[0] &
	     (plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996) ;
  assign y__h54295 = x__h54356 | y__h54357 ;
  assign y__h54297 =
	     SEXT_arbiter_lastSelect_2__q8[0] &
	     (axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965) ;
  assign y__h54357 =
	     SEXT_arbiter_lastSelect_1__q6[0] &
	     (plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996) ;
  assign y__h54471 = x__h54532 | y__h54533 ;
  assign y__h54473 =
	     SEXT_arbiter_firstHot_1__q5[0] &
	     (axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965) ;
  assign y__h54533 =
	     SEXT_arbiter_lastSelect_1_1__q7[0] &
	     (plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996) ;
  assign y__h54647 = x__h54708 | y__h54709 ;
  assign y__h54649 =
	     SEXT_arbiter_lastSelect_1__q6[0] &
	     (axi4_mem_shim_tmp_shimSlave_bff_rv$port1__read[7] &&
	      IF_IF_inputDest_1_1_whas__55_THEN_NOT_inputDes_ETC___d965) ;
  assign y__h54709 =
	     SEXT_arbiter_lastSelect_2__q8[0] &
	     (plic$axi4_slave_b_canPeek &&
	      IF_IF_inputDest_3_whas__86_THEN_NOT_inputDest__ETC___d996) ;
  assign y__h55233 = x__h55303 | y__h55304 ;
  assign y__h55235 = SEXT_x5295__q10[0] & arbiter_lastSelect_2 ;
  assign y__h55304 = SEXT_x5367__q12[0] & arbiter_lastSelect_1 ;
  assign y__h55472 = x__h55533 | y__h55534 ;
  assign y__h55474 = SEXT_x5332__q11[0] & arbiter_lastSelect_2 ;
  assign y__h55534 =
	     SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9[0] &
	     arbiter_lastSelect_1 ;
  assign y__h55692 = x__h55753 | y__h55754 ;
  assign y__h55694 = SEXT_x5367__q12[0] & arbiter_lastSelect_2 ;
  assign y__h55754 = SEXT_x5295__q10[0] & arbiter_lastSelect_1 ;
  assign y__h55918 = x__h55979 | y__h55980 ;
  assign y__h55920 =
	     SEXT_SEXT_arbiter_firstHot_1_017_018_BIT_0_019_ETC__q9[0] &
	     arbiter_lastSelect_2 ;
  assign y__h55980 = SEXT_x5332__q11[0] & arbiter_lastSelect_1 ;
  assign y__h75016 =
	     SEXT_arbiter_1_firstHot__q13[0] &
	     (debug_module$master_ar_canPeek &&
	      (NOT_IF_IF_inputDest_1_1_1_whas__366_THEN_input_ETC___d1381 ||
	       IF_IF_inputDest_1_1_1_whas__366_THEN_NOT_input_ETC___d1390)) ;
  assign y__h75119 =
	     SEXT_arbiter_1_lastSelect__q14[0] &
	     (debug_module$master_ar_canPeek &&
	      (NOT_IF_IF_inputDest_1_1_1_whas__366_THEN_input_ETC___d1381 ||
	       IF_IF_inputDest_1_1_1_whas__366_THEN_NOT_input_ETC___d1390)) ;
  assign y__h75484 = SEXT_x5542__q16[0] & arbiter_1_lastSelect ;
  assign y__h75625 =
	     SEXT_SEXT_arbiter_1_firstHot_402_403_BIT_0_404_ETC__q15[0] &
	     arbiter_1_lastSelect ;
  assign y__h92027 = x__h92100 | y__h92101 ;
  assign y__h92029 =
	     SEXT_arbiter_1_lastSelect_1_1__q19[0] &
	     (axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599) ;
  assign y__h92101 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630) ;
  assign y__h92227 = x__h92288 | y__h92289 ;
  assign y__h92229 =
	     SEXT_arbiter_1_lastSelect_2__q20[0] &
	     (axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599) ;
  assign y__h92289 =
	     SEXT_arbiter_1_lastSelect_1__q18[0] &
	     (plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630) ;
  assign y__h92403 = x__h92464 | y__h92465 ;
  assign y__h92405 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599) ;
  assign y__h92465 =
	     SEXT_arbiter_1_lastSelect_1_1__q19[0] &
	     (plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630) ;
  assign y__h92579 = x__h92640 | y__h92641 ;
  assign y__h92581 =
	     SEXT_arbiter_1_lastSelect_1__q18[0] &
	     (axi4_mem_shim_tmp_shimSlave_rff_rv$port1__read[73] &&
	      IF_IF_inputDest_1_1_2_whas__589_THEN_NOT_input_ETC___d1599) ;
  assign y__h92641 =
	     SEXT_arbiter_1_lastSelect_2__q20[0] &
	     (plic$axi4_slave_r_canPeek &&
	      IF_IF_inputDest_1_3_whas__620_THEN_NOT_inputDe_ETC___d1630) ;
  assign y__h93165 = x__h93235 | y__h93236 ;
  assign y__h93167 = SEXT_x3227__q22[0] & arbiter_1_lastSelect_2 ;
  assign y__h93236 = SEXT_x3299__q24[0] & arbiter_1_lastSelect_1 ;
  assign y__h93404 = x__h93465 | y__h93466 ;
  assign y__h93406 = SEXT_x3264__q23[0] & arbiter_1_lastSelect_2 ;
  assign y__h93466 =
	     SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21[0] &
	     arbiter_1_lastSelect_1 ;
  assign y__h93624 = x__h93685 | y__h93686 ;
  assign y__h93626 = SEXT_x3299__q24[0] & arbiter_1_lastSelect_2 ;
  assign y__h93686 = SEXT_x3227__q22[0] & arbiter_1_lastSelect_1 ;
  assign y__h93850 = x__h93911 | y__h93912 ;
  assign y__h93852 =
	     SEXT_SEXT_arbiter_1_firstHot_1_651_652_BIT_0_6_ETC__q21[0] &
	     arbiter_1_lastSelect_2 ;
  assign y__h93912 = SEXT_x3264__q23[0] & arbiter_1_lastSelect_1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY 64'd0;
	axi4_mem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_mem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      99'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 8'bxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 7'bxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi4_mem_shim_tmp_writeBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	moreFlits <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 5'bxxxxx /* unspecified value */  };
	moreFlits_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 6'bxxxxxx /* unspecified value */  };
	moreFlits_1_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 5'bxxxxx /* unspecified value */  };
	moreFlits_1_2 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 6'bxxxxxx /* unspecified value */  };
	noRouteSlv_1_currentReq <= `BSV_ASSIGNMENT_DELAY
	    98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	noRouteSlv_1_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	noRouteSlv_drain_until_last <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noRouteSlv_m_send_rsp <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 5'bxxxxx /* unspecified value */  };
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_1_1$EN)
	  arbiter_1_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_firstHot_1$EN)
	  arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot_1$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (arbiter_lastSelect_1$EN)
	  arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_1$D_IN;
	if (arbiter_lastSelect_1_1$EN)
	  arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_1_1$D_IN;
	if (arbiter_lastSelect_2$EN)
	  arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_lastSelect_2$D_IN;
	if (axi4_mem_shim_tmp_addrOffset$EN)
	  axi4_mem_shim_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_addrOffset$D_IN;
	if (axi4_mem_shim_tmp_doneSendingAW$EN)
	  axi4_mem_shim_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_doneSendingAW$D_IN;
	if (axi4_mem_shim_tmp_reset_done$EN)
	  axi4_mem_shim_tmp_reset_done <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_reset_done$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_arff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_arff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_awff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_awff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_bff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_bff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_rff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_rff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimMaster_wff_rv$EN)
	  axi4_mem_shim_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimMaster_wff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_arff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_arff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_awff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_awff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_bff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_bff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_rff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_rff_rv$D_IN;
	if (axi4_mem_shim_tmp_shimSlave_wff_rv$EN)
	  axi4_mem_shim_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_shimSlave_wff_rv$D_IN;
	if (axi4_mem_shim_tmp_writeBurst$EN)
	  axi4_mem_shim_tmp_writeBurst <= `BSV_ASSIGNMENT_DELAY
	      axi4_mem_shim_tmp_writeBurst$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (moreFlits$EN) moreFlits <= `BSV_ASSIGNMENT_DELAY moreFlits$D_IN;
	if (moreFlits_1$EN)
	  moreFlits_1 <= `BSV_ASSIGNMENT_DELAY moreFlits_1$D_IN;
	if (moreFlits_1_1$EN)
	  moreFlits_1_1 <= `BSV_ASSIGNMENT_DELAY moreFlits_1_1$D_IN;
	if (moreFlits_1_2$EN)
	  moreFlits_1_2 <= `BSV_ASSIGNMENT_DELAY moreFlits_1_2$D_IN;
	if (noRouteSlv_1_currentReq$EN)
	  noRouteSlv_1_currentReq <= `BSV_ASSIGNMENT_DELAY
	      noRouteSlv_1_currentReq$D_IN;
	if (noRouteSlv_1_flitCount$EN)
	  noRouteSlv_1_flitCount <= `BSV_ASSIGNMENT_DELAY
	      noRouteSlv_1_flitCount$D_IN;
	if (noRouteSlv_drain_until_last$EN)
	  noRouteSlv_drain_until_last <= `BSV_ASSIGNMENT_DELAY
	      noRouteSlv_drain_until_last$D_IN;
	if (noRouteSlv_m_send_rsp$EN)
	  noRouteSlv_m_send_rsp <= `BSV_ASSIGNMENT_DELAY
	      noRouteSlv_m_send_rsp$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_1_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_firstHot_1 = 1'h0;
    arbiter_lastSelect = 1'h0;
    arbiter_lastSelect_1 = 1'h0;
    arbiter_lastSelect_1_1 = 1'h0;
    arbiter_lastSelect_2 = 1'h0;
    axi4_mem_shim_tmp_addrOffset = 64'hAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_doneSendingAW = 1'h0;
    axi4_mem_shim_tmp_reset_done = 1'h0;
    axi4_mem_shim_tmp_shimMaster_arff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_awff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_bff_rv = 9'h0AA;
    axi4_mem_shim_tmp_shimMaster_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimMaster_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_bff_rv = 8'hAA;
    axi4_mem_shim_tmp_shimSlave_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_shimSlave_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    axi4_mem_shim_tmp_writeBurst = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    moreFlits = 6'h2A;
    moreFlits_1 = 7'h2A;
    moreFlits_1_1 = 6'h2A;
    moreFlits_1_2 = 7'h2A;
    noRouteSlv_1_currentReq = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    noRouteSlv_1_flitCount = 9'h0AA;
    noRouteSlv_drain_until_last = 1'h0;
    noRouteSlv_m_send_rsp = 6'h2A;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 &&
	  !SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_398_399_BIT_0_400_AN_ETC___d1406 &&
	  !SEXT_arbiter_1_firstHot_402_403_BIT_0_404_AND__ETC___d1410)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6)
	begin
	  v__h76251 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h76251,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7)
	begin
	  v__h76652 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7)
	$display("%0t -- %m error: input#%0d ",
		 v__h76652,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_7) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_6 && WILL_FIRE_RL_input_follow_flit_6)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_6] and\n  [RL_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_6 ||
	   WILL_FIRE_RL_input_follow_flit_6) &&
	  (WILL_FIRE_RL_input_first_flit_7 ||
	   WILL_FIRE_RL_input_follow_flit_7))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_6,\n  RL_input_follow_flit_6] and [RL_input_first_flit_7, RL_input_follow_flit_7]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_7 && WILL_FIRE_RL_input_follow_flit_7)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_7] and\n  [RL_input_follow_flit_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected_5 && WILL_FIRE_RL_output_selected_6)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5] and\n  [RL_output_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected_5 ||
	   WILL_FIRE_RL_output_selected_6) &&
	  WILL_FIRE_RL_output_selected_7)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5,\n  RL_output_selected_6] and [RL_output_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected_5 || WILL_FIRE_RL_output_selected_6 ||
	   WILL_FIRE_RL_output_selected_7) &&
	  WILL_FIRE_RL_dflt_output_selected_1)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_5,\n  RL_output_selected_6, RL_output_selected_7] and [RL_dflt_output_selected_1]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  NOT_SEXT_arbiter_1_lastSelect_1_638_639_BIT_0__ETC___d1684)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  NOT_SEXT_arbiter_1_lastSelect_1_638_639_BIT_0__ETC___d1684)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8)
	begin
	  v__h94892 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8)
	$display("%0t -- %m error: input#%0d ",
		 v__h94892,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_8) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	begin
	  v__h95133 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	$write("%0t -- %m error: input#%0d ",
	       v__h95133,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 && !inputDest_1_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 && inputDest_1_0_1$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 && !inputDest_1_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8 && inputDest_1_0_1$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_8) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9)
	begin
	  v__h95422 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9)
	$display("%0t -- %m error: input#%0d ",
		 v__h95422,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_9) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	begin
	  v__h95663 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	$write("%0t -- %m error: input#%0d ",
	       v__h95663,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 && !inputDest_1_1_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 && inputDest_1_1_2$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 && !inputDest_1_1_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9 && inputDest_1_1_2$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_9) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10)
	begin
	  v__h95952 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10)
	$display("%0t -- %m error: input#%0d ",
		 v__h95952,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	begin
	  v__h96193 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	$write("%0t -- %m error: input#%0d ",
	       v__h96193,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 && !inputDest_1_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 && inputDest_1_2$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 && !inputDest_1_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10 && inputDest_1_2$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11)
	begin
	  v__h96482 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11)
	$display("%0t -- %m error: input#%0d ",
		 v__h96482,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_11) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	begin
	  v__h96723 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	$write("%0t -- %m error: input#%0d ",
	       v__h96723,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 && !inputDest_1_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 && inputDest_1_3$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 && !inputDest_1_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11 && inputDest_1_3$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_11) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_9 && WILL_FIRE_RL_input_follow_flit_9)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_9] and\n  [RL_input_follow_flit_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_10 &&
	  WILL_FIRE_RL_input_follow_flit_10)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_10] and\n  [RL_input_follow_flit_10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_8 && WILL_FIRE_RL_input_follow_flit_8)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8] and\n  [RL_input_follow_flit_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8) &&
	  (WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8] and [RL_input_first_flit_9, RL_input_follow_flit_9]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8 ||
	   WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9) &&
	  (WILL_FIRE_RL_input_first_flit_10 ||
	   WILL_FIRE_RL_input_follow_flit_10))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8, RL_input_first_flit_9, RL_input_follow_flit_9] and\n  [RL_input_first_flit_10, RL_input_follow_flit_10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_8 ||
	   WILL_FIRE_RL_input_follow_flit_8 ||
	   WILL_FIRE_RL_input_first_flit_9 ||
	   WILL_FIRE_RL_input_follow_flit_9 ||
	   WILL_FIRE_RL_input_first_flit_10 ||
	   WILL_FIRE_RL_input_follow_flit_10) &&
	  (WILL_FIRE_RL_input_first_flit_11 ||
	   WILL_FIRE_RL_input_follow_flit_11))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_8,\n  RL_input_follow_flit_8, RL_input_first_flit_9, RL_input_follow_flit_9,\n  RL_input_first_flit_10, RL_input_follow_flit_10] and\n  [RL_input_first_flit_11, RL_input_follow_flit_11] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_11 &&
	  WILL_FIRE_RL_input_follow_flit_11)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_11] and\n  [RL_input_follow_flit_11] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected_8 && WILL_FIRE_RL_output_selected_9)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_8] and\n  [RL_output_selected_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 &&
	  !SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_21_22_BIT_0_23_AND_inp_ETC___d729 &&
	  !SEXT_arbiter_firstHot_25_26_BIT_0_27_AND_input_ETC___d733)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail)
	begin
	  v__h33411 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h33411,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1)
	begin
	  v__h33814 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h33814,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit && WILL_FIRE_RL_input_follow_flit)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 256, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit] and\n  [RL_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit || WILL_FIRE_RL_input_follow_flit) &&
	  (WILL_FIRE_RL_input_first_flit_1 ||
	   WILL_FIRE_RL_input_follow_flit_1))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit,\n  RL_input_follow_flit] and [RL_input_first_flit_1, RL_input_follow_flit_1] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_1 && WILL_FIRE_RL_input_follow_flit_1)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_1] and\n  [RL_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h17328 = $stime;
	  #0;
	end
    v__h17322 = v__h17328 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_soc_start", v__h17322);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	begin
	  v__h17506 = $stime;
	  #0;
	end
    v__h17500 = v__h17506 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_dm_start", v__h17500);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h17872 = $stime;
	  #0;
	end
    v__h17866 = v__h17872 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%0d: Core.rl_cpu_hart0_reset_complete", v__h17866);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected && WILL_FIRE_RL_output_selected_1)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected] and\n  [RL_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected || WILL_FIRE_RL_output_selected_1) &&
	  WILL_FIRE_RL_output_selected_2)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected,\n  RL_output_selected_1] and [RL_output_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_output_selected || WILL_FIRE_RL_output_selected_1 ||
	   WILL_FIRE_RL_output_selected_2) &&
	  WILL_FIRE_RL_dflt_output_selected)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected,\n  RL_output_selected_1, RL_output_selected_2] and [RL_dflt_output_selected] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  NOT_SEXT_arbiter_lastSelect_1_004_005_BIT_0_00_ETC___d1050)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  NOT_SEXT_arbiter_lastSelect_1_004_005_BIT_0_00_ETC___d1050)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2)
	begin
	  v__h56960 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h56960,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	begin
	  v__h57201 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h57201,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && !inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && inputDest_0_1$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && !inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2 && inputDest_0_1$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3)
	begin
	  v__h57490 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h57490,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	begin
	  v__h57731 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h57731,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 && !inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 && inputDest_1_1$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 && !inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3 && inputDest_1_1$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4)
	begin
	  v__h58020 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h58020,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	begin
	  v__h58261 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h58261,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 && !inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 && inputDest_2$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 && !inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4 && inputDest_2$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5)
	begin
	  v__h58550 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h58550,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	begin
	  v__h58791 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h58791,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 && !inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 && inputDest_3$wget[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 && !inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5 && inputDest_3$wget[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_3 && WILL_FIRE_RL_input_follow_flit_3)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_3] and\n  [RL_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_4 && WILL_FIRE_RL_input_follow_flit_4)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_4] and\n  [RL_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_2 && WILL_FIRE_RL_input_follow_flit_2)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2] and\n  [RL_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2) &&
	  (WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2] and [RL_input_first_flit_3, RL_input_follow_flit_3]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2 ||
	   WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3) &&
	  (WILL_FIRE_RL_input_first_flit_4 ||
	   WILL_FIRE_RL_input_follow_flit_4))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2, RL_input_first_flit_3, RL_input_follow_flit_3] and\n  [RL_input_first_flit_4, RL_input_follow_flit_4] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_input_first_flit_2 ||
	   WILL_FIRE_RL_input_follow_flit_2 ||
	   WILL_FIRE_RL_input_first_flit_3 ||
	   WILL_FIRE_RL_input_follow_flit_3 ||
	   WILL_FIRE_RL_input_first_flit_4 ||
	   WILL_FIRE_RL_input_follow_flit_4) &&
	  (WILL_FIRE_RL_input_first_flit_5 ||
	   WILL_FIRE_RL_input_follow_flit_5))
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_2,\n  RL_input_follow_flit_2, RL_input_first_flit_3, RL_input_follow_flit_3,\n  RL_input_first_flit_4, RL_input_follow_flit_4] and [RL_input_first_flit_5,\n  RL_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_input_first_flit_5 && WILL_FIRE_RL_input_follow_flit_5)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 257, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit_5] and\n  [RL_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_output_selected_3 && WILL_FIRE_RL_output_selected_4)
	$display("Error: \"../libs/BlueStuff/OneWayBus.bsv\", line 322, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_output_selected_3] and\n  [RL_output_selected_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !merged_0_wff$D_OUT[1] &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !merged_1_wff$D_OUT[1] &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkCore

