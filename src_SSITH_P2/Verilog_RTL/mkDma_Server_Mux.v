//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// initiator_A_server_awready     O     1 reg
// initiator_A_server_wready      O     1 reg
// initiator_A_server_bvalid      O     1 reg
// initiator_A_server_bid         O    16 reg
// initiator_A_server_bresp       O     2 reg
// initiator_A_server_arready     O     1 reg
// initiator_A_server_rvalid      O     1 reg
// initiator_A_server_rid         O    16 reg
// initiator_A_server_rdata       O   512 reg
// initiator_A_server_rresp       O     2 reg
// initiator_A_server_rlast       O     1 reg
// initiator_B_server_awready     O     1 reg
// initiator_B_server_wready      O     1 reg
// initiator_B_server_bvalid      O     1 reg
// initiator_B_server_bid         O    16 reg
// initiator_B_server_bresp       O     2 reg
// initiator_B_server_arready     O     1 reg
// initiator_B_server_rvalid      O     1 reg
// initiator_B_server_rid         O    16 reg
// initiator_B_server_rdata       O    64 reg
// initiator_B_server_rresp       O     2 reg
// initiator_B_server_rlast       O     1 reg
// target_client_awvalid          O     1 reg
// target_client_awid             O    16 reg
// target_client_awaddr           O    64 reg
// target_client_awlen            O     8 reg
// target_client_awsize           O     3 reg
// target_client_awburst          O     2 reg
// target_client_awlock           O     1 reg
// target_client_awcache          O     4 reg
// target_client_awprot           O     3 reg
// target_client_awqos            O     4 reg
// target_client_awregion         O     4 reg
// target_client_wvalid           O     1 reg
// target_client_wdata            O   512 reg
// target_client_wstrb            O    64 reg
// target_client_wlast            O     1 reg
// target_client_bready           O     1 reg
// target_client_arvalid          O     1 reg
// target_client_arid             O    16 reg
// target_client_araddr           O    64 reg
// target_client_arlen            O     8 reg
// target_client_arsize           O     3 reg
// target_client_arburst          O     2 reg
// target_client_arlock           O     1 reg
// target_client_arcache          O     4 reg
// target_client_arprot           O     3 reg
// target_client_arqos            O     4 reg
// target_client_arregion         O     4 reg
// target_client_rready           O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// initiator_A_server_awvalid     I     1
// initiator_A_server_awid        I    16 reg
// initiator_A_server_awaddr      I    64 reg
// initiator_A_server_awlen       I     8 reg
// initiator_A_server_awsize      I     3 reg
// initiator_A_server_awburst     I     2 reg
// initiator_A_server_awlock      I     1 reg
// initiator_A_server_awcache     I     4 reg
// initiator_A_server_awprot      I     3 reg
// initiator_A_server_awqos       I     4 reg
// initiator_A_server_awregion    I     4 reg
// initiator_A_server_wvalid      I     1
// initiator_A_server_wdata       I   512 reg
// initiator_A_server_wstrb       I    64 reg
// initiator_A_server_wlast       I     1 reg
// initiator_A_server_bready      I     1
// initiator_A_server_arvalid     I     1
// initiator_A_server_arid        I    16 reg
// initiator_A_server_araddr      I    64 reg
// initiator_A_server_arlen       I     8 reg
// initiator_A_server_arsize      I     3 reg
// initiator_A_server_arburst     I     2 reg
// initiator_A_server_arlock      I     1 reg
// initiator_A_server_arcache     I     4 reg
// initiator_A_server_arprot      I     3 reg
// initiator_A_server_arqos       I     4 reg
// initiator_A_server_arregion    I     4 reg
// initiator_A_server_rready      I     1
// initiator_B_server_awvalid     I     1
// initiator_B_server_awid        I    16 reg
// initiator_B_server_awaddr      I    64 reg
// initiator_B_server_awlen       I     8 reg
// initiator_B_server_awsize      I     3 reg
// initiator_B_server_awburst     I     2 reg
// initiator_B_server_awlock      I     1 reg
// initiator_B_server_awcache     I     4 reg
// initiator_B_server_awprot      I     3 reg
// initiator_B_server_awqos       I     4 reg
// initiator_B_server_awregion    I     4 reg
// initiator_B_server_wvalid      I     1
// initiator_B_server_wdata       I    64 reg
// initiator_B_server_wstrb       I     8 reg
// initiator_B_server_wlast       I     1 reg
// initiator_B_server_bready      I     1
// initiator_B_server_arvalid     I     1
// initiator_B_server_arid        I    16 reg
// initiator_B_server_araddr      I    64 reg
// initiator_B_server_arlen       I     8 reg
// initiator_B_server_arsize      I     3 reg
// initiator_B_server_arburst     I     2 reg
// initiator_B_server_arlock      I     1 reg
// initiator_B_server_arcache     I     4 reg
// initiator_B_server_arprot      I     3 reg
// initiator_B_server_arqos       I     4 reg
// initiator_B_server_arregion    I     4 reg
// initiator_B_server_rready      I     1
// target_client_awready          I     1
// target_client_wready           I     1
// target_client_bvalid           I     1
// target_client_bid              I    16 reg
// target_client_bresp            I     2 reg
// target_client_arready          I     1
// target_client_rvalid           I     1
// target_client_rid              I    16 reg
// target_client_rdata            I   512 reg
// target_client_rresp            I     2 reg
// target_client_rlast            I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDma_Server_Mux(CLK,
			RST_N,

			initiator_A_server_awvalid,
			initiator_A_server_awid,
			initiator_A_server_awaddr,
			initiator_A_server_awlen,
			initiator_A_server_awsize,
			initiator_A_server_awburst,
			initiator_A_server_awlock,
			initiator_A_server_awcache,
			initiator_A_server_awprot,
			initiator_A_server_awqos,
			initiator_A_server_awregion,

			initiator_A_server_awready,

			initiator_A_server_wvalid,
			initiator_A_server_wdata,
			initiator_A_server_wstrb,
			initiator_A_server_wlast,

			initiator_A_server_wready,

			initiator_A_server_bvalid,

			initiator_A_server_bid,

			initiator_A_server_bresp,

			initiator_A_server_bready,

			initiator_A_server_arvalid,
			initiator_A_server_arid,
			initiator_A_server_araddr,
			initiator_A_server_arlen,
			initiator_A_server_arsize,
			initiator_A_server_arburst,
			initiator_A_server_arlock,
			initiator_A_server_arcache,
			initiator_A_server_arprot,
			initiator_A_server_arqos,
			initiator_A_server_arregion,

			initiator_A_server_arready,

			initiator_A_server_rvalid,

			initiator_A_server_rid,

			initiator_A_server_rdata,

			initiator_A_server_rresp,

			initiator_A_server_rlast,

			initiator_A_server_rready,

			initiator_B_server_awvalid,
			initiator_B_server_awid,
			initiator_B_server_awaddr,
			initiator_B_server_awlen,
			initiator_B_server_awsize,
			initiator_B_server_awburst,
			initiator_B_server_awlock,
			initiator_B_server_awcache,
			initiator_B_server_awprot,
			initiator_B_server_awqos,
			initiator_B_server_awregion,

			initiator_B_server_awready,

			initiator_B_server_wvalid,
			initiator_B_server_wdata,
			initiator_B_server_wstrb,
			initiator_B_server_wlast,

			initiator_B_server_wready,

			initiator_B_server_bvalid,

			initiator_B_server_bid,

			initiator_B_server_bresp,

			initiator_B_server_bready,

			initiator_B_server_arvalid,
			initiator_B_server_arid,
			initiator_B_server_araddr,
			initiator_B_server_arlen,
			initiator_B_server_arsize,
			initiator_B_server_arburst,
			initiator_B_server_arlock,
			initiator_B_server_arcache,
			initiator_B_server_arprot,
			initiator_B_server_arqos,
			initiator_B_server_arregion,

			initiator_B_server_arready,

			initiator_B_server_rvalid,

			initiator_B_server_rid,

			initiator_B_server_rdata,

			initiator_B_server_rresp,

			initiator_B_server_rlast,

			initiator_B_server_rready,

			target_client_awvalid,

			target_client_awid,

			target_client_awaddr,

			target_client_awlen,

			target_client_awsize,

			target_client_awburst,

			target_client_awlock,

			target_client_awcache,

			target_client_awprot,

			target_client_awqos,

			target_client_awregion,

			target_client_awready,

			target_client_wvalid,

			target_client_wdata,

			target_client_wstrb,

			target_client_wlast,

			target_client_wready,

			target_client_bvalid,
			target_client_bid,
			target_client_bresp,

			target_client_bready,

			target_client_arvalid,

			target_client_arid,

			target_client_araddr,

			target_client_arlen,

			target_client_arsize,

			target_client_arburst,

			target_client_arlock,

			target_client_arcache,

			target_client_arprot,

			target_client_arqos,

			target_client_arregion,

			target_client_arready,

			target_client_rvalid,
			target_client_rid,
			target_client_rdata,
			target_client_rresp,
			target_client_rlast,

			target_client_rready);
  input  CLK;
  input  RST_N;

  // action method initiator_A_server_m_awvalid
  input  initiator_A_server_awvalid;
  input  [15 : 0] initiator_A_server_awid;
  input  [63 : 0] initiator_A_server_awaddr;
  input  [7 : 0] initiator_A_server_awlen;
  input  [2 : 0] initiator_A_server_awsize;
  input  [1 : 0] initiator_A_server_awburst;
  input  initiator_A_server_awlock;
  input  [3 : 0] initiator_A_server_awcache;
  input  [2 : 0] initiator_A_server_awprot;
  input  [3 : 0] initiator_A_server_awqos;
  input  [3 : 0] initiator_A_server_awregion;

  // value method initiator_A_server_m_awready
  output initiator_A_server_awready;

  // action method initiator_A_server_m_wvalid
  input  initiator_A_server_wvalid;
  input  [511 : 0] initiator_A_server_wdata;
  input  [63 : 0] initiator_A_server_wstrb;
  input  initiator_A_server_wlast;

  // value method initiator_A_server_m_wready
  output initiator_A_server_wready;

  // value method initiator_A_server_m_bvalid
  output initiator_A_server_bvalid;

  // value method initiator_A_server_m_bid
  output [15 : 0] initiator_A_server_bid;

  // value method initiator_A_server_m_bresp
  output [1 : 0] initiator_A_server_bresp;

  // value method initiator_A_server_m_buser

  // action method initiator_A_server_m_bready
  input  initiator_A_server_bready;

  // action method initiator_A_server_m_arvalid
  input  initiator_A_server_arvalid;
  input  [15 : 0] initiator_A_server_arid;
  input  [63 : 0] initiator_A_server_araddr;
  input  [7 : 0] initiator_A_server_arlen;
  input  [2 : 0] initiator_A_server_arsize;
  input  [1 : 0] initiator_A_server_arburst;
  input  initiator_A_server_arlock;
  input  [3 : 0] initiator_A_server_arcache;
  input  [2 : 0] initiator_A_server_arprot;
  input  [3 : 0] initiator_A_server_arqos;
  input  [3 : 0] initiator_A_server_arregion;

  // value method initiator_A_server_m_arready
  output initiator_A_server_arready;

  // value method initiator_A_server_m_rvalid
  output initiator_A_server_rvalid;

  // value method initiator_A_server_m_rid
  output [15 : 0] initiator_A_server_rid;

  // value method initiator_A_server_m_rdata
  output [511 : 0] initiator_A_server_rdata;

  // value method initiator_A_server_m_rresp
  output [1 : 0] initiator_A_server_rresp;

  // value method initiator_A_server_m_rlast
  output initiator_A_server_rlast;

  // value method initiator_A_server_m_ruser

  // action method initiator_A_server_m_rready
  input  initiator_A_server_rready;

  // action method initiator_B_server_m_awvalid
  input  initiator_B_server_awvalid;
  input  [15 : 0] initiator_B_server_awid;
  input  [63 : 0] initiator_B_server_awaddr;
  input  [7 : 0] initiator_B_server_awlen;
  input  [2 : 0] initiator_B_server_awsize;
  input  [1 : 0] initiator_B_server_awburst;
  input  initiator_B_server_awlock;
  input  [3 : 0] initiator_B_server_awcache;
  input  [2 : 0] initiator_B_server_awprot;
  input  [3 : 0] initiator_B_server_awqos;
  input  [3 : 0] initiator_B_server_awregion;

  // value method initiator_B_server_m_awready
  output initiator_B_server_awready;

  // action method initiator_B_server_m_wvalid
  input  initiator_B_server_wvalid;
  input  [63 : 0] initiator_B_server_wdata;
  input  [7 : 0] initiator_B_server_wstrb;
  input  initiator_B_server_wlast;

  // value method initiator_B_server_m_wready
  output initiator_B_server_wready;

  // value method initiator_B_server_m_bvalid
  output initiator_B_server_bvalid;

  // value method initiator_B_server_m_bid
  output [15 : 0] initiator_B_server_bid;

  // value method initiator_B_server_m_bresp
  output [1 : 0] initiator_B_server_bresp;

  // value method initiator_B_server_m_buser

  // action method initiator_B_server_m_bready
  input  initiator_B_server_bready;

  // action method initiator_B_server_m_arvalid
  input  initiator_B_server_arvalid;
  input  [15 : 0] initiator_B_server_arid;
  input  [63 : 0] initiator_B_server_araddr;
  input  [7 : 0] initiator_B_server_arlen;
  input  [2 : 0] initiator_B_server_arsize;
  input  [1 : 0] initiator_B_server_arburst;
  input  initiator_B_server_arlock;
  input  [3 : 0] initiator_B_server_arcache;
  input  [2 : 0] initiator_B_server_arprot;
  input  [3 : 0] initiator_B_server_arqos;
  input  [3 : 0] initiator_B_server_arregion;

  // value method initiator_B_server_m_arready
  output initiator_B_server_arready;

  // value method initiator_B_server_m_rvalid
  output initiator_B_server_rvalid;

  // value method initiator_B_server_m_rid
  output [15 : 0] initiator_B_server_rid;

  // value method initiator_B_server_m_rdata
  output [63 : 0] initiator_B_server_rdata;

  // value method initiator_B_server_m_rresp
  output [1 : 0] initiator_B_server_rresp;

  // value method initiator_B_server_m_rlast
  output initiator_B_server_rlast;

  // value method initiator_B_server_m_ruser

  // action method initiator_B_server_m_rready
  input  initiator_B_server_rready;

  // value method target_client_m_awvalid
  output target_client_awvalid;

  // value method target_client_m_awid
  output [15 : 0] target_client_awid;

  // value method target_client_m_awaddr
  output [63 : 0] target_client_awaddr;

  // value method target_client_m_awlen
  output [7 : 0] target_client_awlen;

  // value method target_client_m_awsize
  output [2 : 0] target_client_awsize;

  // value method target_client_m_awburst
  output [1 : 0] target_client_awburst;

  // value method target_client_m_awlock
  output target_client_awlock;

  // value method target_client_m_awcache
  output [3 : 0] target_client_awcache;

  // value method target_client_m_awprot
  output [2 : 0] target_client_awprot;

  // value method target_client_m_awqos
  output [3 : 0] target_client_awqos;

  // value method target_client_m_awregion
  output [3 : 0] target_client_awregion;

  // value method target_client_m_awuser

  // action method target_client_m_awready
  input  target_client_awready;

  // value method target_client_m_wvalid
  output target_client_wvalid;

  // value method target_client_m_wdata
  output [511 : 0] target_client_wdata;

  // value method target_client_m_wstrb
  output [63 : 0] target_client_wstrb;

  // value method target_client_m_wlast
  output target_client_wlast;

  // value method target_client_m_wuser

  // action method target_client_m_wready
  input  target_client_wready;

  // action method target_client_m_bvalid
  input  target_client_bvalid;
  input  [15 : 0] target_client_bid;
  input  [1 : 0] target_client_bresp;

  // value method target_client_m_bready
  output target_client_bready;

  // value method target_client_m_arvalid
  output target_client_arvalid;

  // value method target_client_m_arid
  output [15 : 0] target_client_arid;

  // value method target_client_m_araddr
  output [63 : 0] target_client_araddr;

  // value method target_client_m_arlen
  output [7 : 0] target_client_arlen;

  // value method target_client_m_arsize
  output [2 : 0] target_client_arsize;

  // value method target_client_m_arburst
  output [1 : 0] target_client_arburst;

  // value method target_client_m_arlock
  output target_client_arlock;

  // value method target_client_m_arcache
  output [3 : 0] target_client_arcache;

  // value method target_client_m_arprot
  output [2 : 0] target_client_arprot;

  // value method target_client_m_arqos
  output [3 : 0] target_client_arqos;

  // value method target_client_m_arregion
  output [3 : 0] target_client_arregion;

  // value method target_client_m_aruser

  // action method target_client_m_arready
  input  target_client_arready;

  // action method target_client_m_rvalid
  input  target_client_rvalid;
  input  [15 : 0] target_client_rid;
  input  [511 : 0] target_client_rdata;
  input  [1 : 0] target_client_rresp;
  input  target_client_rlast;

  // value method target_client_m_rready
  output target_client_rready;

  // signals for module outputs
  wire [511 : 0] initiator_A_server_rdata, target_client_wdata;
  wire [63 : 0] initiator_B_server_rdata,
		target_client_araddr,
		target_client_awaddr,
		target_client_wstrb;
  wire [15 : 0] initiator_A_server_bid,
		initiator_A_server_rid,
		initiator_B_server_bid,
		initiator_B_server_rid,
		target_client_arid,
		target_client_awid;
  wire [7 : 0] target_client_arlen, target_client_awlen;
  wire [3 : 0] target_client_arcache,
	       target_client_arqos,
	       target_client_arregion,
	       target_client_awcache,
	       target_client_awqos,
	       target_client_awregion;
  wire [2 : 0] target_client_arprot,
	       target_client_arsize,
	       target_client_awprot,
	       target_client_awsize;
  wire [1 : 0] initiator_A_server_bresp,
	       initiator_A_server_rresp,
	       initiator_B_server_bresp,
	       initiator_B_server_rresp,
	       target_client_arburst,
	       target_client_awburst;
  wire initiator_A_server_arready,
       initiator_A_server_awready,
       initiator_A_server_bvalid,
       initiator_A_server_rlast,
       initiator_A_server_rvalid,
       initiator_A_server_wready,
       initiator_B_server_arready,
       initiator_B_server_awready,
       initiator_B_server_bvalid,
       initiator_B_server_rlast,
       initiator_B_server_rvalid,
       initiator_B_server_wready,
       target_client_arlock,
       target_client_arvalid,
       target_client_awlock,
       target_client_awvalid,
       target_client_bready,
       target_client_rready,
       target_client_wlast,
       target_client_wvalid;

  // register rg_done
  reg rg_done;
  wire rg_done$D_IN, rg_done$EN;

  // ports of submodule master_xactor_f_rd_addr
  wire [108 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ;

  // ports of submodule master_xactor_f_rd_data
  wire [530 : 0] master_xactor_f_rd_data$D_IN;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [108 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ;

  // ports of submodule master_xactor_f_wr_data
  wire [576 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ;

  // ports of submodule master_xactor_f_wr_resp
  wire [17 : 0] master_xactor_f_wr_resp$D_IN;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule slave_xactor_A_f_rd_addr
  wire [108 : 0] slave_xactor_A_f_rd_addr$D_IN;
  wire slave_xactor_A_f_rd_addr$CLR,
       slave_xactor_A_f_rd_addr$DEQ,
       slave_xactor_A_f_rd_addr$ENQ,
       slave_xactor_A_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_A_f_rd_data
  wire [530 : 0] slave_xactor_A_f_rd_data$D_IN,
		 slave_xactor_A_f_rd_data$D_OUT;
  wire slave_xactor_A_f_rd_data$CLR,
       slave_xactor_A_f_rd_data$DEQ,
       slave_xactor_A_f_rd_data$EMPTY_N,
       slave_xactor_A_f_rd_data$ENQ;

  // ports of submodule slave_xactor_A_f_wr_addr
  wire [108 : 0] slave_xactor_A_f_wr_addr$D_IN;
  wire slave_xactor_A_f_wr_addr$CLR,
       slave_xactor_A_f_wr_addr$DEQ,
       slave_xactor_A_f_wr_addr$ENQ,
       slave_xactor_A_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_A_f_wr_data
  wire [576 : 0] slave_xactor_A_f_wr_data$D_IN;
  wire slave_xactor_A_f_wr_data$CLR,
       slave_xactor_A_f_wr_data$DEQ,
       slave_xactor_A_f_wr_data$ENQ,
       slave_xactor_A_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_A_f_wr_resp
  wire [17 : 0] slave_xactor_A_f_wr_resp$D_IN, slave_xactor_A_f_wr_resp$D_OUT;
  wire slave_xactor_A_f_wr_resp$CLR,
       slave_xactor_A_f_wr_resp$DEQ,
       slave_xactor_A_f_wr_resp$EMPTY_N,
       slave_xactor_A_f_wr_resp$ENQ;

  // ports of submodule slave_xactor_B_f_rd_addr
  wire [108 : 0] slave_xactor_B_f_rd_addr$D_IN;
  wire slave_xactor_B_f_rd_addr$CLR,
       slave_xactor_B_f_rd_addr$DEQ,
       slave_xactor_B_f_rd_addr$ENQ,
       slave_xactor_B_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_B_f_rd_data
  wire [82 : 0] slave_xactor_B_f_rd_data$D_IN, slave_xactor_B_f_rd_data$D_OUT;
  wire slave_xactor_B_f_rd_data$CLR,
       slave_xactor_B_f_rd_data$DEQ,
       slave_xactor_B_f_rd_data$EMPTY_N,
       slave_xactor_B_f_rd_data$ENQ;

  // ports of submodule slave_xactor_B_f_wr_addr
  wire [108 : 0] slave_xactor_B_f_wr_addr$D_IN;
  wire slave_xactor_B_f_wr_addr$CLR,
       slave_xactor_B_f_wr_addr$DEQ,
       slave_xactor_B_f_wr_addr$ENQ,
       slave_xactor_B_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_B_f_wr_data
  wire [72 : 0] slave_xactor_B_f_wr_data$D_IN;
  wire slave_xactor_B_f_wr_data$CLR,
       slave_xactor_B_f_wr_data$DEQ,
       slave_xactor_B_f_wr_data$ENQ,
       slave_xactor_B_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_B_f_wr_resp
  wire [17 : 0] slave_xactor_B_f_wr_resp$D_IN, slave_xactor_B_f_wr_resp$D_OUT;
  wire slave_xactor_B_f_wr_resp$CLR,
       slave_xactor_B_f_wr_resp$DEQ,
       slave_xactor_B_f_wr_resp$EMPTY_N,
       slave_xactor_B_f_wr_resp$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_WARNING,
       CAN_FIRE_initiator_A_server_m_arvalid,
       CAN_FIRE_initiator_A_server_m_awvalid,
       CAN_FIRE_initiator_A_server_m_bready,
       CAN_FIRE_initiator_A_server_m_rready,
       CAN_FIRE_initiator_A_server_m_wvalid,
       CAN_FIRE_initiator_B_server_m_arvalid,
       CAN_FIRE_initiator_B_server_m_awvalid,
       CAN_FIRE_initiator_B_server_m_bready,
       CAN_FIRE_initiator_B_server_m_rready,
       CAN_FIRE_initiator_B_server_m_wvalid,
       CAN_FIRE_target_client_m_arready,
       CAN_FIRE_target_client_m_awready,
       CAN_FIRE_target_client_m_bvalid,
       CAN_FIRE_target_client_m_rvalid,
       CAN_FIRE_target_client_m_wready,
       WILL_FIRE_RL_rl_WARNING,
       WILL_FIRE_initiator_A_server_m_arvalid,
       WILL_FIRE_initiator_A_server_m_awvalid,
       WILL_FIRE_initiator_A_server_m_bready,
       WILL_FIRE_initiator_A_server_m_rready,
       WILL_FIRE_initiator_A_server_m_wvalid,
       WILL_FIRE_initiator_B_server_m_arvalid,
       WILL_FIRE_initiator_B_server_m_awvalid,
       WILL_FIRE_initiator_B_server_m_bready,
       WILL_FIRE_initiator_B_server_m_rready,
       WILL_FIRE_initiator_B_server_m_wvalid,
       WILL_FIRE_target_client_m_arready,
       WILL_FIRE_target_client_m_awready,
       WILL_FIRE_target_client_m_bvalid,
       WILL_FIRE_target_client_m_rvalid,
       WILL_FIRE_target_client_m_wready;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1556;
  reg [31 : 0] v__h1550;
  // synopsys translate_on

  // action method initiator_A_server_m_awvalid
  assign CAN_FIRE_initiator_A_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_initiator_A_server_m_awvalid = 1'd1 ;

  // value method initiator_A_server_m_awready
  assign initiator_A_server_awready = slave_xactor_A_f_wr_addr$FULL_N ;

  // action method initiator_A_server_m_wvalid
  assign CAN_FIRE_initiator_A_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_initiator_A_server_m_wvalid = 1'd1 ;

  // value method initiator_A_server_m_wready
  assign initiator_A_server_wready = slave_xactor_A_f_wr_data$FULL_N ;

  // value method initiator_A_server_m_bvalid
  assign initiator_A_server_bvalid = slave_xactor_A_f_wr_resp$EMPTY_N ;

  // value method initiator_A_server_m_bid
  assign initiator_A_server_bid = slave_xactor_A_f_wr_resp$D_OUT[17:2] ;

  // value method initiator_A_server_m_bresp
  assign initiator_A_server_bresp = slave_xactor_A_f_wr_resp$D_OUT[1:0] ;

  // action method initiator_A_server_m_bready
  assign CAN_FIRE_initiator_A_server_m_bready = 1'd1 ;
  assign WILL_FIRE_initiator_A_server_m_bready = 1'd1 ;

  // action method initiator_A_server_m_arvalid
  assign CAN_FIRE_initiator_A_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_initiator_A_server_m_arvalid = 1'd1 ;

  // value method initiator_A_server_m_arready
  assign initiator_A_server_arready = slave_xactor_A_f_rd_addr$FULL_N ;

  // value method initiator_A_server_m_rvalid
  assign initiator_A_server_rvalid = slave_xactor_A_f_rd_data$EMPTY_N ;

  // value method initiator_A_server_m_rid
  assign initiator_A_server_rid = slave_xactor_A_f_rd_data$D_OUT[530:515] ;

  // value method initiator_A_server_m_rdata
  assign initiator_A_server_rdata = slave_xactor_A_f_rd_data$D_OUT[514:3] ;

  // value method initiator_A_server_m_rresp
  assign initiator_A_server_rresp = slave_xactor_A_f_rd_data$D_OUT[2:1] ;

  // value method initiator_A_server_m_rlast
  assign initiator_A_server_rlast = slave_xactor_A_f_rd_data$D_OUT[0] ;

  // action method initiator_A_server_m_rready
  assign CAN_FIRE_initiator_A_server_m_rready = 1'd1 ;
  assign WILL_FIRE_initiator_A_server_m_rready = 1'd1 ;

  // action method initiator_B_server_m_awvalid
  assign CAN_FIRE_initiator_B_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_initiator_B_server_m_awvalid = 1'd1 ;

  // value method initiator_B_server_m_awready
  assign initiator_B_server_awready = slave_xactor_B_f_wr_addr$FULL_N ;

  // action method initiator_B_server_m_wvalid
  assign CAN_FIRE_initiator_B_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_initiator_B_server_m_wvalid = 1'd1 ;

  // value method initiator_B_server_m_wready
  assign initiator_B_server_wready = slave_xactor_B_f_wr_data$FULL_N ;

  // value method initiator_B_server_m_bvalid
  assign initiator_B_server_bvalid = slave_xactor_B_f_wr_resp$EMPTY_N ;

  // value method initiator_B_server_m_bid
  assign initiator_B_server_bid = slave_xactor_B_f_wr_resp$D_OUT[17:2] ;

  // value method initiator_B_server_m_bresp
  assign initiator_B_server_bresp = slave_xactor_B_f_wr_resp$D_OUT[1:0] ;

  // action method initiator_B_server_m_bready
  assign CAN_FIRE_initiator_B_server_m_bready = 1'd1 ;
  assign WILL_FIRE_initiator_B_server_m_bready = 1'd1 ;

  // action method initiator_B_server_m_arvalid
  assign CAN_FIRE_initiator_B_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_initiator_B_server_m_arvalid = 1'd1 ;

  // value method initiator_B_server_m_arready
  assign initiator_B_server_arready = slave_xactor_B_f_rd_addr$FULL_N ;

  // value method initiator_B_server_m_rvalid
  assign initiator_B_server_rvalid = slave_xactor_B_f_rd_data$EMPTY_N ;

  // value method initiator_B_server_m_rid
  assign initiator_B_server_rid = slave_xactor_B_f_rd_data$D_OUT[82:67] ;

  // value method initiator_B_server_m_rdata
  assign initiator_B_server_rdata = slave_xactor_B_f_rd_data$D_OUT[66:3] ;

  // value method initiator_B_server_m_rresp
  assign initiator_B_server_rresp = slave_xactor_B_f_rd_data$D_OUT[2:1] ;

  // value method initiator_B_server_m_rlast
  assign initiator_B_server_rlast = slave_xactor_B_f_rd_data$D_OUT[0] ;

  // action method initiator_B_server_m_rready
  assign CAN_FIRE_initiator_B_server_m_rready = 1'd1 ;
  assign WILL_FIRE_initiator_B_server_m_rready = 1'd1 ;

  // value method target_client_m_awvalid
  assign target_client_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method target_client_m_awid
  assign target_client_awid = master_xactor_f_wr_addr$D_OUT[108:93] ;

  // value method target_client_m_awaddr
  assign target_client_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method target_client_m_awlen
  assign target_client_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method target_client_m_awsize
  assign target_client_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method target_client_m_awburst
  assign target_client_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method target_client_m_awlock
  assign target_client_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method target_client_m_awcache
  assign target_client_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method target_client_m_awprot
  assign target_client_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method target_client_m_awqos
  assign target_client_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method target_client_m_awregion
  assign target_client_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method target_client_m_awready
  assign CAN_FIRE_target_client_m_awready = 1'd1 ;
  assign WILL_FIRE_target_client_m_awready = 1'd1 ;

  // value method target_client_m_wvalid
  assign target_client_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method target_client_m_wdata
  assign target_client_wdata = master_xactor_f_wr_data$D_OUT[576:65] ;

  // value method target_client_m_wstrb
  assign target_client_wstrb = master_xactor_f_wr_data$D_OUT[64:1] ;

  // value method target_client_m_wlast
  assign target_client_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method target_client_m_wready
  assign CAN_FIRE_target_client_m_wready = 1'd1 ;
  assign WILL_FIRE_target_client_m_wready = 1'd1 ;

  // action method target_client_m_bvalid
  assign CAN_FIRE_target_client_m_bvalid = 1'd1 ;
  assign WILL_FIRE_target_client_m_bvalid = 1'd1 ;

  // value method target_client_m_bready
  assign target_client_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method target_client_m_arvalid
  assign target_client_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method target_client_m_arid
  assign target_client_arid = master_xactor_f_rd_addr$D_OUT[108:93] ;

  // value method target_client_m_araddr
  assign target_client_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method target_client_m_arlen
  assign target_client_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method target_client_m_arsize
  assign target_client_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method target_client_m_arburst
  assign target_client_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method target_client_m_arlock
  assign target_client_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method target_client_m_arcache
  assign target_client_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method target_client_m_arprot
  assign target_client_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method target_client_m_arqos
  assign target_client_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method target_client_m_arregion
  assign target_client_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method target_client_m_arready
  assign CAN_FIRE_target_client_m_arready = 1'd1 ;
  assign WILL_FIRE_target_client_m_arready = 1'd1 ;

  // action method target_client_m_rvalid
  assign CAN_FIRE_target_client_m_rvalid = 1'd1 ;
  assign WILL_FIRE_target_client_m_rvalid = 1'd1 ;

  // value method target_client_m_rready
  assign target_client_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N());

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_resp$D_IN),
						   .ENQ(master_xactor_f_wr_resp$ENQ),
						   .DEQ(master_xactor_f_wr_resp$DEQ),
						   .CLR(master_xactor_f_wr_resp$CLR),
						   .D_OUT(),
						   .FULL_N(master_xactor_f_wr_resp$FULL_N),
						   .EMPTY_N());

  // submodule slave_xactor_A_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) slave_xactor_A_f_rd_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_A_f_rd_addr$D_IN),
						    .ENQ(slave_xactor_A_f_rd_addr$ENQ),
						    .DEQ(slave_xactor_A_f_rd_addr$DEQ),
						    .CLR(slave_xactor_A_f_rd_addr$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_A_f_rd_addr$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_A_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) slave_xactor_A_f_rd_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_A_f_rd_data$D_IN),
						    .ENQ(slave_xactor_A_f_rd_data$ENQ),
						    .DEQ(slave_xactor_A_f_rd_data$DEQ),
						    .CLR(slave_xactor_A_f_rd_data$CLR),
						    .D_OUT(slave_xactor_A_f_rd_data$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(slave_xactor_A_f_rd_data$EMPTY_N));

  // submodule slave_xactor_A_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) slave_xactor_A_f_wr_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_A_f_wr_addr$D_IN),
						    .ENQ(slave_xactor_A_f_wr_addr$ENQ),
						    .DEQ(slave_xactor_A_f_wr_addr$DEQ),
						    .CLR(slave_xactor_A_f_wr_addr$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_A_f_wr_addr$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_A_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) slave_xactor_A_f_wr_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_A_f_wr_data$D_IN),
						    .ENQ(slave_xactor_A_f_wr_data$ENQ),
						    .DEQ(slave_xactor_A_f_wr_data$DEQ),
						    .CLR(slave_xactor_A_f_wr_data$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_A_f_wr_data$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_A_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) slave_xactor_A_f_wr_resp(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_A_f_wr_resp$D_IN),
						    .ENQ(slave_xactor_A_f_wr_resp$ENQ),
						    .DEQ(slave_xactor_A_f_wr_resp$DEQ),
						    .CLR(slave_xactor_A_f_wr_resp$CLR),
						    .D_OUT(slave_xactor_A_f_wr_resp$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(slave_xactor_A_f_wr_resp$EMPTY_N));

  // submodule slave_xactor_B_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) slave_xactor_B_f_rd_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_B_f_rd_addr$D_IN),
						    .ENQ(slave_xactor_B_f_rd_addr$ENQ),
						    .DEQ(slave_xactor_B_f_rd_addr$DEQ),
						    .CLR(slave_xactor_B_f_rd_addr$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_B_f_rd_addr$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_B_f_rd_data
  FIFO2 #(.width(32'd83),
	  .guarded(32'd1)) slave_xactor_B_f_rd_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_B_f_rd_data$D_IN),
						    .ENQ(slave_xactor_B_f_rd_data$ENQ),
						    .DEQ(slave_xactor_B_f_rd_data$DEQ),
						    .CLR(slave_xactor_B_f_rd_data$CLR),
						    .D_OUT(slave_xactor_B_f_rd_data$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(slave_xactor_B_f_rd_data$EMPTY_N));

  // submodule slave_xactor_B_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) slave_xactor_B_f_wr_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_B_f_wr_addr$D_IN),
						    .ENQ(slave_xactor_B_f_wr_addr$ENQ),
						    .DEQ(slave_xactor_B_f_wr_addr$DEQ),
						    .CLR(slave_xactor_B_f_wr_addr$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_B_f_wr_addr$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_B_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) slave_xactor_B_f_wr_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_B_f_wr_data$D_IN),
						    .ENQ(slave_xactor_B_f_wr_data$ENQ),
						    .DEQ(slave_xactor_B_f_wr_data$DEQ),
						    .CLR(slave_xactor_B_f_wr_data$CLR),
						    .D_OUT(),
						    .FULL_N(slave_xactor_B_f_wr_data$FULL_N),
						    .EMPTY_N());

  // submodule slave_xactor_B_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) slave_xactor_B_f_wr_resp(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(slave_xactor_B_f_wr_resp$D_IN),
						    .ENQ(slave_xactor_B_f_wr_resp$ENQ),
						    .DEQ(slave_xactor_B_f_wr_resp$DEQ),
						    .CLR(slave_xactor_B_f_wr_resp$CLR),
						    .D_OUT(slave_xactor_B_f_wr_resp$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(slave_xactor_B_f_wr_resp$EMPTY_N));

  // rule RL_rl_WARNING
  assign CAN_FIRE_RL_rl_WARNING = !rg_done ;
  assign WILL_FIRE_RL_rl_WARNING = CAN_FIRE_RL_rl_WARNING ;

  // register rg_done
  assign rg_done$D_IN = 1'd1 ;
  assign rg_done$EN = CAN_FIRE_RL_rl_WARNING ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN = 109'h0 ;
  assign master_xactor_f_rd_addr$ENQ = 1'b0 ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && target_client_arready ;
  assign master_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { target_client_rid,
	       target_client_rdata,
	       target_client_rresp,
	       target_client_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     target_client_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ = 1'b0 ;
  assign master_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN = 109'h0 ;
  assign master_xactor_f_wr_addr$ENQ = 1'b0 ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && target_client_awready ;
  assign master_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN = 577'h0 ;
  assign master_xactor_f_wr_data$ENQ = 1'b0 ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && target_client_wready ;
  assign master_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN =
	     { target_client_bid, target_client_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     target_client_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = 1'b0 ;
  assign master_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule slave_xactor_A_f_rd_addr
  assign slave_xactor_A_f_rd_addr$D_IN =
	     { initiator_A_server_arid,
	       initiator_A_server_araddr,
	       initiator_A_server_arlen,
	       initiator_A_server_arsize,
	       initiator_A_server_arburst,
	       initiator_A_server_arlock,
	       initiator_A_server_arcache,
	       initiator_A_server_arprot,
	       initiator_A_server_arqos,
	       initiator_A_server_arregion } ;
  assign slave_xactor_A_f_rd_addr$ENQ =
	     initiator_A_server_arvalid && slave_xactor_A_f_rd_addr$FULL_N ;
  assign slave_xactor_A_f_rd_addr$DEQ = 1'b0 ;
  assign slave_xactor_A_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_A_f_rd_data
  assign slave_xactor_A_f_rd_data$D_IN = 531'h0 ;
  assign slave_xactor_A_f_rd_data$ENQ = 1'b0 ;
  assign slave_xactor_A_f_rd_data$DEQ =
	     initiator_A_server_rready && slave_xactor_A_f_rd_data$EMPTY_N ;
  assign slave_xactor_A_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_A_f_wr_addr
  assign slave_xactor_A_f_wr_addr$D_IN =
	     { initiator_A_server_awid,
	       initiator_A_server_awaddr,
	       initiator_A_server_awlen,
	       initiator_A_server_awsize,
	       initiator_A_server_awburst,
	       initiator_A_server_awlock,
	       initiator_A_server_awcache,
	       initiator_A_server_awprot,
	       initiator_A_server_awqos,
	       initiator_A_server_awregion } ;
  assign slave_xactor_A_f_wr_addr$ENQ =
	     initiator_A_server_awvalid && slave_xactor_A_f_wr_addr$FULL_N ;
  assign slave_xactor_A_f_wr_addr$DEQ = 1'b0 ;
  assign slave_xactor_A_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_A_f_wr_data
  assign slave_xactor_A_f_wr_data$D_IN =
	     { initiator_A_server_wdata,
	       initiator_A_server_wstrb,
	       initiator_A_server_wlast } ;
  assign slave_xactor_A_f_wr_data$ENQ =
	     initiator_A_server_wvalid && slave_xactor_A_f_wr_data$FULL_N ;
  assign slave_xactor_A_f_wr_data$DEQ = 1'b0 ;
  assign slave_xactor_A_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_A_f_wr_resp
  assign slave_xactor_A_f_wr_resp$D_IN = 18'h0 ;
  assign slave_xactor_A_f_wr_resp$ENQ = 1'b0 ;
  assign slave_xactor_A_f_wr_resp$DEQ =
	     initiator_A_server_bready && slave_xactor_A_f_wr_resp$EMPTY_N ;
  assign slave_xactor_A_f_wr_resp$CLR = 1'b0 ;

  // submodule slave_xactor_B_f_rd_addr
  assign slave_xactor_B_f_rd_addr$D_IN =
	     { initiator_B_server_arid,
	       initiator_B_server_araddr,
	       initiator_B_server_arlen,
	       initiator_B_server_arsize,
	       initiator_B_server_arburst,
	       initiator_B_server_arlock,
	       initiator_B_server_arcache,
	       initiator_B_server_arprot,
	       initiator_B_server_arqos,
	       initiator_B_server_arregion } ;
  assign slave_xactor_B_f_rd_addr$ENQ =
	     initiator_B_server_arvalid && slave_xactor_B_f_rd_addr$FULL_N ;
  assign slave_xactor_B_f_rd_addr$DEQ = 1'b0 ;
  assign slave_xactor_B_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_B_f_rd_data
  assign slave_xactor_B_f_rd_data$D_IN = 83'h0 ;
  assign slave_xactor_B_f_rd_data$ENQ = 1'b0 ;
  assign slave_xactor_B_f_rd_data$DEQ =
	     initiator_B_server_rready && slave_xactor_B_f_rd_data$EMPTY_N ;
  assign slave_xactor_B_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_B_f_wr_addr
  assign slave_xactor_B_f_wr_addr$D_IN =
	     { initiator_B_server_awid,
	       initiator_B_server_awaddr,
	       initiator_B_server_awlen,
	       initiator_B_server_awsize,
	       initiator_B_server_awburst,
	       initiator_B_server_awlock,
	       initiator_B_server_awcache,
	       initiator_B_server_awprot,
	       initiator_B_server_awqos,
	       initiator_B_server_awregion } ;
  assign slave_xactor_B_f_wr_addr$ENQ =
	     initiator_B_server_awvalid && slave_xactor_B_f_wr_addr$FULL_N ;
  assign slave_xactor_B_f_wr_addr$DEQ = 1'b0 ;
  assign slave_xactor_B_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_B_f_wr_data
  assign slave_xactor_B_f_wr_data$D_IN =
	     { initiator_B_server_wdata,
	       initiator_B_server_wstrb,
	       initiator_B_server_wlast } ;
  assign slave_xactor_B_f_wr_data$ENQ =
	     initiator_B_server_wvalid && slave_xactor_B_f_wr_data$FULL_N ;
  assign slave_xactor_B_f_wr_data$DEQ = 1'b0 ;
  assign slave_xactor_B_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_B_f_wr_resp
  assign slave_xactor_B_f_wr_resp$D_IN = 18'h0 ;
  assign slave_xactor_B_f_wr_resp$ENQ = 1'b0 ;
  assign slave_xactor_B_f_wr_resp$DEQ =
	     initiator_B_server_bready && slave_xactor_B_f_wr_resp$EMPTY_N ;
  assign slave_xactor_B_f_wr_resp$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_done$EN) rg_done <= `BSV_ASSIGNMENT_DELAY rg_done$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_done = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WARNING)
	begin
	  v__h1556 = $stime;
	  #0;
	end
    v__h1550 = v__h1556 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WARNING) $display("%0d: %m.rl_WARNING", v__h1550);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WARNING) $display("    WARNING WARNING WARNING");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WARNING)
	$display("    TBD: the body of this module needs to be implemented");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WARNING)
	$display("    Missing Debug Module connectivity to memory");
  end
  // synopsys translate_on
endmodule  // mkDma_Server_Mux

