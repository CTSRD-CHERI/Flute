//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// cword_fst                      O     1
// cword_snd                      O   128
// st_amo_val_fst                 O     1 const
// st_amo_val_snd                 O   128 const
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    98 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    98 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    64
// req_st_value                   I   129 reg
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_b_put_val           I     7 reg
// mem_master_r_put_val           I    73 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
// EN_ma_ddr4_ready               I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//   EN_commit -> cword_fst
//   EN_commit -> cword_snd
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    cword_fst,

		    cword_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    EN_ma_ddr4_ready,
		    RDY_ma_ddr4_ready,

		    mv_status);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [63 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method cword_fst
  output cword_fst;

  // value method cword_snd
  output [127 : 0] cword_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [97 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [6 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [97 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [72 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [127 : 0] cword_snd, st_amo_val_snd;
  wire [97 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [63 : 0] addr;
  wire [7 : 0] mv_status;
  wire [5 : 0] exc_code;
  wire RDY_ma_ddr4_ready,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       cword_fst,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid;

  // inlined wires
  wire [128 : 0] cache_dw_output_ld_val$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_ctr_wr_rsps_pending_crg$EN_port2__write,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_rg_addr
  reg [63 : 0] cache_rg_addr;
  wire [63 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cset_cword_in_cache
  reg [7 : 0] cache_rg_cset_cword_in_cache;
  wire [7 : 0] cache_rg_cset_cword_in_cache$D_IN;
  wire cache_rg_cset_cword_in_cache$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_ddr4_ready
  reg cache_rg_ddr4_ready;
  wire cache_rg_ddr4_ready$D_IN, cache_rg_ddr4_ready$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  wire [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [63 : 0] cache_rg_lrsc_pa;
  wire [63 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_mstatus_MXR
  reg cache_rg_mstatus_MXR;
  wire cache_rg_mstatus_MXR$D_IN, cache_rg_mstatus_MXR$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [63 : 0] cache_rg_pa;
  wire [63 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_priv
  reg [1 : 0] cache_rg_priv;
  wire [1 : 0] cache_rg_priv$D_IN;
  wire cache_rg_priv$EN;

  // register cache_rg_pte_pa
  reg [63 : 0] cache_rg_pte_pa;
  reg [63 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_satp
  reg [63 : 0] cache_rg_satp;
  wire [63 : 0] cache_rg_satp$D_IN;
  wire cache_rg_satp$EN;

  // register cache_rg_sstatus_SUM
  reg cache_rg_sstatus_SUM;
  wire cache_rg_sstatus_SUM$D_IN, cache_rg_sstatus_SUM$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [4 : 0] cache_rg_state;
  reg [4 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_victim_way
  reg cache_rg_victim_way;
  wire cache_rg_victim_way$D_IN, cache_rg_victim_way$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_wr_rsp_err
  reg cache_rg_wr_rsp_err;
  wire cache_rg_wr_rsp_err$D_IN, cache_rg_wr_rsp_err$EN;

  // ports of submodule cache_f_fabric_second_write_reqs
  wire [73 : 0] cache_f_fabric_second_write_reqs$D_IN;
  wire cache_f_fabric_second_write_reqs$CLR,
       cache_f_fabric_second_write_reqs$DEQ,
       cache_f_fabric_second_write_reqs$ENQ,
       cache_f_fabric_second_write_reqs$FULL_N;

  // ports of submodule cache_f_fabric_write_reqs
  wire [195 : 0] cache_f_fabric_write_reqs$D_IN,
		 cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_pte_writebacks
  wire [127 : 0] cache_f_pte_writebacks$D_IN, cache_f_pte_writebacks$D_OUT;
  wire cache_f_pte_writebacks$CLR,
       cache_f_pte_writebacks$DEQ,
       cache_f_pte_writebacks$EMPTY_N,
       cache_f_pte_writebacks$ENQ;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  reg [97 : 0] cache_masterPortShim_arff$D_IN;
  wire [97 : 0] cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [97 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [6 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [72 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_cword_set
  reg [257 : 0] cache_ram_cword_set$DIB;
  reg [7 : 0] cache_ram_cword_set$ADDRB;
  wire [257 : 0] cache_ram_cword_set$DIA, cache_ram_cword_set$DOB;
  wire [7 : 0] cache_ram_cword_set$ADDRA;
  wire cache_ram_cword_set$ENA,
       cache_ram_cword_set$ENB,
       cache_ram_cword_set$WEA,
       cache_ram_cword_set$WEB;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [105 : 0] cache_ram_state_and_ctag_cset$DIA,
		 cache_ram_state_and_ctag_cset$DIB,
		 cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule cache_tlb
  reg [1 : 0] cache_tlb$insert_level;
  wire [130 : 0] cache_tlb$lookup;
  wire [63 : 0] cache_tlb$insert_pte, cache_tlb$insert_pte_pa;
  wire [26 : 0] cache_tlb$insert_vpn, cache_tlb$lookup_vpn;
  wire [15 : 0] cache_tlb$insert_asid, cache_tlb$lookup_asid;
  wire cache_tlb$EN_flush,
       cache_tlb$EN_insert,
       cache_tlb$RDY_insert,
       cache_tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_do_tlb_flush,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_ptw_level_0,
       CAN_FIRE_RL_cache_rl_ptw_level_1,
       CAN_FIRE_RL_cache_rl_ptw_level_2,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_RL_cache_rl_start_tlb_refill,
       CAN_FIRE_RL_cache_rl_writeback_updated_PTE,
       CAN_FIRE___me_check_14,
       CAN_FIRE_commit,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_do_tlb_flush,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_ptw_level_0,
       WILL_FIRE_RL_cache_rl_ptw_level_1,
       WILL_FIRE_RL_cache_rl_ptw_level_2,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_RL_cache_rl_start_tlb_refill,
       WILL_FIRE_RL_cache_rl_writeback_updated_PTE,
       WILL_FIRE___me_check_14,
       WILL_FIRE_commit,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [105 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1,
		 MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2;
  wire [97 : 0] MUX_cache_masterPortShim_arff$enq_1__VAL_1,
		MUX_cache_masterPortShim_arff$enq_1__VAL_2,
		MUX_cache_masterPortShim_arff$enq_1__VAL_3,
		MUX_cache_masterPortShim_arff$enq_1__VAL_4;
  wire [7 : 0] MUX_cache_ram_cword_set$b_put_2__VAL_2,
	       MUX_cache_ram_cword_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_3,
	       MUX_cache_rg_exc_code$write_1__VAL_6;
  wire [4 : 0] MUX_cache_rg_state$write_1__VAL_11,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7,
	       MUX_cache_rg_state$write_1__VAL_8,
	       MUX_cache_rg_state$write_1__VAL_9;
  wire MUX_cache_dw_valid$wset_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_1,
       MUX_cache_masterPortShim_arff$enq_1__SEL_2,
       MUX_cache_ram_cword_set$b_put_1__SEL_1,
       MUX_cache_ram_cword_set$b_put_1__SEL_2,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_pa$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_tlb$insert_1__SEL_1,
       MUX_cache_tlb$insert_1__SEL_2,
       MUX_cache_tlb$insert_1__SEL_3,
       MUX_cache_tlb$insert_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5335;
  reg [31 : 0] v__h5436;
  reg [31 : 0] v__h5595;
  reg [31 : 0] v__h35204;
  reg [31 : 0] v__h52309;
  reg [31 : 0] v__h35717;
  reg [63 : 0] v__h35916;
  reg [31 : 0] v__h36644;
  reg [31 : 0] v__h36401;
  reg [63 : 0] v__h36804;
  reg [31 : 0] v__h36949;
  reg [31 : 0] v__h37061;
  reg [31 : 0] v__h36573;
  reg [31 : 0] v__h37702;
  reg [31 : 0] v__h37462;
  reg [63 : 0] v__h37862;
  reg [31 : 0] v__h38119;
  reg [31 : 0] v__h38007;
  reg [31 : 0] v__h37631;
  reg [31 : 0] v__h38598;
  reg [31 : 0] v__h38669;
  reg [31 : 0] v__h38751;
  reg [31 : 0] v__h38527;
  reg [31 : 0] v__h38883;
  reg [63 : 0] v__h39035;
  reg [31 : 0] v__h39609;
  reg [31 : 0] v__h39851;
  reg [31 : 0] v__h48929;
  reg [31 : 0] v__h48971;
  reg [31 : 0] v__h4849;
  reg [31 : 0] v__h49912;
  reg [31 : 0] v__h51277;
  reg [31 : 0] v__h4843;
  reg [31 : 0] v__h5329;
  reg [31 : 0] v__h5430;
  reg [31 : 0] v__h5589;
  reg [31 : 0] v__h35198;
  reg [31 : 0] v__h35711;
  reg [31 : 0] v__h36395;
  reg [31 : 0] v__h36567;
  reg [31 : 0] v__h36638;
  reg [31 : 0] v__h36943;
  reg [31 : 0] v__h37055;
  reg [31 : 0] v__h37456;
  reg [31 : 0] v__h37625;
  reg [31 : 0] v__h37696;
  reg [31 : 0] v__h38001;
  reg [31 : 0] v__h38113;
  reg [31 : 0] v__h38521;
  reg [31 : 0] v__h38592;
  reg [31 : 0] v__h38663;
  reg [31 : 0] v__h38745;
  reg [31 : 0] v__h38877;
  reg [31 : 0] v__h39603;
  reg [31 : 0] v__h39845;
  reg [31 : 0] v__h48923;
  reg [31 : 0] v__h48965;
  reg [31 : 0] v__h49906;
  reg [31 : 0] v__h51271;
  reg [31 : 0] v__h52303;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532,
	       IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572,
	       IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592,
	       _theResult___fst__h7126,
	       _theResult___fst__h8487,
	       _theResult___fst__h8533,
	       _theResult___snd_fst__h8489,
	       mem_req_wr_data_wdata__h3689;
  reg [7 : 0] fabric_2_strb__h3337, mem_req_wr_data_wstrb__h3690;
  reg [2 : 0] _theResult___snd_snd_fst_val__h3647;
  wire [128 : 0] IF_cache_rg_victim_way_05_THEN_cache_masterPor_ETC___d874,
		 IF_cache_rg_victim_way_05_THEN_cache_ram_cword_ETC___d873,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422,
		 x__h8597,
		 y__h21343,
		 y__h8598,
		 y__h8651;
  wire [127 : 0] x__h34037;
  wire [63 : 0] IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228,
		cline_fabric_addr__h38936,
		lev_0_pte_pa__h37734,
		lev_0_pte_pa_w64_fa__h37736,
		lev_1_PTN_pa__h36674,
		lev_1_pte_pa__h36676,
		lev_1_pte_pa_w64_fa__h36678,
		lev_2_pte_pa__h35770,
		lev_2_pte_pa_w64_fa__h35772,
		pa___1__h7174,
		pa___1__h7223,
		pa___1__h7292,
		pte___1__h7865,
		pte___1__h7893,
		pte___2__h7123,
		pte___2__h7125,
		result_lo__h34072,
		result_lo__h34107,
		result_lo__h34140,
		result_lo__h34173,
		result_lo__h34206,
		result_lo__h34239,
		result_lo__h34272,
		result_lo__h34305,
		result_lo__h34338,
		result_lo__h34371,
		result_lo__h34404,
		result_lo__h34437,
		result_lo__h34470,
		result_lo__h34503,
		result_lo__h34536,
		result_lo__h34569,
		result_lo__h34624,
		result_lo__h34657,
		result_lo__h34690,
		result_lo__h34723,
		result_lo__h34756,
		result_lo__h34789,
		result_lo__h34822,
		result_lo__h34855,
		result_lo__h34902,
		result_lo__h34935,
		result_lo__h34968,
		result_lo__h35001,
		satp_pa__h2333,
		value__h7957,
		vpn_0_pa__h37733,
		vpn_1_pa__h36675,
		vpn_2_pa__h35769,
		word64__h3624;
  wire [55 : 0] x__h36757, x__h5715, x__h7177, x__h7226, x__h7295;
  wire [51 : 0] x__h40311, x__h40379;
  wire [31 : 0] cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q10,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q17,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q25,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q3;
  wire [15 : 0] cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q13,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q16,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q2,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q20,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q23,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q27,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q6,
		cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q9;
  wire [7 : 0] cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q1,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q11,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q12,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q14,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q15,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q18,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q19,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q21,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q22,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q24,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q26,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q28,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q4,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q5,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q7,
	       cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q8,
	       mem_req_wr_addr_awlen__h3606,
	       strobe64__h3625,
	       strobe64__h3632,
	       strobe64__h3636,
	       strobe64__h3640;
  wire [5 : 0] shift_bits__h3360,
	       x1_avValue_exc_code__h6945,
	       x1_avValue_snd__h35518,
	       y_avValue_snd__h35516;
  wire [4 : 0] IF_cache_ram_state_and_ctag_cset_b_read__95_BI_ETC___d616,
	       IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d618;
  wire [3 : 0] b__h35671;
  wire [1 : 0] tmp__h39092, tmp__h39093;
  wire NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815,
       NOT_cache_cfg_verbosity_read__7_ULT_2_80___d281,
       NOT_cache_masterPortShim_rff_first__41_BIT_4_4_ETC___d674,
       NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143,
       NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d286,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d151,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d170,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d173,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d271,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d288,
       NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d425,
       NOT_cache_w_req_width_code_wget__35_EQ_0b0_56__ETC___d976,
       cache_cfg_verbosity_read__7_ULE_1___d58,
       cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d716,
       cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d757,
       cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d763,
       cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d706,
       cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d718,
       cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d667,
       cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d730,
       cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230,
       cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232,
       cache_ram_state_and_ctag_cset_b_read__95_BIT_5_ETC___d603,
       cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d161,
       cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164,
       cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d242,
       cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274,
       cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d615,
       cache_rg_priv_06_ULE_0b1___d107,
       cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d277,
       cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d283,
       cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d992,
       cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d997,
       mem_req_wr_second_data_wuser__h3481;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method cword_fst
  assign cword_fst =
	     MUX_cache_dw_valid$wset_1__SEL_1 &&
	     cache_dw_output_ld_val$wget[128] ;

  // value method cword_snd
  assign cword_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = 1'b0 ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = 128'b0 ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = cache_rg_wr_rsp_err ? 8'd1 : 8'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  FIFO1 #(.width(32'd74),
	  .guarded(32'd1)) cache_f_fabric_second_write_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_fabric_second_write_reqs$D_IN),
							    .ENQ(cache_f_fabric_second_write_reqs$ENQ),
							    .DEQ(cache_f_fabric_second_write_reqs$DEQ),
							    .CLR(cache_f_fabric_second_write_reqs$CLR),
							    .D_OUT(),
							    .FULL_N(cache_f_fabric_second_write_reqs$FULL_N),
							    .EMPTY_N());

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd196),
	  .guarded(32'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_f_fabric_write_reqs$D_IN),
						     .ENQ(cache_f_fabric_write_reqs$ENQ),
						     .DEQ(cache_f_fabric_write_reqs$DEQ),
						     .CLR(cache_f_fabric_write_reqs$CLR),
						     .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						     .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						     .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_pte_writebacks
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) cache_f_pte_writebacks(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(cache_f_pte_writebacks$D_IN),
						  .ENQ(cache_f_pte_writebacks$ENQ),
						  .DEQ(cache_f_pte_writebacks$DEQ),
						  .CLR(cache_f_pte_writebacks$CLR),
						  .D_OUT(cache_f_pte_writebacks$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(cache_f_pte_writebacks$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd98),
	  .guarded(32'd1)) cache_masterPortShim_arff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_masterPortShim_arff$D_IN),
						     .ENQ(cache_masterPortShim_arff$ENQ),
						     .DEQ(cache_masterPortShim_arff$DEQ),
						     .CLR(cache_masterPortShim_arff$CLR),
						     .D_OUT(cache_masterPortShim_arff$D_OUT),
						     .FULL_N(cache_masterPortShim_arff$FULL_N),
						     .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd98),
	  .guarded(32'd1)) cache_masterPortShim_awff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_masterPortShim_awff$D_IN),
						     .ENQ(cache_masterPortShim_awff$ENQ),
						     .DEQ(cache_masterPortShim_awff$DEQ),
						     .CLR(cache_masterPortShim_awff$CLR),
						     .D_OUT(cache_masterPortShim_awff$D_OUT),
						     .FULL_N(cache_masterPortShim_awff$FULL_N),
						     .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd7),
	  .guarded(32'd1)) cache_masterPortShim_bff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_bff$D_IN),
						    .ENQ(cache_masterPortShim_bff$ENQ),
						    .DEQ(cache_masterPortShim_bff$DEQ),
						    .CLR(cache_masterPortShim_bff$CLR),
						    .D_OUT(cache_masterPortShim_bff$D_OUT),
						    .FULL_N(cache_masterPortShim_bff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) cache_masterPortShim_rff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_rff$D_IN),
						    .ENQ(cache_masterPortShim_rff$ENQ),
						    .DEQ(cache_masterPortShim_rff$DEQ),
						    .CLR(cache_masterPortShim_rff$CLR),
						    .D_OUT(cache_masterPortShim_rff$D_OUT),
						    .FULL_N(cache_masterPortShim_rff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) cache_masterPortShim_wff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_wff$D_IN),
						    .ENQ(cache_masterPortShim_wff$ENQ),
						    .DEQ(cache_masterPortShim_wff$DEQ),
						    .CLR(cache_masterPortShim_wff$CLR),
						    .D_OUT(cache_masterPortShim_wff$D_OUT),
						    .FULL_N(cache_masterPortShim_wff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_cword_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd258),
	  .MEMSIZE(9'd256)) cache_ram_cword_set(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_ram_cword_set$ADDRA),
						.ADDRB(cache_ram_cword_set$ADDRB),
						.DIA(cache_ram_cword_set$DIA),
						.DIB(cache_ram_cword_set$DIB),
						.WEA(cache_ram_cword_set$WEA),
						.WEB(cache_ram_cword_set$WEB),
						.ENA(cache_ram_cword_set$ENA),
						.ENB(cache_ram_cword_set$ENB),
						.DOA(),
						.DOB(cache_ram_cword_set$DOB));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd106),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // submodule cache_tlb
  mkTLB #(.dmem_not_imem(1'd0)) cache_tlb(.CLK(CLK),
					  .RST_N(RST_N),
					  .insert_asid(cache_tlb$insert_asid),
					  .insert_level(cache_tlb$insert_level),
					  .insert_pte(cache_tlb$insert_pte),
					  .insert_pte_pa(cache_tlb$insert_pte_pa),
					  .insert_vpn(cache_tlb$insert_vpn),
					  .lookup_asid(cache_tlb$lookup_asid),
					  .lookup_vpn(cache_tlb$lookup_vpn),
					  .EN_flush(cache_tlb$EN_flush),
					  .EN_insert(cache_tlb$EN_insert),
					  .RDY_flush(),
					  .lookup(cache_tlb$lookup),
					  .RDY_lookup(cache_tlb$RDY_lookup),
					  .RDY_insert(cache_tlb$RDY_insert));

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_crg != 4'd15 &&
	     cache_masterPortShim_wff$FULL_N &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     (cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100 ||
	      cache_f_fabric_second_write_reqs$FULL_N) ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_cache_rl_writeback_updated_PTE =
	     cache_f_pte_writebacks$EMPTY_N &&
	     cache_f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_cache_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d173 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_ddr4_ready &&
	     cache_rg_state == 5'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_tlb_refill
  assign CAN_FIRE_RL_cache_rl_start_tlb_refill =
	     cache_masterPortShim_arff$FULL_N && cache_rg_state == 5'd5 &&
	     b__h35671 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_tlb_refill =
	     CAN_FIRE_RL_cache_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_2
  assign CAN_FIRE_RL_cache_rl_ptw_level_2 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d667 &&
	     cache_rg_state == 5'd6 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_2 =
	     CAN_FIRE_RL_cache_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_1
  assign CAN_FIRE_RL_cache_rl_ptw_level_1 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d730 &&
	     cache_rg_state == 5'd7 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_1 =
	     CAN_FIRE_RL_cache_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_ptw_level_0
  assign CAN_FIRE_RL_cache_rl_ptw_level_0 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_tlb$RDY_insert) &&
	     cache_rg_state == 5'd8 ;
  assign WILL_FIRE_RL_cache_rl_ptw_level_0 =
	     CAN_FIRE_RL_cache_rl_ptw_level_0 &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd9 &&
	     b__h35671 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 5'd10 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd11 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     b__h35671 != 4'd0 && cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 5'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 5'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req = EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req =
	     CAN_FIRE_RL_cache_do_req && !WILL_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule RL_cache_do_tlb_flush
  assign CAN_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;
  assign WILL_FIRE_RL_cache_do_tlb_flush = EN_tlb_flush ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d288 ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_masterPortShim_arff$enq_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d992 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_cword_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__35_EQ_0b0_56__ETC___d976 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__41_BIT_4_4_ETC___d674 ;
  assign MUX_cache_rg_pa$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d277 ;
  assign MUX_cache_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d716 ;
  assign MUX_cache_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign MUX_cache_tlb$insert_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_1 =
	     { 5'd0, lev_1_pte_pa_w64_fa__h36678, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_2 =
	     { 5'd0, lev_0_pte_pa_w64_fa__h37736, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_3 =
	     { 5'd0, lev_2_pte_pa_w64_fa__h35772, 29'd851968 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_4 =
	     { 5'd0, cline_fabric_addr__h38936, 29'd15532032 } ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_2 =
	     cache_rg_cset_cword_in_cache + 8'd1 ;
  assign MUX_cache_ram_cword_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[105],
	       x__h40311,
	       !cache_rg_victim_way || cache_ram_state_and_ctag_cset$DOB[52],
	       x__h40379 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 =
	     { 1'd0,
	       52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_3 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ? 6'd12 : 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_6 =
	     EN_commit ? x1_avValue_snd__h35518 : 6'd28 ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (NOT_cache_w_req_width_code_wget__35_EQ_0b0_56__ETC___d976 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       5'd4 :
	       5'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6] ||
		 !cache_masterPortShim_rff$D_OUT[7] &&
		 !cache_masterPortShim_rff$D_OUT[5]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_8 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd8 :
		     ((cache_masterPortShim_rff$D_OUT[22:14] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_9 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
	       ((!cache_masterPortShim_rff$D_OUT[4] ||
		 !cache_masterPortShim_rff$D_OUT[5] &&
		 cache_masterPortShim_rff$D_OUT[6]) ?
		  5'd4 :
		  ((!cache_masterPortShim_rff$D_OUT[7] &&
		    !cache_masterPortShim_rff$D_OUT[5]) ?
		     5'd7 :
		     ((cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
		       cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_11 =
	     EN_commit ?
	       IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d618 :
	       5'd4 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_valid$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d288 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ;
  assign cache_dw_output_ld_val$wget =
	     { NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d425,
	       x__h34037 } ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h35671 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h35671 ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN =
	     !cache_rg_priv_06_ULE_0b1___d107 ||
	     cache_rg_satp[63:60] != 4'd8 ||
	     pte___2__h7125[62] ;
  assign cache_rg_allow_cap$EN = MUX_cache_rg_pa$write_1__SEL_2 ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_cset_cword_in_cache
  assign cache_rg_cset_cword_in_cache$D_IN =
	     MUX_cache_ram_cword_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_cword_set$b_put_2__VAL_2 :
	       MUX_cache_ram_cword_set$b_put_2__VAL_4 ;
  assign cache_rg_cset_cword_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_ddr4_ready
  assign cache_rg_ddr4_ready$D_IN = 1'd1 ;
  assign cache_rg_ddr4_ready$EN = EN_ma_ddr4_ready ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__VAL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_6)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    MUX_cache_rg_exc_code$write_1__SEL_3:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    MUX_cache_rg_exc_code$write_1__SEL_4:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    MUX_cache_rg_exc_code$write_1__SEL_5:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_3;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_6;
    default: cache_rg_exc_code$D_IN = 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__35_EQ_0b0_56__ETC___d976 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     NOT_cache_masterPortShim_rff_first__41_BIT_4_4_ETC___d674 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      (cache_masterPortShim_rff$D_OUT[7] ||
	       cache_masterPortShim_rff$D_OUT[5]) &&
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     (!cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      !cache_masterPortShim_rff$D_OUT[7] &&
	      !cache_masterPortShim_rff$D_OUT[5] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  assign cache_rg_ld_val$D_IN = 129'h0 ;
  assign cache_rg_ld_val$EN = 1'b0 ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = 64'h0 ;
  assign cache_rg_lrsc_pa$EN = 1'b0 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN = 1'd0 ;
  assign cache_rg_lrsc_valid$EN = CAN_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_mstatus_MXR
  assign cache_rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign cache_rg_mstatus_MXR$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_addr :
	       IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228 ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_priv
  assign cache_rg_priv$D_IN = req_priv ;
  assign cache_rg_priv$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  lev_1_pte_pa__h36676 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  lev_0_pte_pa__h37734 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or lev_2_pte_pa__h35770)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_rg_pte_pa$D_IN = lev_1_pte_pa__h36676;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_rg_pte_pa$D_IN = lev_0_pte_pa__h37734;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_rg_pte_pa$D_IN = lev_2_pte_pa__h35770;
      default: cache_rg_pte_pa$D_IN =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_pte_pa$EN =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ;

  // register cache_rg_satp
  assign cache_rg_satp$D_IN = req_satp ;
  assign cache_rg_satp$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_sstatus_SUM
  assign cache_rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign cache_rg_sstatus_SUM$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN = req_st_value ;
  assign cache_rg_st_amo_val$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_5 or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_ptw_level_0 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_ptw_level_1 or
	  MUX_cache_rg_state$write_1__VAL_8 or
	  WILL_FIRE_RL_cache_rl_ptw_level_2 or
	  MUX_cache_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_11 or
	  MUX_cache_rg_state$write_1__SEL_12)
  case (1'b1)
    EN_tlb_flush: cache_rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 5'd3;
    MUX_cache_rg_state$write_1__SEL_5:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_cache_rl_ptw_level_0:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_ptw_level_1:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_8;
    WILL_FIRE_RL_cache_rl_ptw_level_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_cache_rl_start_tlb_refill: cache_rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_11;
    MUX_cache_rg_state$write_1__SEL_12: cache_rg_state$D_IN = 5'd2;
    default: cache_rg_state$D_IN = 5'bxxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_victim_way
  assign cache_rg_victim_way$D_IN = tmp__h39093[0] ;
  assign cache_rg_victim_way$EN = CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_wr_rsp_err
  assign cache_rg_wr_rsp_err$D_IN = 1'd1 ;
  assign cache_rg_wr_rsp_err$EN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	     cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 ;

  // submodule cache_f_fabric_second_write_reqs
  assign cache_f_fabric_second_write_reqs$D_IN =
	     { cache_f_fabric_write_reqs$D_OUT[127:64],
	       fabric_2_strb__h3337,
	       1'd1,
	       mem_req_wr_second_data_wuser__h3481 } ;
  assign cache_f_fabric_second_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 ;
  assign cache_f_fabric_second_write_reqs$DEQ = 1'b0 ;
  assign cache_f_fabric_second_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_fabric_write_reqs
  assign cache_f_fabric_write_reqs$D_IN =
	     { 3'b011,
	       cache_f_pte_writebacks$D_OUT[127:64],
	       65'd0,
	       cache_f_pte_writebacks$D_OUT[63:0] } ;
  assign cache_f_fabric_write_reqs$ENQ =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;
  assign cache_f_fabric_write_reqs$DEQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_pte_writebacks
  assign cache_f_pte_writebacks$D_IN =
	     { cache_tlb$lookup[63:0], value__h7957 } ;
  assign cache_f_pte_writebacks$ENQ = MUX_cache_tlb$insert_1__SEL_1 ;
  assign cache_f_pte_writebacks$DEQ =
	     CAN_FIRE_RL_cache_rl_writeback_updated_PTE ;
  assign cache_f_pte_writebacks$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_12 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_12 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  always@(MUX_cache_masterPortShim_arff$enq_1__SEL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_1 or
	  MUX_cache_masterPortShim_arff$enq_1__SEL_2 or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_tlb_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_masterPortShim_arff$enq_1__SEL_1:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_1;
      MUX_cache_masterPortShim_arff$enq_1__SEL_2:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_start_tlb_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_3;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_4;
      default: cache_masterPortShim_arff$D_IN =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_masterPortShim_arff$ENQ =
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     !cache_masterPortShim_rff$D_OUT[6] &&
	     !cache_masterPortShim_rff$D_OUT[7] &&
	     !cache_masterPortShim_rff$D_OUT[5] ||
	     WILL_FIRE_RL_cache_rl_start_tlb_refill ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 5'd0,
	       cache_f_fabric_write_reqs$D_OUT[192:129],
	       mem_req_wr_addr_awlen__h3606,
	       _theResult___snd_snd_fst_val__h3647,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_ptw_level_0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     { mem_req_wr_data_wdata__h3689,
	       mem_req_wr_data_wstrb__h3690,
	       cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100,
	       mem_req_wr_second_data_wuser__h3481 } ;
  assign cache_masterPortShim_wff$ENQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_cword_set
  assign cache_ram_cword_set$ADDRA = cache_rg_cset_cword_in_cache ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  MUX_cache_ram_cword_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_cword_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$ADDRB = MUX_cache_ram_cword_set$b_put_2__VAL_4;
      default: cache_ram_cword_set$ADDRB =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$DIA =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64,
		 cache_ram_cword_set$DOB[128:0] } :
	       { cache_ram_cword_set$DOB[257:129],
		 cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  always@(MUX_cache_ram_cword_set$b_put_1__SEL_1 or
	  MUX_cache_ram_cword_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_cword_set$b_put_1__SEL_1:
	  cache_ram_cword_set$DIB =
	      258'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      MUX_cache_ram_cword_set$b_put_1__SEL_2:
	  cache_ram_cword_set$DIB =
	      258'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_cword_set$DIB =
	      258'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_cword_set$DIB =
	      258'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: cache_ram_cword_set$DIB =
		   258'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_cword_set$WEA = 1'd1 ;
  assign cache_ram_cword_set$WEB = 1'd0 ;
  assign cache_ram_cword_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_cword_set$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ?
	       106'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  :
	       106'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_cset_cword_in_cache[1:0] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_cword_set$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule cache_tlb
  assign cache_tlb$insert_asid = cache_rg_satp[59:44] ;
  always@(MUX_cache_tlb$insert_1__SEL_1 or
	  cache_tlb$lookup or
	  MUX_cache_tlb$insert_1__SEL_2 or
	  MUX_cache_tlb$insert_1__SEL_3 or MUX_cache_tlb$insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_tlb$insert_1__SEL_1:
	  cache_tlb$insert_level = cache_tlb$lookup[65:64];
      MUX_cache_tlb$insert_1__SEL_2: cache_tlb$insert_level = 2'd2;
      MUX_cache_tlb$insert_1__SEL_3: cache_tlb$insert_level = 2'd1;
      MUX_cache_tlb$insert_1__SEL_4: cache_tlb$insert_level = 2'd0;
      default: cache_tlb$insert_level = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign cache_tlb$insert_pte =
	     (MUX_cache_tlb$insert_1__SEL_2 ||
	      MUX_cache_tlb$insert_1__SEL_3 ||
	      MUX_cache_tlb$insert_1__SEL_4) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       value__h7957 ;
  assign cache_tlb$insert_pte_pa =
	     MUX_cache_tlb$insert_1__SEL_1 ?
	       cache_tlb$lookup[63:0] :
	       cache_rg_pte_pa ;
  assign cache_tlb$insert_vpn = cache_rg_addr[38:12] ;
  assign cache_tlb$lookup_asid = cache_rg_satp[59:44] ;
  assign cache_tlb$lookup_vpn = cache_rg_addr[38:12] ;
  assign cache_tlb$EN_flush =
	     WILL_FIRE_RL_cache_rl_start_reset || EN_tlb_flush ;
  assign cache_tlb$EN_insert =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d277 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	     cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d716 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ||
	     WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) ;

  // remaining internal signals
  assign IF_cache_ram_state_and_ctag_cset_b_read__95_BI_ETC___d616 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232) ?
	       cache_rg_state :
	       5'd9 ;
  assign IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228 =
	     (cache_rg_priv_06_ULE_0b1___d107 &&
	      cache_rg_satp[63:60] == 4'd8) ?
	       _theResult___fst__h7126 :
	       cache_rg_addr ;
  assign IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d618 =
	     (cache_rg_priv_06_ULE_0b1___d107 &&
	      cache_rg_satp[63:60] == 4'd8 &&
	      !cache_tlb$lookup[130]) ?
	       5'd5 :
	       (cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d615 ?
		  5'd4 :
		  IF_cache_ram_state_and_ctag_cset_b_read__95_BI_ETC___d616) ;
  assign IF_cache_rg_victim_way_05_THEN_cache_masterPor_ETC___d874 =
	     cache_rg_victim_way ?
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } :
	       cache_ram_cword_set$DOB[257:129] ;
  assign IF_cache_rg_victim_way_05_THEN_cache_ram_cword_ETC___d873 =
	     cache_rg_victim_way ?
	       cache_ram_cword_set$DOB[128:0] :
	       { cache_masterPortShim_rff$D_OUT[0],
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_lower_word64 } ;
  assign NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_cfg_verbosity_read__7_ULT_2_80___d281 =
	     cache_cfg_verbosity >= 4'd2 ;
  assign NOT_cache_masterPortShim_rff_first__41_BIT_4_4_ETC___d674 =
	     !cache_masterPortShim_rff$D_OUT[4] ||
	     !cache_masterPortShim_rff$D_OUT[5] &&
	     cache_masterPortShim_rff$D_OUT[6] ||
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) ||
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 =
	     (cache_rg_priv != 2'b0 || cache_tlb$lookup[70]) &&
	     (cache_rg_priv != 2'b01 || !cache_tlb$lookup[70] ||
	      cache_rg_sstatus_SUM) &&
	     cache_rg_op == 2'd0 &&
	     cache_tlb$lookup[69] ;
  assign NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d286 =
	     NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 &&
	     !cache_rg_st_amo_val[128] &&
	     cache_tlb$lookup[72] &&
	     cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274 &&
	     NOT_cache_cfg_verbosity_read__7_ULT_2_80___d281 &&
	     cache_tlb$lookup[130] ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d151 =
	     !cache_rg_priv_06_ULE_0b1___d107 ||
	     cache_rg_satp[63:60] != 4'd8 ||
	     !cache_tlb$lookup[130] ||
	     NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 &&
	     !cache_rg_st_amo_val[128] &&
	     cache_tlb$lookup[72] ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d170 =
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d151 ||
	     (cache_rg_priv != 2'b0 || cache_tlb$RDY_lookup) &&
	     (cache_rg_priv != 2'b01 || cache_tlb$RDY_lookup) &&
	     cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d161 &&
	     (cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164 ||
	      cache_rg_st_amo_val[128] ||
	      cache_tlb$RDY_lookup) ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d173 =
	     (!cache_rg_priv_06_ULE_0b1___d107 ||
	      cache_rg_satp[63:60] != 4'd8 ||
	      cache_tlb$RDY_lookup) &&
	     (cache_cfg_verbosity_read__7_ULE_1___d58 ||
	      cache_tlb$RDY_lookup) &&
	     (!EN_commit ||
	      NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d170) ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 =
	     !cache_rg_priv_06_ULE_0b1___d107 ||
	     cache_rg_satp[63:60] != 4'd8 ||
	     cache_tlb$lookup[130] &&
	     NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 &&
	     !cache_rg_st_amo_val[128] &&
	     cache_tlb$lookup[72] ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d271 =
	     !cache_rg_priv_06_ULE_0b1___d107 ||
	     cache_rg_satp[63:60] != 4'd8 ||
	     (pte___2__h7123[7] || cache_rg_op == 2'd0) &&
	     cache_tlb$lookup[72] ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d288 =
	     NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 &&
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232) ;
  assign NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d425 =
	     (!cache_rg_priv_06_ULE_0b1___d107 ||
	      cache_rg_satp[63:60] != 4'd8 ||
	      pte___2__h7125[62]) &&
	     cache_rg_width_code == 3'b100 &&
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[128] ;
  assign NOT_cache_w_req_width_code_wget__35_EQ_0b0_56__ETC___d976 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign b__h35671 =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_cfg_verbosity_read__7_ULE_1___d58 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d716 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 ;
  assign cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d757 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d763 =
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     cache_masterPortShim_rff$D_OUT[4] &&
	     (cache_masterPortShim_rff$D_OUT[5] ||
	      !cache_masterPortShim_rff$D_OUT[6]) &&
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d706 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	      cache_masterPortShim_rff$D_OUT[22:14] != 9'd0) &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d718 =
	     (cache_masterPortShim_rff$D_OUT[7] ||
	      cache_masterPortShim_rff$D_OUT[5]) &&
	     cache_masterPortShim_rff$D_OUT[31:23] == 9'd0 &&
	     cache_masterPortShim_rff$D_OUT[22:14] == 9'd0 &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d667 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      ((!cache_masterPortShim_rff$D_OUT[7] &&
		!cache_masterPortShim_rff$D_OUT[5]) ?
		 cache_masterPortShim_arff$FULL_N :
		 cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
		 cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
		 cache_tlb$RDY_insert)) ;
  assign cache_masterPortShim_rff_i_notEmpty__40_AND_NO_ETC___d730 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[4] ||
	      !cache_masterPortShim_rff$D_OUT[5] &&
	      cache_masterPortShim_rff$D_OUT[6] ||
	      ((!cache_masterPortShim_rff$D_OUT[7] &&
		!cache_masterPortShim_rff$D_OUT[5]) ?
		 cache_masterPortShim_arff$FULL_N :
		 cache_masterPortShim_rff$D_OUT[22:14] != 9'd0 ||
		 cache_tlb$RDY_insert)) ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422 =
	     x__h8597 | y__h8598 ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q1 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[7:0] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q10 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:32] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q11 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[55:48] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q12 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[47:40] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q13 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:48] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q14 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:56] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q15 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[71:64] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q16 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[79:64] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q17 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:64] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q18 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[79:72] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q19 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[87:80] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q2 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[15:0] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q20 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:80] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q21 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:88] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q22 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[103:96] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q23 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[111:96] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q24 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[111:104] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q25 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:96] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q26 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[119:112] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q27 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:112] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q28 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:120] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q3 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:0] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q4 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[23:16] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q5 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[15:8] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q6 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:16] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q7 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:24] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q8 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[39:32] ;
  assign cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q9 =
	     cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[47:32] ;
  assign cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230 =
	     cache_ram_state_and_ctag_cset$DOB[51:0] ==
	     IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232 =
	     cache_ram_state_and_ctag_cset$DOB[104:53] ==
	     IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228[63:12] ;
  assign cache_ram_state_and_ctag_cset_b_read__95_BIT_5_ETC___d603 =
	     (cache_ram_state_and_ctag_cset$DOB[52] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230 ||
	      cache_ram_state_and_ctag_cset$DOB[105] &&
	      cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232) &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d161 =
	     cache_rg_priv == 2'b0 && !cache_tlb$lookup[70] ||
	     cache_rg_priv == 2'b01 && cache_tlb$lookup[70] &&
	     !cache_rg_sstatus_SUM ||
	     cache_rg_op != 2'd0 ||
	     cache_tlb$RDY_lookup ;
  assign cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164 =
	     cache_rg_priv == 2'b0 && !cache_tlb$lookup[70] ||
	     cache_rg_priv == 2'b01 && cache_tlb$lookup[70] &&
	     !cache_rg_sstatus_SUM ||
	     cache_rg_op != 2'd0 ||
	     !cache_tlb$lookup[69] ;
  assign cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d242 =
	     cache_rg_priv_06_ULE_0b1___d107 &&
	     cache_rg_satp[63:60] == 4'd8 &&
	     (cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164 ||
	      cache_rg_st_amo_val[128] ||
	      !cache_tlb$lookup[72]) ;
  assign cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274 =
	     cache_rg_priv_06_ULE_0b1___d107 &&
	     cache_rg_satp[63:60] == 4'd8 &&
	     (!pte___2__h7123[7] && cache_rg_op != 2'd0 ||
	      !cache_tlb$lookup[72]) ;
  assign cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d615 =
	     cache_rg_priv_06_ULE_0b1___d107 &&
	     cache_rg_satp[63:60] == 4'd8 &&
	     cache_tlb$lookup[130] &&
	     (cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164 ||
	      cache_rg_st_amo_val[128] ||
	      !cache_tlb$lookup[72]) ;
  assign cache_rg_priv_06_ULE_0b1___d107 = cache_rg_priv <= 2'b01 ;
  assign cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d277 =
	     cache_tlb$lookup[130] &&
	     NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 &&
	     !cache_rg_st_amo_val[128] &&
	     cache_tlb$lookup[72] &&
	     cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274 ;
  assign cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d283 =
	     cache_tlb$lookup[130] &&
	     NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d143 &&
	     !cache_rg_st_amo_val[128] &&
	     cache_tlb$lookup[72] &&
	     cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274 &&
	     NOT_cache_cfg_verbosity_read__7_ULT_2_80___d281 ;
  assign cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d992 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d997 =
	     (cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d992 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__7_ULE_1___d58 ;
  assign cline_fabric_addr__h38936 = { cache_rg_pa[63:6], 6'd0 } ;
  assign lev_0_pte_pa__h37734 = lev_1_PTN_pa__h36674 + vpn_0_pa__h37733 ;
  assign lev_0_pte_pa_w64_fa__h37736 = { lev_0_pte_pa__h37734[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h36674 = { 8'd0, x__h36757 } ;
  assign lev_1_pte_pa__h36676 = lev_1_PTN_pa__h36674 + vpn_1_pa__h36675 ;
  assign lev_1_pte_pa_w64_fa__h36678 = { lev_1_pte_pa__h36676[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h35770 = satp_pa__h2333 + vpn_2_pa__h35769 ;
  assign lev_2_pte_pa_w64_fa__h35772 = { lev_2_pte_pa__h35770[63:3], 3'b0 } ;
  assign mem_req_wr_addr_awlen__h3606 =
	     (cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100) ?
	       8'd1 :
	       8'd0 ;
  assign mem_req_wr_second_data_wuser__h3481 =
	     cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign pa___1__h7174 = { 8'd0, x__h7177 } ;
  assign pa___1__h7223 = { 8'd0, x__h7226 } ;
  assign pa___1__h7292 = { 8'd0, x__h7295 } ;
  assign pte___1__h7865 =
	     { cache_tlb$lookup[129:73], 1'd1, cache_tlb$lookup[71:66] } ;
  assign pte___1__h7893 =
	     { pte___2__h7123[63:8], 1'd1, pte___2__h7123[6:0] } ;
  assign pte___2__h7123 =
	     cache_tlb$lookup[72] ?
	       cache_tlb$lookup[129:66] :
	       pte___1__h7865 ;
  assign pte___2__h7125 =
	     (!pte___2__h7123[7] && cache_rg_op != 2'd0) ?
	       pte___1__h7893 :
	       pte___2__h7123 ;
  assign result_lo__h34072 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[7:0] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q1[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q1 } ;
  assign result_lo__h34107 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[15:8] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q5[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q5 } ;
  assign result_lo__h34140 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[23:16] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q4[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q4 } ;
  assign result_lo__h34173 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:24] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q7[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q7 } ;
  assign result_lo__h34206 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[39:32] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q8[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q8 } ;
  assign result_lo__h34239 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[47:40] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q12[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q12 } ;
  assign result_lo__h34272 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[55:48] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q11[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q11 } ;
  assign result_lo__h34305 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:56] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q14[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q14 } ;
  assign result_lo__h34338 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[71:64] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q15[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q15 } ;
  assign result_lo__h34371 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[79:72] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q18[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q18 } ;
  assign result_lo__h34404 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[87:80] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q19[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q19 } ;
  assign result_lo__h34437 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:88] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q21[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q21 } ;
  assign result_lo__h34470 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[103:96] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q22[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q22 } ;
  assign result_lo__h34503 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[111:104] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q24[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q24 } ;
  assign result_lo__h34536 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[119:112] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q26[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q26 } ;
  assign result_lo__h34569 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:120] } :
	       { {56{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q28[7]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q28 } ;
  assign result_lo__h34624 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[15:0] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q2[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q2 } ;
  assign result_lo__h34657 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:16] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q6[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q6 } ;
  assign result_lo__h34690 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[47:32] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q9[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q9 } ;
  assign result_lo__h34723 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:48] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q13[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q13 } ;
  assign result_lo__h34756 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[79:64] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q16[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q16 } ;
  assign result_lo__h34789 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:80] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q20[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q20 } ;
  assign result_lo__h34822 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[111:96] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q23[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q23 } ;
  assign result_lo__h34855 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:112] } :
	       { {48{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q27[15]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q27 } ;
  assign result_lo__h34902 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[31:0] } :
	       { {32{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q3[31]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q3 } ;
  assign result_lo__h34935 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:32] } :
	       { {32{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q10[31]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q10 } ;
  assign result_lo__h34968 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[95:64] } :
	       { {32{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q17[31]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q17 } ;
  assign result_lo__h35001 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:96] } :
	       { {32{cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q25[31]}},
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC__q25 } ;
  assign satp_pa__h2333 = { 8'd0, x__h5715 } ;
  assign shift_bits__h3360 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe64__h3625 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3632 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3636 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe64__h3640 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign tmp__h39092 = { 1'd0, cache_rg_victim_way } ;
  assign tmp__h39093 = tmp__h39092 + 2'd1 ;
  assign value__h7957 =
	     (cache_rg_priv_06_ULE_0b1___d107 &&
	      cache_rg_satp[63:60] == 4'd8) ?
	       pte___2__h7125 :
	       cache_tlb$lookup[129:66] ;
  assign vpn_0_pa__h37733 = { 52'd0, cache_rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h36675 = { 52'd0, cache_rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h35769 = { 52'd0, cache_rg_addr[38:30], 3'd0 } ;
  assign word64__h3624 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h3360 ;
  assign x1_avValue_exc_code__h6945 =
	     (cache_rg_priv_06_EQ_0b0_28_AND_NOT_cache_tlb_l_ETC___d164 ||
	      !cache_rg_st_amo_val[128] && !cache_tlb$lookup[72]) ?
	       6'd12 :
	       6'd27 ;
  assign x1_avValue_snd__h35518 =
	     (cache_rg_priv_06_ULE_0b1___d107 &&
	      cache_rg_satp[63:60] == 4'd8 &&
	      !cache_tlb$lookup[130]) ?
	       cache_rg_exc_code :
	       y_avValue_snd__h35516 ;
  assign x__h34037 =
	     { _theResult___snd_fst__h8489, _theResult___fst__h8487 } ;
  assign x__h36757 = { cache_masterPortShim_rff$D_OUT[57:14], 12'b0 } ;
  assign x__h40311 =
	     cache_rg_victim_way ?
	       cache_rg_pa[63:12] :
	       cache_ram_state_and_ctag_cset$DOB[104:53] ;
  assign x__h40379 =
	     cache_rg_victim_way ?
	       cache_ram_state_and_ctag_cset$DOB[51:0] :
	       cache_rg_pa[63:12] ;
  assign x__h5715 = { cache_rg_satp[43:0], 12'b0 } ;
  assign x__h7177 = { cache_tlb$lookup[119:76], cache_rg_addr[11:0] } ;
  assign x__h7226 = { cache_tlb$lookup[119:85], cache_rg_addr[20:0] } ;
  assign x__h7295 = { cache_tlb$lookup[119:94], cache_rg_addr[29:0] } ;
  assign x__h8597 = cache_ram_cword_set$DOB[128:0] & y__h8651 ;
  assign y__h21343 =
	     {129{cache_ram_state_and_ctag_cset$DOB[105] &&
		  cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232}} ;
  assign y__h8598 = cache_ram_cword_set$DOB[257:129] & y__h21343 ;
  assign y__h8651 =
	     {129{cache_ram_state_and_ctag_cset$DOB[52] &&
		  cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230}} ;
  assign y_avValue_snd__h35516 =
	     cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d615 ?
	       x1_avValue_exc_code__h6945 :
	       cache_rg_exc_code ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011: fabric_2_strb__h3337 = 8'd0;
      3'b100: fabric_2_strb__h3337 = 8'b11111111;
      default: fabric_2_strb__h3337 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010:
	  _theResult___snd_snd_fst_val__h3647 =
	      cache_f_fabric_write_reqs$D_OUT[195:193];
      3'b011, 3'b100: _theResult___snd_snd_fst_val__h3647 = 3'b011;
      default: _theResult___snd_snd_fst_val__h3647 = 3'b110;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h3625 or
	  strobe64__h3632 or strobe64__h3636 or strobe64__h3640)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0: mem_req_wr_data_wstrb__h3690 = strobe64__h3625;
      3'b001: mem_req_wr_data_wstrb__h3690 = strobe64__h3632;
      3'b010: mem_req_wr_data_wstrb__h3690 = strobe64__h3636;
      3'b011: mem_req_wr_data_wstrb__h3690 = strobe64__h3640;
      3'b100: mem_req_wr_data_wstrb__h3690 = 8'b11111111;
      default: mem_req_wr_data_wstrb__h3690 = 8'd0;
    endcase
  end
  always@(cache_tlb$lookup or
	  cache_rg_addr or pa___1__h7174 or pa___1__h7223 or pa___1__h7292)
  begin
    case (cache_tlb$lookup[65:64])
      2'd0: _theResult___fst__h7126 = pa___1__h7174;
      2'd1: _theResult___fst__h7126 = pa___1__h7223;
      2'd2: _theResult___fst__h7126 = pa___1__h7292;
      2'd3: _theResult___fst__h7126 = cache_rg_addr;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h3624)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[195:193])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h3689 = word64__h3624;
      default: mem_req_wr_data_wdata__h3689 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'd3: _theResult___snd_fst__h8489 = 64'd0;
      3'b100:
	  _theResult___snd_fst__h8489 =
	      cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:64];
      default: _theResult___snd_fst__h8489 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h8533 =
	      cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:0];
      4'h8:
	  _theResult___fst__h8533 =
	      cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[127:64];
      default: _theResult___fst__h8533 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h34072 or
	  result_lo__h34107 or
	  result_lo__h34140 or
	  result_lo__h34173 or
	  result_lo__h34206 or
	  result_lo__h34239 or
	  result_lo__h34272 or
	  result_lo__h34305 or
	  result_lo__h34338 or
	  result_lo__h34371 or
	  result_lo__h34404 or
	  result_lo__h34437 or
	  result_lo__h34470 or
	  result_lo__h34503 or result_lo__h34536 or result_lo__h34569)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34072;
      4'h1:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34107;
      4'h2:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34140;
      4'h3:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34173;
      4'h4:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34206;
      4'h5:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34239;
      4'h6:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34272;
      4'h7:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34305;
      4'h8:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34338;
      4'h9:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34371;
      4'hA:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34404;
      4'hB:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34437;
      4'hC:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34470;
      4'hD:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34503;
      4'hE:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34536;
      4'hF:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 =
	      result_lo__h34569;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h34902 or
	  result_lo__h34935 or result_lo__h34968 or result_lo__h35001)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 =
	      result_lo__h34902;
      4'h4:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 =
	      result_lo__h34935;
      4'h8:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 =
	      result_lo__h34968;
      4'hC:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 =
	      result_lo__h35001;
      default: IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h34624 or
	  result_lo__h34657 or
	  result_lo__h34690 or
	  result_lo__h34723 or
	  result_lo__h34756 or
	  result_lo__h34789 or result_lo__h34822 or result_lo__h34855)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34624;
      4'h2:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34657;
      4'h4:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34690;
      4'h6:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34723;
      4'h8:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34756;
      4'hA:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34789;
      4'hC:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34822;
      4'hE:
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
	      result_lo__h34855;
      default: IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532 or
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572 or
	  IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592 or
	  _theResult___fst__h8533 or
	  cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___fst__h8487 =
	      IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d532;
      3'd1:
	  _theResult___fst__h8487 =
	      IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d572;
      3'b010:
	  _theResult___fst__h8487 =
	      IF_cache_rg_addr_23_BITS_3_TO_0_94_EQ_0x0_36_T_ETC___d592;
      3'd3: _theResult___fst__h8487 = _theResult___fst__h8533;
      3'b100:
	  _theResult___fst__h8487 =
	      cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422[63:0];
      default: _theResult___fst__h8487 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ddr4_ready$EN)
	  cache_rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_ddr4_ready$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_wr_rsp_err$EN)
	  cache_rg_wr_rsp_err <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_wr_rsp_err$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_cset_cword_in_cache$EN)
      cache_rg_cset_cword_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_cset_cword_in_cache$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_mstatus_MXR$EN)
      cache_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY cache_rg_mstatus_MXR$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_priv$EN)
      cache_rg_priv <= `BSV_ASSIGNMENT_DELAY cache_rg_priv$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_satp$EN)
      cache_rg_satp <= `BSV_ASSIGNMENT_DELAY cache_rg_satp$D_IN;
    if (cache_rg_sstatus_SUM$EN)
      cache_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY cache_rg_sstatus_SUM$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_victim_way$EN)
      cache_rg_victim_way <= `BSV_ASSIGNMENT_DELAY cache_rg_victim_way$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_rg_addr = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cset_cword_in_cache = 8'hAA;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_ddr4_ready = 1'h0;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_mstatus_MXR = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_priv = 2'h2;
    cache_rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_sstatus_SUM = 1'h0;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 5'h0A;
    cache_rg_victim_way = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_wr_rsp_err = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cache_f_fabric_write_reqs$D_OUT[192:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_addr_awlen__h3606);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", _theResult___snd_snd_fst_val__h3647, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_data_wdata__h3689);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_data_wstrb__h3690);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] == 3'b100)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_fabric_write_reqs$D_OUT[195:193] != 3'b100)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", mem_req_wr_second_data_wuser__h3481, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5335 = $stime;
	  #0;
	end
    v__h5329 = v__h5335 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5329,
		 "I_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5436 = $stime;
	  #0;
	end
    v__h5430 = v__h5436 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5430, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h5595 = $stime;
	  #0;
	end
    v__h5589 = v__h5595 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h5589,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 cache_rg_priv,
		 cache_rg_satp[63:60],
		 cache_rg_satp[59:44],
		 satp_pa__h2333,
		 cache_rg_addr[29:21],
		 cache_rg_addr[20:12],
		 cache_rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  CWord 0x%0h  Byte 0x%0h}",
		 cache_rg_addr[63:12],
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_ram_state_and_ctag_cset$DOB[105])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[104:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  !cache_ram_state_and_ctag_cset$DOB[105])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[52] &&
	  cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230 &&
	  cache_ram_state_and_ctag_cset$DOB[105] &&
	  cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d242 &&
	  cache_tlb$lookup[130])
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_rg_priv_06_ULE_0b1___d107 &&
	  cache_rg_satp[63:60] == 4'd8 &&
	  !cache_tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_rg_priv_06_ULE_0b1___d107 &&
	  cache_rg_satp[63:60] == 4'd8 &&
	  !pte___2__h7125[62])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  (!cache_rg_priv_06_ULE_0b1___d107 || cache_rg_satp[63:60] != 4'd8 ||
	   pte___2__h7125[62]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h",
	       IF_cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_sa_ETC___d228);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", x1_avValue_exc_code__h6945);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d271)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  cache_rg_priv_06_ULE_0b1_07_AND_cache_rg_satp__ETC___d274)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", value__h7957, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d283)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d283)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_tlb_lookup_cache_rg_satp_09_BITS_59_TO_4_ETC___d283)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_priv_06_EQ_0b0_28_29_OR_cache_tlb_ETC___d286)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 &&
	  cache_ram_state_and_ctag_cset_b_read__95_BIT_5_ETC___d603)
	begin
	  v__h35204 = $stime;
	  #0;
	end
    v__h35198 = v__h35204 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 &&
	  cache_ram_state_and_ctag_cset_b_read__95_BIT_5_ETC___d603)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h35198,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422,
		 129'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 &&
	  cache_ram_state_and_ctag_cset_b_read__95_BIT_5_ETC___d603)
	$display("        Read-hit: addr 0x%0h centry 0x%0h",
		 cache_rg_addr,
		 cache_ram_cword_set_b_read__06_BITS_128_TO_0_0_ETC___d422);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_priv_06_ULE_0b1_07_08_OR_NOT_cach_ETC___d237 &&
	  (!cache_ram_state_and_ctag_cset$DOB[52] ||
	   !cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d230) &&
	  (!cache_ram_state_and_ctag_cset$DOB[105] ||
	   !cache_ram_state_and_ctag_cset_b_read__95_BITS__ETC___d232) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	begin
	  v__h52309 = $stime;
	  #0;
	end
    v__h52303 = v__h52309 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("%0d: %m.ma_ddr4_ready: Enabling MMU_Cache", v__h52303);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h35717 = $stime;
	  #0;
	end
    v__h35711 = v__h35717 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		 v__h35711,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h35916 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0t            To fabric: ", v__h35916);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", lev_2_pte_pa_w64_fa__h35772);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_tlb_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h36644 = $stime;
	  #0;
	end
    v__h36638 = v__h36644 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h36638,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h36401 = $stime;
	  #0;
	end
    v__h36395 = v__h36401 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		 v__h36395,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h36804 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0t            To fabric: ", v__h36804);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", lev_1_pte_pa_w64_fa__h36678);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d706)
	begin
	  v__h36949 = $stime;
	  #0;
	end
    v__h36943 = v__h36949 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d706)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		 v__h36943,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  (cache_masterPortShim_rff$D_OUT[31:23] != 9'd0 ||
	   cache_masterPortShim_rff$D_OUT[22:14] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d718)
	begin
	  v__h37061 = $stime;
	  #0;
	end
    v__h37055 = v__h37061 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d718)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		 v__h37055,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  cache_masterPortShim_rff_first__41_BIT_7_52_OR_ETC___d718)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h36674);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h36573 = $stime;
	  #0;
	end
    v__h36567 = v__h36573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_2 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h36567,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h37702 = $stime;
	  #0;
	end
    v__h37696 = v__h37702 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h37696,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h37462 = $stime;
	  #0;
	end
    v__h37456 = v__h37462 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		 v__h37456,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h37862 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0t            To fabric: ", v__h37862);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", lev_0_pte_pa_w64_fa__h37736);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d757)
	begin
	  v__h38119 = $stime;
	  #0;
	end
    v__h38113 = v__h38119 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d757)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		 v__h38113,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d757)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h36674);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d763)
	begin
	  v__h38007 = $stime;
	  #0;
	end
    v__h38001 = v__h38007 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff_first__41_BITS_3_TO_2_ETC___d763)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		 v__h38001,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  cache_masterPortShim_rff$D_OUT[22:14] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h37631 = $stime;
	  #0;
	end
    v__h37625 = v__h37631 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h37625,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h38598 = $stime;
	  #0;
	end
    v__h38592 = v__h38598 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (!cache_masterPortShim_rff$D_OUT[4] ||
	   !cache_masterPortShim_rff$D_OUT[5] &&
	   cache_masterPortShim_rff$D_OUT[6]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		 v__h38592,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h38669 = $stime;
	  #0;
	end
    v__h38663 = v__h38669 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  !cache_masterPortShim_rff$D_OUT[6] &&
	  !cache_masterPortShim_rff$D_OUT[7] &&
	  !cache_masterPortShim_rff$D_OUT[5] &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		 v__h38663,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa,
		 6'd12);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h38751 = $stime;
	  #0;
	end
    v__h38745 = v__h38751 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		 v__h38745,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_masterPortShim_rff$D_OUT[67:4],
		 cache_rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[4] &&
	  (cache_masterPortShim_rff$D_OUT[5] ||
	   !cache_masterPortShim_rff$D_OUT[6]) &&
	  (cache_masterPortShim_rff$D_OUT[7] ||
	   cache_masterPortShim_rff$D_OUT[5]) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h36674);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h38527 = $stime;
	  #0;
	end
    v__h38521 = v__h38527 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_ptw_level_0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		 v__h38521,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pte_pa,
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h38883 = $stime;
	  #0;
	end
    v__h38877 = v__h38883 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_start_cache_refill: ", v__h38877, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h39035 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0t            To fabric: ", v__h39035);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cline_fabric_addr__h38936);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h39093[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	begin
	  v__h39609 = $stime;
	  #0;
	end
    v__h39603 = v__h39609 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h39603,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[72:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h39851 = $stime;
	  #0;
	end
    v__h39845 = v__h39851 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h39845,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { cache_masterPortShim_rff$D_OUT[0],
		   cache_masterPortShim_rff$D_OUT[67:4],
		   cache_rg_lower_word64 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_cset_cword_in_cache[1:0] == 2'd3 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$display("        Updating Cache cword_set 0x%0h, cword_in_cline %0d) old => new",
		 cache_rg_cset_cword_in_cache,
		 cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(" 0x%0x", cache_ram_cword_set$DOB[128:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(" 0x%0x", cache_ram_cword_set$DOB[257:129]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("        CSet 0x%0x, CWord 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_cset_cword_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_05_THEN_cache_ram_cword_ETC___d873);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write(" 0x%0x",
	       IF_cache_rg_victim_way_05_THEN_cache_masterPor_ETC___d874);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__7_ULE_2_14___d815)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h48929 = $stime;
	  #0;
	end
    v__h48923 = v__h48929 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h48923,
	       "I_MMU_Cache",
	       $unsigned(b__h35671));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h48971 = $stime;
	  #0;
	end
    v__h48965 = v__h48971 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h48965,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h4849 = $stime;
	  #0;
	end
    v__h4843 = v__h4849 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h4843,
		 "I_MMU_Cache",
		 $signed(32'd8),
		 $signed(32'd2),
		 $signed(32'd32),
		 $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h49912 = $stime;
	  #0;
	end
    v__h49906 = v__h49912 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("%0d: %m.req: op:", v__h49906);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  cache_w_req_width_code_wget__35_EQ_0b0_56_OR_c_ETC___d997)
	$display("    fa_req_ram_B tagCSet [0x%0x] cword_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cache_cfg_verbosity_read__7_ULE_1___d58)
	begin
	  v__h51277 = $stime;
	  #0;
	end
    v__h51271 = v__h51277 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cache_cfg_verbosity_read__7_ULE_1___d58)
	$display("%0d: %s.tlb_flush", v__h51271, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && EN_tlb_flush)
	$display("Error: \"../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 1976, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_tlb_flush] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 1975, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 1974, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 1973, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../src_Core/Near_Mem_VM_WT_L1/MMU_Cache.bsv\", line 1972, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

