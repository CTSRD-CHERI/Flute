//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// read_scr                       O   154
// mav_read_csr                   O    65
// mav_csr_write                  O    64
// mav_scr_write                  O   153
// read_frm                       O     3 reg
// read_misa                      O    28 const
// read_mstatus                   O    64 reg
// read_sstatus                   O    64
// read_ustatus                   O    64
// read_satp                      O    64 reg
// csr_trap_actions               O   283
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   229
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    64
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// read_dpcc                      O   163 reg
// RDY_read_dpcc                  O     1 const
// RDY_write_dpcc                 O     1 const
// dcsr_break_enters_debug        O     1
// RDY_dcsr_break_enters_debug    O     1 const
// read_dcsr_step                 O     1 reg
// RDY_read_dcsr_step             O     1 const
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    64
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I   153
// ma_update_fcsr_fflags_flags    I     5
// ma_update_mstatus_fs_fs        I     2
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I   163
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// write_dpcc_pcc                 I   163
// dcsr_break_enters_debug_cur_priv  I     2
// write_dcsr_cause_priv_cause    I     3
// write_dcsr_cause_priv_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_ma_update_fcsr_fflags       I     1
// EN_ma_update_mstatus_fs        I     1
// EN_csr_minstret_incr           I     1
// EN_write_dpcc                  I     1
// EN_write_dcsr_cause_priv       I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   dcsr_break_enters_debug_cur_priv -> dcsr_break_enters_debug
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_frm,

		     ma_update_fcsr_fflags_flags,
		     EN_ma_update_fcsr_fflags,

		     ma_update_mstatus_fs_fs,
		     EN_ma_update_mstatus_fs,

		     read_misa,

		     read_mstatus,

		     read_sstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     s_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,

		     nmi_pending,

		     read_dpcc,
		     RDY_read_dpcc,

		     write_dpcc_pcc,
		     EN_write_dpcc,
		     RDY_write_dpcc,

		     dcsr_break_enters_debug_cur_priv,
		     dcsr_break_enters_debug,
		     RDY_dcsr_break_enters_debug,

		     read_dcsr_step,
		     RDY_read_dcsr_step,

		     write_dcsr_cause_priv_cause,
		     write_dcsr_cause_priv_priv,
		     EN_write_dcsr_cause_priv,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [153 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [63 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [63 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [152 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [152 : 0] mav_scr_write;

  // value method read_frm
  output [2 : 0] read_frm;

  // action method ma_update_fcsr_fflags
  input  [4 : 0] ma_update_fcsr_fflags_flags;
  input  EN_ma_update_fcsr_fflags;

  // action method ma_update_mstatus_fs
  input  [1 : 0] ma_update_mstatus_fs_fs;
  input  EN_ma_update_mstatus_fs;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_sstatus
  output [63 : 0] read_sstatus;

  // value method read_ustatus
  output [63 : 0] read_ustatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [162 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [282 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [228 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [63 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // value method nmi_pending
  output nmi_pending;

  // value method read_dpcc
  output [162 : 0] read_dpcc;
  output RDY_read_dpcc;

  // action method write_dpcc
  input  [162 : 0] write_dpcc_pcc;
  input  EN_write_dpcc;
  output RDY_write_dpcc;

  // value method dcsr_break_enters_debug
  input  [1 : 0] dcsr_break_enters_debug_cur_priv;
  output dcsr_break_enters_debug;
  output RDY_dcsr_break_enters_debug;

  // value method read_dcsr_step
  output read_dcsr_step;
  output RDY_read_dcsr_step;

  // action method write_dcsr_cause_priv
  input  [2 : 0] write_dcsr_cause_priv_cause;
  input  [1 : 0] write_dcsr_cause_priv_priv;
  input  EN_write_dcsr_cause_priv;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  reg dcsr_break_enters_debug;
  wire [282 : 0] csr_trap_actions;
  wire [228 : 0] csr_ret_actions;
  wire [162 : 0] read_dpcc;
  wire [153 : 0] read_scr;
  wire [152 : 0] mav_scr_write;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] csr_mip_read,
		mav_csr_write,
		read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_sstatus,
		read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [2 : 0] read_frm;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_dcsr_break_enters_debug,
       RDY_debug,
       RDY_read_dcsr_step,
       RDY_read_dpcc,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_write_dpcc,
       csr_counter_read_fault,
       nmi_pending,
       read_dcsr_step,
       wfi_resume;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [63 : 0] csr_mstatus_rg_mstatus;
  reg [63 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  reg [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpcc
  reg [162 : 0] rg_dpcc;
  reg [162 : 0] rg_dpcc$D_IN;
  wire rg_dpcc$EN;

  // register rg_dscratch0
  reg [63 : 0] rg_dscratch0;
  wire [63 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [63 : 0] rg_dscratch1;
  wire [63 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  reg [4 : 0] rg_fflags$D_IN;
  wire rg_fflags$EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm$D_IN;
  wire rg_frm$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_medeleg
  reg [28 : 0] rg_medeleg;
  wire [28 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_mepcc
  reg [152 : 0] rg_mepcc;
  reg [152 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [152 : 0] rg_mscratchc;
  wire [152 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [152 : 0] rg_mtcc;
  reg [152 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [152 : 0] rg_mtdc;
  wire [152 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [63 : 0] rg_nmi_vector;
  wire [63 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_scause
  reg [6 : 0] rg_scause;
  reg [6 : 0] rg_scause$D_IN;
  wire rg_scause$EN;

  // register rg_sccsr
  reg [10 : 0] rg_sccsr;
  wire [10 : 0] rg_sccsr$D_IN;
  wire rg_sccsr$EN;

  // register rg_sepcc
  reg [152 : 0] rg_sepcc;
  reg [152 : 0] rg_sepcc$D_IN;
  wire rg_sepcc$EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch$D_IN;
  wire rg_sscratch$EN;

  // register rg_sscratchc
  reg [152 : 0] rg_sscratchc;
  wire [152 : 0] rg_sscratchc$D_IN;
  wire rg_sscratchc$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_stcc
  reg [152 : 0] rg_stcc;
  reg [152 : 0] rg_stcc$D_IN;
  wire rg_stcc$EN;

  // register rg_stdc
  reg [152 : 0] rg_stdc;
  wire [152 : 0] rg_stdc$D_IN;
  wire rg_stdc$EN;

  // register rg_stval
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval$D_IN;
  wire rg_stval$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [63 : 0] csr_mie$fav_sie_write,
		csr_mie$fav_sie_write_wordxl,
		csr_mie$fav_write,
		csr_mie$fav_write_wordxl,
		csr_mie$fv_read,
		csr_mie$fv_sie_read;
  wire [27 : 0] csr_mie$fav_sie_write_misa, csr_mie$fav_write_misa;
  wire csr_mie$EN_fav_sie_write, csr_mie$EN_fav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [63 : 0] csr_mip$fav_sip_write,
		csr_mip$fav_sip_write_wordxl,
		csr_mip$fav_write,
		csr_mip$fav_write_wordxl,
		csr_mip$fv_read,
		csr_mip$fv_sip_read;
  wire [27 : 0] csr_mip$fav_sip_write_misa, csr_mip$fav_write_misa;
  wire csr_mip$EN_fav_sip_write,
       csr_mip$EN_fav_write,
       csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule soc_map
  wire [152 : 0] soc_map$m_mepcc_reset_value,
		 soc_map$m_mtcc_reset_value,
		 soc_map$m_pcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_nmivec_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_update_fcsr_fflags,
       CAN_FIRE_ma_update_mstatus_fs,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_dcsr_cause_priv,
       CAN_FIRE_write_dpcc,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_update_fcsr_fflags,
       WILL_FIRE_ma_update_mstatus_fs,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_dcsr_cause_priv,
       WILL_FIRE_write_dpcc;

  // inputs to muxes for submodule ports
  wire [162 : 0] MUX_rg_dpcc$write_1__VAL_1, MUX_rg_dpcc$write_1__VAL_3;
  wire [152 : 0] MUX_rg_mepcc$write_1__VAL_2,
		 MUX_rg_mepcc$write_1__VAL_4,
		 MUX_rg_mtcc$write_1__VAL_2,
		 MUX_rg_mtcc$write_1__VAL_3,
		 MUX_rg_sepcc$write_1__VAL_4,
		 MUX_rg_stcc$write_1__VAL_3;
  wire [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_2,
		MUX_csr_mstatus_rg_mstatus$write_1__VAL_4,
		MUX_csr_mstatus_rg_mstatus$write_1__VAL_5,
		MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2;
  wire [31 : 0] MUX_rg_dcsr$write_1__VAL_3;
  wire [28 : 0] MUX_rg_medeleg$write_1__VAL_1;
  wire [10 : 0] MUX_rg_mccsr$write_1__VAL_2;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire [4 : 0] MUX_rg_fflags$write_1__VAL_3;
  wire [2 : 0] MUX_rg_frm$write_1__VAL_1;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_5,
       MUX_rg_dcsr$write_1__SEL_2,
       MUX_rg_dpcc$write_1__SEL_3,
       MUX_rg_fflags$write_1__SEL_2,
       MUX_rg_frm$write_1__SEL_1,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_3,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_medeleg$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_4,
       MUX_rg_mideleg$write_1__SEL_1,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_satp$write_1__SEL_1,
       MUX_rg_scause$write_1__SEL_2,
       MUX_rg_scause$write_1__SEL_3,
       MUX_rg_sepcc$write_1__SEL_2,
       MUX_rg_sepcc$write_1__SEL_4,
       MUX_rg_stcc$write_1__SEL_2,
       MUX_rg_stcc$write_1__SEL_3,
       MUX_rg_stval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [152 : 0] IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758;
  reg [65 : 0] x1_avValue_fst_address__h20554;
  reg [63 : 0] IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007,
	       IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465,
	       IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715,
	       y_avValue_fst__h16209;
  reg [61 : 0] CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1;
  reg [33 : 0] CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q5;
  reg [17 : 0] x1_avValue_fst_otype__h20559;
  reg [13 : 0] x1_avValue_fst_addrBits__h20555;
  reg [3 : 0] x1_avValue_fst_perms_soft__h20597;
  reg [1 : 0] x1_avValue_fst_reserved__h20558;
  reg CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q4,
      CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3,
      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769,
      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872,
      IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772,
      x1_avValue_fst_flags__h20557,
      x__h19638;
  wire [151 : 0] _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2379;
  wire [65 : 0] addTop__h19454,
		capUnpacked_capFat_address__h17646,
		capUnpacked_capFat_address__h18284,
		in__h20361,
		in__h21576,
		in__h5905,
		in__h6113,
		in__h6445,
		in__h6665,
		in__h6900,
		length__h20188,
		mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726,
		result__h20128,
		result_d_address__h15583,
		result_d_address__h25268,
		ret__h19458,
		x__h20379,
		x__h21594,
		x__h25310,
		x__h5923,
		x__h6131,
		x__h6463,
		x__h6683,
		x__h6918,
		x_address__h11347,
		x_address__h11833,
		x_address__h13571,
		x_address__h14154,
		y__h20378,
		y__h21593,
		y__h5922,
		y__h6130,
		y__h6462,
		y__h6682,
		y__h6917;
  wire [63 : 0] IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124,
		IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402,
		SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602,
		SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423,
		SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357,
		SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285,
		_theResult_____2__h24020,
		_theResult___fst__h25831,
		_theResult___fst__h26032,
		addBase__h11367,
		addBase__h11853,
		addBase__h13591,
		addBase__h14174,
		addBase__h15603,
		addBase__h19332,
		addBase__h25300,
		bot__h11370,
		bot__h11856,
		bot__h13594,
		bot__h14177,
		bot__h15606,
		bot__h19335,
		bot__h25303,
		csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395,
		csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116,
		exc_pc___1__h24110,
		exc_pc__h24018,
		mask__h22772,
		mask__h22789,
		mask__h25852,
		mask__h25869,
		mav_csr_write_word_BITS_14_TO_13_050_EQ_0x3_05_ETC___d1081,
		offsetAddr__h13301,
		offsetAddr__h13900,
		offsetAddr__h17271,
		offsetAddr__h17909,
		result__h15007,
		v__h10430,
		v__h12618,
		v__h12654,
		v__h13737,
		v__h14320,
		v__h15108,
		v__h22568,
		v__h9611,
		v__h9755,
		val__h22773,
		val__h22790,
		val__h25870,
		vector_offset__h24019,
		wordxl1__h12701,
		x__h11214,
		x__h11708,
		x__h13446,
		x__h14029,
		x__h15511,
		x__h17520,
		x__h18158,
		x__h20292,
		x__h20294,
		x__h21467,
		x__h21469,
		x__h22771,
		x__h22784,
		x__h22801,
		x__h25171,
		x__h25677,
		x__h25678,
		x__h25851,
		x__h25864,
		x__h25881,
		x__h5789,
		x__h5791,
		x__h5997,
		x__h5999,
		x__h6329,
		x__h6331,
		x__h6549,
		x__h6551,
		x__h7400,
		x__h7402,
		x__h9854,
		y__h22785,
		y__h22802,
		y__h25865,
		y__h25882,
		y_avValue_fst__h23972,
		y_avValue_fst__h23990,
		y_avValue_snd_snd_snd__h24072;
  wire [52 : 0] IF_mav_scr_write_scr_addr_EQ_12_578_OR_mav_scr_ETC___d1843;
  wire [51 : 0] mask__h19455;
  wire [49 : 0] highBitsfilter__h11072,
		highBitsfilter__h11582,
		highBitsfilter__h13304,
		highBitsfilter__h13903,
		highBitsfilter__h15399,
		highBitsfilter__h24980,
		highOffsetBits__h11073,
		highOffsetBits__h11583,
		highOffsetBits__h13305,
		highOffsetBits__h13904,
		highOffsetBits__h15400,
		highOffsetBits__h17913,
		highOffsetBits__h24981,
		mask__h19333,
		mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x0_ETC__q2,
		signBits__h15397,
		signBits__h17910,
		signBits__h24978,
		x__h15426,
		x__h17939,
		x__h25007;
  wire [31 : 0] dcsr__h7230, new_dcsr__h15111;
  wire [22 : 0] fixed_up_val_23__h10481,
		fixed_up_val_23__h12742,
		fixed_up_val_23__h20779,
		fixed_up_val_23__h22612,
		fixed_up_val_23__h25738,
		fixed_up_val_23__h9886;
  wire [15 : 0] base__h21454,
		base__h7387,
		newAddrBits__h11327,
		newAddrBits__h11813,
		newAddrBits__h13551,
		newAddrBits__h14134,
		newAddrBits__h15572,
		newAddrBits__h17626,
		newAddrBits__h18264,
		newAddrBits__h25257,
		offset__h20280,
		offset__h21455,
		offset__h5777,
		offset__h5985,
		offset__h6317,
		offset__h6537,
		offset__h7388,
		x__h11424,
		x__h11910,
		x__h13648,
		x__h14231,
		x__h19389,
		x__h19544,
		x__h20193,
		x__h25357,
		x__h7335,
		x__h7353;
  wire [13 : 0] capUnpacked_capFat_addrBits__h17647,
		capUnpacked_capFat_addrBits__h18285,
		repBoundBits__h11079,
		repBoundBits__h11589,
		repBoundBits__h13311,
		repBoundBits__h13910,
		repBoundBits__h15406,
		repBoundBits__h17281,
		repBoundBits__h24987,
		result_d_addrBits__h15584,
		result_d_addrBits__h25269,
		toBoundsM1__h11083,
		toBoundsM1__h11593,
		toBoundsM1__h13315,
		toBoundsM1__h13914,
		toBoundsM1__h15410,
		toBoundsM1__h18562,
		toBoundsM1__h24991,
		toBounds__h11082,
		toBounds__h11592,
		toBounds__h13314,
		toBounds__h13913,
		toBounds__h15409,
		toBounds__h18561,
		toBounds__h24990,
		x1_avValue_snd_fst_capFat_addrBits__h25097,
		x__h25201,
		x_addrBits__h11348,
		x_addrBits__h11834,
		x_addrBits__h13572,
		x_addrBits__h14155;
  wire [5 : 0] IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2950,
	       IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2952,
	       IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2953,
	       IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2955,
	       IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317,
	       exc_code__h24803,
	       ie_from_x__h25815,
	       ie_to_x__h22689,
	       pie_from_x__h25816,
	       pie_to_x__h22690;
  wire [4 : 0] IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1410,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22;
  wire [3 : 0] IF_rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc__ETC___d2424,
	       IF_rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc__ETC___d2435;
  wire [2 : 0] repBound__h15809,
	       repBound__h20419,
	       repBound__h4840,
	       repBound__h5827,
	       repBound__h6035,
	       repBound__h6367,
	       repBound__h6587,
	       x1_avValue_snd_fst_tempFields_repBoundTopBits__h25223,
	       x1_avValue_snd_fst_tempFields_repBoundTopBits__h25235;
  wire [1 : 0] IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_041_ETC___d1043,
	       IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376,
	       IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302,
	       _theResult____h27798,
	       _theResult____h28010,
	       _theResult____h28222,
	       _theResult____h28434,
	       _theResult____h28646,
	       _theResult____h28858,
	       _theResult____h29070,
	       _theResult____h29282,
	       _theResult____h29494,
	       _theResult___fst__h22701,
	       new_priv__h22563,
	       to_y__h26031,
	       x__h20480,
	       x__h20499;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2344,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1627,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1667,
       IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2352,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1111,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1164,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1237,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1289,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1368,
       IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_441__ETC___d2548,
       NOT_access_permitted_1_read_not_write_559_OR_a_ETC___d2574,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_575__ETC___d2682,
       NOT_access_permitted_2_read_not_write_691_OR_a_ETC___d2706,
       NOT_cfg_verbosity_read__506_ULE_1_507___d1508,
       NOT_csr_mip_fv_read__94_BIT_0_839_930_OR_NOT_c_ETC___d2937,
       NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875,
       NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902,
       NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2929,
       NOT_csr_mip_fv_read__94_BIT_1_806_903_OR_NOT_c_ETC___d2910,
       NOT_csr_mip_fv_read__94_BIT_3_773_876_OR_NOT_c_ETC___d2883,
       NOT_csr_mip_fv_read__94_BIT_5_817_912_OR_NOT_c_ETC___d2919,
       NOT_csr_mip_fv_read__94_BIT_7_784_885_OR_NOT_c_ETC___d2892,
       NOT_csr_mip_fv_read__94_BIT_8_828_921_OR_NOT_c_ETC___d2928,
       NOT_csr_mip_fv_read__94_BIT_9_795_894_OR_NOT_c_ETC___d2901,
       NOT_csr_trap_actions_nmi_142_AND_csr_trap_acti_ETC___d2258,
       NOT_mav_scr_write_cap_BITS_13_TO_11_581_MINUS__ETC___d1622,
       NOT_mav_scr_write_cap_BITS_33_TO_28_595_ULT_50_ETC___d1630,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1707,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1709,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1755,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1757,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1758,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1760,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1761,
       NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1762,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1634,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1670,
       access_permitted_1_csr_addr_ULE_0xC1F___d2443,
       access_permitted_1_csr_addr_ULT_0xC03___d2441,
       access_permitted_2_csr_addr_ULE_0xC1F___d2577,
       access_permitted_2_csr_addr_ULT_0xC03___d2575,
       b__h22788,
       b__h25868,
       csr_mip_fv_read__94_BIT_0_839_AND_csr_mie_fv_r_ETC___d2848,
       csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2772,
       csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2838,
       csr_mip_fv_read__94_BIT_1_806_AND_csr_mie_fv_r_ETC___d2815,
       csr_mip_fv_read__94_BIT_3_773_AND_csr_mie_fv_r_ETC___d2782,
       csr_mip_fv_read__94_BIT_4_850_AND_csr_mie_fv_r_ETC___d2859,
       csr_mip_fv_read__94_BIT_5_817_AND_csr_mie_fv_r_ETC___d2826,
       csr_mip_fv_read__94_BIT_7_784_AND_csr_mie_fv_r_ETC___d2793,
       csr_mip_fv_read__94_BIT_8_828_AND_csr_mie_fv_r_ETC___d2837,
       csr_mip_fv_read__94_BIT_9_795_AND_csr_mie_fv_r_ETC___d2804,
       csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2157,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2309,
       deleg_bit___1__h22710,
       deleg_bit___1__h22725,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2761,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2779,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2790,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2801,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2760,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2778,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2789,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2800,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844,
       mav_csr_write_csr_addr_ULE_0x33F___d1015,
       mav_csr_write_csr_addr_ULE_0xB1F___d1011,
       mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1504,
       mav_csr_write_csr_addr_ULT_0x323___d1014,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1028,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1039,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1142,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1144,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1199,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1201,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1203,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1205,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1214,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1217,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1219,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1267,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1269,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1271,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1327,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1329,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1331,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1335,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1337,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1339,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1349,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1414,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1416,
       mav_csr_write_csr_addr_ULT_0xB03___d1010,
       mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583,
       mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718,
       mav_scr_write_cap_BITS_33_TO_28_595_ULT_51_712_ETC___d1742,
       mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585,
       rg_dpcc_08_BITS_23_TO_21_394_ULT_rg_dpcc_08_BI_ETC___d1398,
       rg_dpcc_08_BITS_37_TO_35_396_ULT_rg_dpcc_08_BI_ETC___d1397,
       rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369,
       rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc_64__ETC___d2419,
       rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371,
       rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338,
       rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340,
       rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295,
       rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc_90__ETC___d2430,
       rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297,
       rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266,
       rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268,
       sd__h12741,
       sd__h20778,
       sd__h22611,
       sd__h25737,
       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'h001 ||
	       read_csr_csr_addr == 12'h002 ||
	       read_csr_csr_addr == 12'h003 ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'h100 ||
	       read_csr_csr_addr == 12'h102 ||
	       read_csr_csr_addr == 12'h103 ||
	       read_csr_csr_addr == 12'h104 ||
	       read_csr_csr_addr == 12'h105 ||
	       read_csr_csr_addr == 12'h106 ||
	       read_csr_csr_addr == 12'h140 ||
	       read_csr_csr_addr == 12'h141 ||
	       read_csr_csr_addr == 12'h142 ||
	       read_csr_csr_addr == 12'h143 ||
	       read_csr_csr_addr == 12'h144 ||
	       read_csr_csr_addr == 12'h9C0 ||
	       read_csr_csr_addr == 12'h180 ||
	       read_csr_csr_addr == 12'h302 ||
	       read_csr_csr_addr == 12'h303 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3 ||
	       read_csr_csr_addr == 12'h7B0 ||
	       read_csr_csr_addr == 12'h7B1 ||
	       read_csr_csr_addr == 12'h7B2 ||
	       read_csr_csr_addr == 12'h7B3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'h001 ||
	       read_csr_port2_csr_addr == 12'h002 ||
	       read_csr_port2_csr_addr == 12'h003 ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'h100 ||
	       read_csr_port2_csr_addr == 12'h102 ||
	       read_csr_port2_csr_addr == 12'h103 ||
	       read_csr_port2_csr_addr == 12'h104 ||
	       read_csr_port2_csr_addr == 12'h105 ||
	       read_csr_port2_csr_addr == 12'h106 ||
	       read_csr_port2_csr_addr == 12'h140 ||
	       read_csr_port2_csr_addr == 12'h141 ||
	       read_csr_port2_csr_addr == 12'h142 ||
	       read_csr_port2_csr_addr == 12'h143 ||
	       read_csr_port2_csr_addr == 12'h144 ||
	       read_csr_port2_csr_addr == 12'h9C0 ||
	       read_csr_port2_csr_addr == 12'h180 ||
	       read_csr_port2_csr_addr == 12'h302 ||
	       read_csr_port2_csr_addr == 12'h303 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3 ||
	       read_csr_port2_csr_addr == 12'h7B0 ||
	       read_csr_port2_csr_addr == 12'h7B1 ||
	       read_csr_port2_csr_addr == 12'h7B2 ||
	       read_csr_port2_csr_addr == 12'h7B3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd12 || read_scr_scr_addr == 5'd13 ||
	       read_scr_scr_addr == 5'd14 ||
	       read_scr_scr_addr == 5'd15 ||
	       read_scr_scr_addr == 5'd28 ||
	       read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'h001 ||
	       mav_read_csr_csr_addr == 12'h002 ||
	       mav_read_csr_csr_addr == 12'h003 ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'h100 ||
	       mav_read_csr_csr_addr == 12'h102 ||
	       mav_read_csr_csr_addr == 12'h103 ||
	       mav_read_csr_csr_addr == 12'h104 ||
	       mav_read_csr_csr_addr == 12'h105 ||
	       mav_read_csr_csr_addr == 12'h106 ||
	       mav_read_csr_csr_addr == 12'h140 ||
	       mav_read_csr_csr_addr == 12'h141 ||
	       mav_read_csr_csr_addr == 12'h142 ||
	       mav_read_csr_csr_addr == 12'h143 ||
	       mav_read_csr_csr_addr == 12'h144 ||
	       mav_read_csr_csr_addr == 12'h9C0 ||
	       mav_read_csr_csr_addr == 12'h180 ||
	       mav_read_csr_csr_addr == 12'h302 ||
	       mav_read_csr_csr_addr == 12'h303 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3 ||
	       mav_read_csr_csr_addr == 12'h7B0 ||
	       mav_read_csr_csr_addr == 12'h7B1 ||
	       mav_read_csr_csr_addr == 12'h7B2 ||
	       mav_read_csr_csr_addr == 12'h7B3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write =
	     (!mav_csr_write_csr_addr_ULT_0xB03___d1010 &&
	      mav_csr_write_csr_addr_ULE_0xB1F___d1011 ||
	      !mav_csr_write_csr_addr_ULT_0x323___d1014 &&
	      mav_csr_write_csr_addr_ULE_0x33F___d1015) ?
	       64'd0 :
	       y_avValue_fst__h16209 ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     { IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772,
	       x1_avValue_fst_address__h20554,
	       x1_avValue_fst_addrBits__h20555,
	       x1_avValue_fst_perms_soft__h20597,
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[67],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[66],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[65],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[64],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[63],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[62],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[61],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[60],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[59],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[58],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[57],
	       (mav_scr_write_scr_addr == 5'd12 ||
		mav_scr_write_scr_addr == 5'd13 ||
		mav_scr_write_scr_addr == 5'd15 ||
		mav_scr_write_scr_addr == 5'd14 ||
		mav_scr_write_scr_addr == 5'd28 ||
		mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[56],
	       x1_avValue_fst_flags__h20557,
	       x1_avValue_fst_reserved__h20558,
	       IF_mav_scr_write_scr_addr_EQ_12_578_OR_mav_scr_ETC___d1843 } ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_frm
  assign read_frm = rg_frm ;

  // action method ma_update_fcsr_fflags
  assign CAN_FIRE_ma_update_fcsr_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fcsr_fflags = EN_ma_update_fcsr_fflags ;

  // action method ma_update_mstatus_fs
  assign CAN_FIRE_ma_update_mstatus_fs = 1'd1 ;
  assign WILL_FIRE_ma_update_mstatus_fs = EN_ma_update_mstatus_fs ;

  // value method read_misa
  assign read_misa = 28'd135532845 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_sstatus
  assign read_sstatus =
	     { csr_mstatus_rg_mstatus[63],
	       29'd0,
	       csr_mstatus_rg_mstatus[33:32],
	       12'd0,
	       csr_mstatus_rg_mstatus[19:18],
	       1'd0,
	       csr_mstatus_rg_mstatus[16:13],
	       4'd0,
	       csr_mstatus_rg_mstatus[8],
	       2'd0,
	       csr_mstatus_rg_mstatus[5:4],
	       2'd0,
	       csr_mstatus_rg_mstatus[1:0] } ;

  // value method read_ustatus
  assign read_ustatus =
	     { 59'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp = rg_satp ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2352,
	       _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2379,
	       x__h25677,
	       x__h25678,
	       new_priv__h22563 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { rg_mepcc,
		 repBound__h6587,
		 rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc_64__ETC___d2419,
		 rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369,
		 rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371,
		 IF_rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc__ETC___d2424,
		 csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[12:11],
		 _theResult___fst__h25831 } :
	       { rg_sepcc,
		 repBound__h6035,
		 rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc_90__ETC___d2430,
		 rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295,
		 rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297,
		 IF_rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc__ETC___d2435,
		 to_y__h26031,
		 _theResult___fst__h26032 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_441__ETC___d2548 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_1_read_not_write_559_OR_a_ETC___d2574 } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_575__ETC___d2682 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_2_read_not_write_691_OR_a_ETC___d2706 } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd1 ||
		access_permitted_scr_scr_addr == 5'd12 ||
		access_permitted_scr_scr_addr == 5'd13 ||
		access_permitted_scr_scr_addr == 5'd15 ||
		access_permitted_scr_scr_addr == 5'd14 ||
		access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     (csr_counter_read_fault_csr_addr == 12'hC00 &&
	      !rg_mcounteren[0] ||
	      csr_counter_read_fault_csr_addr == 12'hC01 &&
	      !rg_mcounteren[1] ||
	      csr_counter_read_fault_csr_addr == 12'hC02 &&
	      !rg_mcounteren[2] ||
	      csr_counter_read_fault_csr_addr >= 12'hC03 &&
	      csr_counter_read_fault_csr_addr <= 12'hC1F) ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$fv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2838 ||
	       csr_mip_fv_read__94_BIT_0_839_AND_csr_mie_fv_r_ETC___d2848 ||
	       csr_mip_fv_read__94_BIT_4_850_AND_csr_mie_fv_r_ETC___d2859,
	       IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2955 } ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$fv_read & csr_mie$fv_read) != 64'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // value method read_dpcc
  assign read_dpcc = rg_dpcc ;
  assign RDY_read_dpcc = 1'd1 ;

  // action method write_dpcc
  assign RDY_write_dpcc = 1'd1 ;
  assign CAN_FIRE_write_dpcc = 1'd1 ;
  assign WILL_FIRE_write_dpcc = EN_write_dpcc ;

  // value method dcsr_break_enters_debug
  always@(dcsr_break_enters_debug_cur_priv or rg_dcsr)
  begin
    case (dcsr_break_enters_debug_cur_priv)
      2'b01: dcsr_break_enters_debug = rg_dcsr[13];
      2'b11: dcsr_break_enters_debug = rg_dcsr[15];
      default: dcsr_break_enters_debug = rg_dcsr[12];
    endcase
  end
  assign RDY_dcsr_break_enters_debug = 1'd1 ;

  // value method read_dcsr_step
  assign read_dcsr_step = rg_dcsr[2] ;
  assign RDY_read_dcsr_step = 1'd1 ;

  // action method write_dcsr_cause_priv
  assign CAN_FIRE_write_dcsr_cause_priv = 1'd1 ;
  assign WILL_FIRE_write_dcsr_cause_priv = EN_write_dcsr_cause_priv ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .fav_sie_write_misa(csr_mie$fav_sie_write_misa),
		    .fav_sie_write_wordxl(csr_mie$fav_sie_write_wordxl),
		    .fav_write_misa(csr_mie$fav_write_misa),
		    .fav_write_wordxl(csr_mie$fav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_fav_write(csr_mie$EN_fav_write),
		    .EN_fav_sie_write(csr_mie$EN_fav_sie_write),
		    .fv_read(csr_mie$fv_read),
		    .fav_write(csr_mie$fav_write),
		    .fv_sie_read(csr_mie$fv_sie_read),
		    .fav_sie_write(csr_mie$fav_sie_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .fav_sip_write_misa(csr_mip$fav_sip_write_misa),
		    .fav_sip_write_wordxl(csr_mip$fav_sip_write_wordxl),
		    .fav_write_misa(csr_mip$fav_write_misa),
		    .fav_write_wordxl(csr_mip$fav_write_wordxl),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_fav_write(csr_mip$EN_fav_write),
		    .EN_fav_sip_write(csr_mip$EN_fav_sip_write),
		    .fv_read(csr_mip$fv_read),
		    .fav_write(csr_mip$fav_write),
		    .fv_sip_read(csr_mip$fv_sip_read),
		    .fav_sip_write(csr_mip$fav_sip_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(soc_map$m_pcc_reset_value),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1039 ;
  assign MUX_rg_dcsr$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1339 ;
  assign MUX_rg_dpcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1349 ;
  assign MUX_rg_fflags$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 ;
  assign MUX_rg_frm$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1028 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h22563 == 2'b11) ;
  assign MUX_rg_mcause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1267 ;
  assign MUX_rg_medeleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1205 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1271 ;
  assign MUX_rg_mideleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1214 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1219 ;
  assign MUX_rg_satp$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1203 ;
  assign MUX_rg_scause$write_1__SEL_2 =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b01 ;
  assign MUX_rg_scause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 ;
  assign MUX_rg_sepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ;
  assign MUX_rg_sepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1144 ;
  assign MUX_rg_stcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 ;
  assign MUX_rg_stcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 ;
  assign MUX_rg_stval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1199 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1331 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1327 ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 =
	     { sd__h25737, 40'd5120, fixed_up_val_23__h25738 } ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 =
	     { sd__h20778, 40'd5120, fixed_up_val_23__h20779 } ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 =
	     (mav_csr_write_csr_addr == 12'h003) ?
	       x__h9854 :
	       mav_csr_write_word_BITS_14_TO_13_050_EQ_0x3_05_ETC___d1081 ;
  assign MUX_rg_dcsr$write_1__VAL_3 =
	     { rg_dcsr[31:9],
	       write_dcsr_cause_priv_cause,
	       rg_dcsr[5:2],
	       write_dcsr_cause_priv_priv } ;
  assign MUX_rg_dpcc$write_1__VAL_1 =
	     { soc_map$m_pcc_reset_value,
	       repBound__h4840,
	       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
	       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 } ;
  assign MUX_rg_dpcc$write_1__VAL_3 =
	     { (highOffsetBits__h15400 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1368 ||
		rg_dpcc[43:38] >= 6'd50) &&
	       rg_dpcc[162],
	       result_d_address__h15583,
	       result_d_addrBits__h15584,
	       rg_dpcc[81:10],
	       repBound__h15809,
	       rg_dpcc_08_BITS_37_TO_35_396_ULT_rg_dpcc_08_BI_ETC___d1397,
	       rg_dpcc_08_BITS_23_TO_21_394_ULT_rg_dpcc_08_BI_ETC___d1398,
	       IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1410 } ;
  assign MUX_rg_fflags$write_1__VAL_3 =
	     rg_fflags | ma_update_fcsr_fflags_flags ;
  assign MUX_rg_frm$write_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'h002) ?
	       mav_csr_write_word[2:0] :
	       mav_csr_write_word[7:5] ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h24803 } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { mav_csr_write_word[63], mav_csr_write_word[5:0] } ;
  assign MUX_rg_mccsr$write_1__VAL_2 =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign MUX_rg_medeleg$write_1__VAL_1 =
	     { mav_csr_write_word[28],
	       12'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1670 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h17646,
	       capUnpacked_capFat_addrBits__h17647,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_4 =
	     { (highOffsetBits__h13904 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1289 ||
		rg_mepcc[33:28] >= 6'd50) &&
	       rg_mepcc[52:35] == 18'd262143 &&
	       rg_mepcc[152],
	       x_address__h14154,
	       x_addrBits__h14155,
	       rg_mepcc[71:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1634 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h18284,
	       capUnpacked_capFat_addrBits__h18285,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h13305 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1237 ||
		rg_mtcc[33:28] >= 6'd50) &&
	       rg_mtcc[52:35] == 18'd262143 &&
	       rg_mtcc[152],
	       x_address__h13571,
	       x_addrBits__h13572,
	       rg_mtcc[71:0] } ;
  assign MUX_rg_sepcc$write_1__VAL_4 =
	     { (highOffsetBits__h11583 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1164 ||
		rg_sepcc[33:28] >= 6'd50) &&
	       rg_sepcc[52:35] == 18'd262143 &&
	       rg_sepcc[152],
	       x_address__h11833,
	       x_addrBits__h11834,
	       rg_sepcc[71:0] } ;
  assign MUX_rg_stcc$write_1__VAL_3 =
	     { (highOffsetBits__h11073 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1111 ||
		rg_stcc[33:28] >= 6'd50) &&
	       rg_stcc[52:35] == 18'd262143 &&
	       rg_stcc[152],
	       x_address__h11347,
	       x_addrBits__h11348,
	       rg_stcc[71:0] } ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 or
	  EN_csr_trap_actions or
	  v__h22568 or
	  EN_ma_update_mstatus_fs or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start:
	csr_mstatus_rg_mstatus$D_IN = 64'h0000000A00002000;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_2;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = v__h22568;
    EN_ma_update_mstatus_fs:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_4;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_5:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
    default: csr_mstatus_rg_mstatus$D_IN =
		 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1039 ||
	     EN_csr_trap_actions ||
	     EN_ma_update_mstatus_fs ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dcsr
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dcsr$write_1__SEL_2 or
	  new_dcsr__h15111 or
	  EN_write_dcsr_cause_priv or MUX_rg_dcsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dcsr$D_IN = 32'd1073741843;
    MUX_rg_dcsr$write_1__SEL_2: rg_dcsr$D_IN = new_dcsr__h15111;
    EN_write_dcsr_cause_priv: rg_dcsr$D_IN = MUX_rg_dcsr$write_1__VAL_3;
    default: rg_dcsr$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_dcsr$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1339 ||
	     EN_write_dcsr_cause_priv ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dpcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dpcc$write_1__VAL_1 or
	  EN_write_dpcc or
	  write_dpcc_pcc or
	  MUX_rg_dpcc$write_1__SEL_3 or MUX_rg_dpcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_1;
    EN_write_dpcc: rg_dpcc$D_IN = write_dpcc_pcc;
    MUX_rg_dpcc$write_1__SEL_3: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_3;
    default: rg_dpcc$D_IN =
		 163'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_dpcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1349 ||
	     EN_write_dpcc ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = mav_csr_write_word ;
  assign rg_dscratch0$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1414 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = mav_csr_write_word ;
  assign rg_dscratch1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1416 ;

  // register rg_fflags
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_fflags$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_ma_update_fcsr_fflags or MUX_rg_fflags$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_fflags$D_IN = 5'd0;
    MUX_rg_fflags$write_1__SEL_2: rg_fflags$D_IN = mav_csr_write_word[4:0];
    EN_ma_update_fcsr_fflags: rg_fflags$D_IN = MUX_rg_fflags$write_1__VAL_3;
    default: rg_fflags$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_fflags$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 ||
	     EN_ma_update_fcsr_fflags ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_frm
  assign rg_frm$D_IN =
	     MUX_rg_frm$write_1__SEL_1 ? MUX_rg_frm$write_1__VAL_1 : 3'd0 ;
  assign rg_frm$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1028 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_3:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h22563 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b11 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[2:0] :
	       3'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1267 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_medeleg
  assign rg_medeleg$D_IN =
	     MUX_rg_medeleg$write_1__SEL_1 ?
	       MUX_rg_medeleg$write_1__VAL_1 :
	       29'd0 ;
  assign rg_medeleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1205 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_mepcc$write_1__SEL_4 or MUX_rg_mepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_mepcc$write_1__SEL_4: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_4;
    default: rg_mepcc$D_IN =
		 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h22563 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1271 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mideleg
  assign rg_mideleg$D_IN =
	     MUX_rg_mideleg$write_1__SEL_1 ?
	       mav_csr_write_word[11:0] :
	       12'd0 ;
  assign rg_mideleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1214 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1269 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN = mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1219 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN = mav_scr_write_cap ;
  assign rg_mtdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mcause$write_1__SEL_2 ?
	       csr_trap_actions_xtval :
	       mav_csr_write_word ;
  assign rg_mtval$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h22563 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321 ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = 1'b1 ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_satp
  assign rg_satp$D_IN =
	     MUX_rg_satp$write_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign rg_satp$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1203 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_scause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_scause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_scause$D_IN = 7'd0;
    MUX_rg_scause$write_1__SEL_2:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_3:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_scause$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign rg_scause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sccsr
  assign rg_sccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_sccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b01 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_sepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_sepcc$write_1__SEL_4 or MUX_rg_sepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_sepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_sepcc$write_1__SEL_2: rg_sepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_2:
	rg_sepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_sepcc$write_1__SEL_4: rg_sepcc$D_IN = MUX_rg_sepcc$write_1__VAL_4;
    default: rg_sepcc$D_IN =
		 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1144 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sscratch
  assign rg_sscratch$D_IN = mav_csr_write_word ;
  assign rg_sscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1142 ;

  // register rg_sscratchc
  assign rg_sscratchc$D_IN = mav_scr_write_cap ;
  assign rg_sscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd14 ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_stcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_stcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_stcc$write_1__SEL_3 or MUX_rg_stcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_stcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_stcc$write_1__SEL_2: rg_stcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_stcc$write_1__SEL_3: rg_stcc$D_IN = MUX_rg_stcc$write_1__VAL_3;
    default: rg_stcc$D_IN =
		 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_stcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stdc
  assign rg_stdc$D_IN = mav_scr_write_cap ;
  assign rg_stdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd13 ;

  // register rg_stval
  assign rg_stval$D_IN =
	     MUX_rg_stval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       csr_trap_actions_xtval ;
  assign rg_stval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1199 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h22563 == 2'b01 ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? result__h15007 : 64'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1331 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1335 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1337 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 64'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1329 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$fav_sie_write_misa = 28'd135532845 ;
  assign csr_mie$fav_sie_write_wordxl = mav_csr_write_word ;
  assign csr_mie$fav_write_misa = 28'd135532845 ;
  assign csr_mie$fav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_fav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1217 ;
  assign csr_mie$EN_fav_sie_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084 ;

  // submodule csr_mip
  assign csr_mip$fav_sip_write_misa = 28'd135532845 ;
  assign csr_mip$fav_sip_write_wordxl = mav_csr_write_word ;
  assign csr_mip$fav_write_misa = 28'd135532845 ;
  assign csr_mip$fav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_fav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323 ;
  assign csr_mip$EN_fav_sip_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1201 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2344 =
	     _theResult_____2__h24020[63] ?
	       x__h25171[13:0] >= toBounds__h24990 &&
	       repBoundBits__h24987 !=
	       x1_avValue_snd_fst_capFat_addrBits__h25097 :
	       x__h25171[13:0] < toBoundsM1__h24991 ;
  assign IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124 =
	     (new_priv__h22563 == 2'b11) ?
	       { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116[63:13],
		 csr_trap_actions_from_priv,
		 csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116[10:0] } :
	       { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116[63:9],
		 csr_trap_actions_from_priv[0],
		 csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116[7:0] } ;
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2950 =
	     (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875 &&
	      NOT_csr_mip_fv_read__94_BIT_3_773_876_OR_NOT_c_ETC___d2883 &&
	      NOT_csr_mip_fv_read__94_BIT_7_784_885_OR_NOT_c_ETC___d2892) ?
	       6'd9 :
	       ((NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875 &&
		 NOT_csr_mip_fv_read__94_BIT_3_773_876_OR_NOT_c_ETC___d2883) ?
		  6'd7 :
		  (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875 ?
		     6'd3 :
		     6'd11)) ;
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2952 =
	     (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902 &&
	      NOT_csr_mip_fv_read__94_BIT_1_806_903_OR_NOT_c_ETC___d2910) ?
	       6'd5 :
	       (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902 ?
		  6'd1 :
		  IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2950) ;
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2953 =
	     (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902 &&
	      NOT_csr_mip_fv_read__94_BIT_1_806_903_OR_NOT_c_ETC___d2910 &&
	      NOT_csr_mip_fv_read__94_BIT_5_817_912_OR_NOT_c_ETC___d2919) ?
	       6'd8 :
	       IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2952 ;
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2955 =
	     (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2929 &&
	      NOT_csr_mip_fv_read__94_BIT_0_839_930_OR_NOT_c_ETC___d2937) ?
	       6'd4 :
	       (NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2929 ?
		  6'd0 :
		  IF_NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_N_ETC___d2953) ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1627 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63] ?
	       x__h18158[13:0] >= toBounds__h18561 &&
	       NOT_mav_scr_write_cap_BITS_13_TO_11_581_MINUS__ETC___d1622 :
	       x__h18158[13:0] < toBoundsM1__h18562 ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1667 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63] ?
	       x__h17520[13:0] >= toBounds__h18561 &&
	       NOT_mav_scr_write_cap_BITS_13_TO_11_581_MINUS__ETC___d1622 :
	       x__h17520[13:0] < toBoundsM1__h18562 ;
  assign IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_041_ETC___d1043 =
	     (csr_mstatus_rg_mstatus[12:11] == 2'b10) ?
	       2'b01 :
	       csr_mstatus_rg_mstatus[12:11] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h25831 :
	       _theResult___fst__h26032 ;
  assign IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2352 =
	     (highOffsetBits__h24981 == 50'd0 &&
	      IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2344 ||
	      IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 >=
	      6'd50) &&
	     ((new_priv__h22563 == 2'b11) ? rg_mtcc[152] : rg_stcc[152]) ;
  assign IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 =
	     (new_priv__h22563 == 2'b11) ? rg_mtcc[33:28] : rg_stcc[33:28] ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1111 =
	     mav_csr_write_word[63] ?
	       x__h11214[13:0] >= toBounds__h11082 &&
	       repBoundBits__h11079 != rg_stcc[85:72] :
	       x__h11214[13:0] < toBoundsM1__h11083 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1164 =
	     mav_csr_write_word[63] ?
	       x__h11708[13:0] >= toBounds__h11592 &&
	       repBoundBits__h11589 != rg_sepcc[85:72] :
	       x__h11708[13:0] < toBoundsM1__h11593 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1237 =
	     mav_csr_write_word[63] ?
	       x__h13446[13:0] >= toBounds__h13314 &&
	       repBoundBits__h13311 != rg_mtcc[85:72] :
	       x__h13446[13:0] < toBoundsM1__h13315 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1289 =
	     mav_csr_write_word[63] ?
	       x__h14029[13:0] >= toBounds__h13913 &&
	       repBoundBits__h13910 != rg_mepcc[85:72] :
	       x__h14029[13:0] < toBoundsM1__h13914 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1368 =
	     mav_csr_write_word[63] ?
	       x__h15511[13:0] >= toBounds__h15409 &&
	       repBoundBits__h15406 != rg_dpcc[95:82] :
	       x__h15511[13:0] < toBoundsM1__h15410 ;
  assign IF_mav_scr_write_scr_addr_EQ_12_578_OR_mav_scr_ETC___d1843 =
	     { x1_avValue_fst_otype__h20559,
	       CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q4,
	       CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q5 } ;
  assign IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400 =
	     result_d_addrBits__h15584[13:11] < repBound__h15809 ;
  assign IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1410 =
	     { IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400,
	       (rg_dpcc_08_BITS_37_TO_35_396_ULT_rg_dpcc_08_BI_ETC___d1397 ==
		IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400) ?
		 2'd0 :
		 ((rg_dpcc_08_BITS_37_TO_35_396_ULT_rg_dpcc_08_BI_ETC___d1397 &&
		   !IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400) ?
		    2'd1 :
		    2'd3),
	       (rg_dpcc_08_BITS_23_TO_21_394_ULT_rg_dpcc_08_BI_ETC___d1398 ==
		IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400) ?
		 2'd0 :
		 ((rg_dpcc_08_BITS_23_TO_21_394_ULT_rg_dpcc_08_BI_ETC___d1398 &&
		   !IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_384_THEN__ETC___d1400) ?
		    2'd1 :
		    2'd3) } ;
  assign IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376 =
	     (rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 ==
	      rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
	       2'd0 :
	       ((rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 &&
		 !rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc__ETC___d2424 =
	     { (rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc_64__ETC___d2419 ==
		rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		 2'd0 :
		 ((rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc_64__ETC___d2419 &&
		   !rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376 } ;
  assign IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302 =
	     (rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 ==
	      rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
	       2'd0 :
	       ((rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 &&
		 !rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc__ETC___d2435 =
	     { (rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc_90__ETC___d2430 ==
		rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		 2'd0 :
		 ((rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc_90__ETC___d2430 &&
		   !rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		    2'd1 :
		    2'd3),
	       IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302 } ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_441__ETC___d2548 =
	     (!access_permitted_1_csr_addr_ULT_0xC03___d2441 &&
	      access_permitted_1_csr_addr_ULE_0xC1F___d2443 ||
	      access_permitted_1_csr_addr >= 12'hB03 &&
	      access_permitted_1_csr_addr <= 12'hB1F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'h001 ||
	      access_permitted_1_csr_addr == 12'h002 ||
	      access_permitted_1_csr_addr == 12'h003 ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'h100 ||
	      access_permitted_1_csr_addr == 12'h102 ||
	      access_permitted_1_csr_addr == 12'h103 ||
	      access_permitted_1_csr_addr == 12'h104 ||
	      access_permitted_1_csr_addr == 12'h105 ||
	      access_permitted_1_csr_addr == 12'h106 ||
	      access_permitted_1_csr_addr == 12'h140 ||
	      access_permitted_1_csr_addr == 12'h141 ||
	      access_permitted_1_csr_addr == 12'h142 ||
	      access_permitted_1_csr_addr == 12'h143 ||
	      access_permitted_1_csr_addr == 12'h144 ||
	      access_permitted_1_csr_addr == 12'h180 ||
	      access_permitted_1_csr_addr == 12'h302 ||
	      access_permitted_1_csr_addr == 12'h303 ||
	      access_permitted_1_csr_addr == 12'h9C0 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3 ||
	      access_permitted_1_csr_addr == 12'h7B0 ||
	      access_permitted_1_csr_addr == 12'h7B1 ||
	      access_permitted_1_csr_addr == 12'h7B2 ||
	      access_permitted_1_csr_addr == 12'h7B3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_1_read_not_write_559_OR_a_ETC___d2574 =
	     (!access_permitted_1_read_not_write ||
	      access_permitted_1_csr_addr_ULT_0xC03___d2441 ||
	      !access_permitted_1_csr_addr_ULE_0xC1F___d2443) &&
	     access_permitted_1_csr_addr != 12'h001 &&
	     access_permitted_1_csr_addr != 12'h002 &&
	     access_permitted_1_csr_addr != 12'h003 &&
	     (access_permitted_1_csr_addr != 12'hC00 ||
	      !access_permitted_1_read_not_write) &&
	     (access_permitted_1_csr_addr != 12'hC02 ||
	      !access_permitted_1_read_not_write) ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_575__ETC___d2682 =
	     (!access_permitted_2_csr_addr_ULT_0xC03___d2575 &&
	      access_permitted_2_csr_addr_ULE_0xC1F___d2577 ||
	      access_permitted_2_csr_addr >= 12'hB03 &&
	      access_permitted_2_csr_addr <= 12'hB1F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'h001 ||
	      access_permitted_2_csr_addr == 12'h002 ||
	      access_permitted_2_csr_addr == 12'h003 ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'h100 ||
	      access_permitted_2_csr_addr == 12'h102 ||
	      access_permitted_2_csr_addr == 12'h103 ||
	      access_permitted_2_csr_addr == 12'h104 ||
	      access_permitted_2_csr_addr == 12'h105 ||
	      access_permitted_2_csr_addr == 12'h106 ||
	      access_permitted_2_csr_addr == 12'h140 ||
	      access_permitted_2_csr_addr == 12'h141 ||
	      access_permitted_2_csr_addr == 12'h142 ||
	      access_permitted_2_csr_addr == 12'h143 ||
	      access_permitted_2_csr_addr == 12'h144 ||
	      access_permitted_2_csr_addr == 12'h180 ||
	      access_permitted_2_csr_addr == 12'h302 ||
	      access_permitted_2_csr_addr == 12'h303 ||
	      access_permitted_2_csr_addr == 12'h9C0 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3 ||
	      access_permitted_2_csr_addr == 12'h7B0 ||
	      access_permitted_2_csr_addr == 12'h7B1 ||
	      access_permitted_2_csr_addr == 12'h7B2 ||
	      access_permitted_2_csr_addr == 12'h7B3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_access_permitted_2_read_not_write_691_OR_a_ETC___d2706 =
	     (!access_permitted_2_read_not_write ||
	      access_permitted_2_csr_addr_ULT_0xC03___d2575 ||
	      !access_permitted_2_csr_addr_ULE_0xC1F___d2577) &&
	     access_permitted_2_csr_addr != 12'h001 &&
	     access_permitted_2_csr_addr != 12'h002 &&
	     access_permitted_2_csr_addr != 12'h003 &&
	     (access_permitted_2_csr_addr != 12'hC00 ||
	      !access_permitted_2_read_not_write) &&
	     (access_permitted_2_csr_addr != 12'hC02 ||
	      !access_permitted_2_read_not_write) ;
  assign NOT_cfg_verbosity_read__506_ULE_1_507___d1508 =
	     cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_fv_read__94_BIT_0_839_930_OR_NOT_c_ETC___d2937 =
	     !csr_mip$fv_read[0] || !csr_mie$fv_read[0] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875 =
	     !csr_mip$fv_read[11] || !csr_mie$fv_read[11] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2760 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2761 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902 =
	     NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2875 &&
	     NOT_csr_mip_fv_read__94_BIT_3_773_876_OR_NOT_c_ETC___d2883 &&
	     NOT_csr_mip_fv_read__94_BIT_7_784_885_OR_NOT_c_ETC___d2892 &&
	     NOT_csr_mip_fv_read__94_BIT_9_795_894_OR_NOT_c_ETC___d2901 ;
  assign NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2929 =
	     NOT_csr_mip_fv_read__94_BIT_11_755_861_OR_NOT__ETC___d2902 &&
	     NOT_csr_mip_fv_read__94_BIT_1_806_903_OR_NOT_c_ETC___d2910 &&
	     NOT_csr_mip_fv_read__94_BIT_5_817_912_OR_NOT_c_ETC___d2919 &&
	     NOT_csr_mip_fv_read__94_BIT_8_828_921_OR_NOT_c_ETC___d2928 ;
  assign NOT_csr_mip_fv_read__94_BIT_1_806_903_OR_NOT_c_ETC___d2910 =
	     !csr_mip$fv_read[1] || !csr_mie$fv_read[1] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_3_773_876_OR_NOT_c_ETC___d2883 =
	     !csr_mip$fv_read[3] || !csr_mie$fv_read[3] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2778 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2779 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_5_817_912_OR_NOT_c_ETC___d2919 =
	     !csr_mip$fv_read[5] || !csr_mie$fv_read[5] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_7_784_885_OR_NOT_c_ETC___d2892 =
	     !csr_mip$fv_read[7] || !csr_mie$fv_read[7] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2789 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2790 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_8_828_921_OR_NOT_c_ETC___d2928 =
	     !csr_mip$fv_read[8] || !csr_mie$fv_read[8] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_mip_fv_read__94_BIT_9_795_894_OR_NOT_c_ETC___d2901 =
	     !csr_mip$fv_read[9] || !csr_mie$fv_read[9] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2800 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2801 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872) ;
  assign NOT_csr_trap_actions_nmi_142_AND_csr_trap_acti_ETC___d2258 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h24803 != 6'd0 &&
	     exc_code__h24803 != 6'd1 &&
	     exc_code__h24803 != 6'd2 &&
	     exc_code__h24803 != 6'd3 &&
	     exc_code__h24803 != 6'd4 &&
	     exc_code__h24803 != 6'd5 &&
	     exc_code__h24803 != 6'd6 &&
	     exc_code__h24803 != 6'd7 &&
	     exc_code__h24803 != 6'd8 &&
	     exc_code__h24803 != 6'd9 &&
	     exc_code__h24803 != 6'd10 &&
	     exc_code__h24803 != 6'd11 ;
  assign NOT_mav_scr_write_cap_BITS_13_TO_11_581_MINUS__ETC___d1622 =
	     repBoundBits__h17281 != mav_scr_write_cap[85:72] ;
  assign NOT_mav_scr_write_cap_BITS_33_TO_28_595_ULT_50_ETC___d1630 =
	     mav_scr_write_cap[33:28] >= 6'd50 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1707 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1709 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     !mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1755 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1757 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     !mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1758 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1760 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     !mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1761 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1762 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	     !mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602 =
	     x__h20292 | in__h20361[63:0] ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1634 =
	     (highOffsetBits__h17913 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1627 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_595_ULT_50_ETC___d1630) &&
	     mav_scr_write_cap[52:35] == 18'd262143 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1670 =
	     (highOffsetBits__h17913 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1667 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_595_ULT_50_ETC___d1630) &&
	     mav_scr_write_cap[52:35] == 18'd262143 ;
  assign SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 =
	     x__h7400 | in__h6900[63:0] ;
  assign SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 =
	     x__h6549 | in__h6665[63:0] ;
  assign SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 =
	     x__h6329 | in__h6445[63:0] ;
  assign SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 =
	     x__h5997 | in__h6113[63:0] ;
  assign SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 =
	     x__h5789 | in__h5905[63:0] ;
  assign _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2379 =
	     { result_d_address__h25268,
	       result_d_addrBits__h25269,
	       (new_priv__h22563 == 2'b11) ? rg_mtcc[71:0] : rg_stcc[71:0] } ;
  assign _theResult_____2__h24020 =
	     csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2157 ?
	       exc_pc___1__h24110 :
	       exc_pc__h24018 ;
  assign _theResult____h27798 = rg_mideleg[11] ? 2'b01 : 2'b11 ;
  assign _theResult____h28010 = rg_mideleg[3] ? 2'b01 : 2'b11 ;
  assign _theResult____h28222 = rg_mideleg[7] ? 2'b01 : 2'b11 ;
  assign _theResult____h28434 = rg_mideleg[9] ? 2'b01 : 2'b11 ;
  assign _theResult____h28646 = rg_mideleg[1] ? 2'b01 : 2'b11 ;
  assign _theResult____h28858 = rg_mideleg[5] ? 2'b01 : 2'b11 ;
  assign _theResult____h29070 = rg_mideleg[8] ? 2'b01 : 2'b11 ;
  assign _theResult____h29282 = rg_mideleg[0] ? 2'b01 : 2'b11 ;
  assign _theResult____h29494 = rg_mideleg[4] ? 2'b01 : 2'b11 ;
  assign _theResult___fst__h22701 =
	     (csr_trap_actions_interrupt ?
		deleg_bit___1__h22710 :
		deleg_bit___1__h22725) ?
	       2'b01 :
	       2'b11 ;
  assign _theResult___fst__h25831 =
	     { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[63:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[10:0] } ;
  assign _theResult___fst__h26032 =
	     { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[63:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[7:0] } ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d2443 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d2441 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d2577 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d2575 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign addBase__h11367 =
	     { {48{x__h11424[15]}}, x__h11424 } << rg_stcc[33:28] ;
  assign addBase__h11853 =
	     { {48{x__h11910[15]}}, x__h11910 } << rg_sepcc[33:28] ;
  assign addBase__h13591 =
	     { {48{x__h13648[15]}}, x__h13648 } << rg_mtcc[33:28] ;
  assign addBase__h14174 =
	     { {48{x__h14231[15]}}, x__h14231 } << rg_mepcc[33:28] ;
  assign addBase__h15603 =
	     { {48{base__h7387[15]}}, base__h7387 } << rg_dpcc[43:38] ;
  assign addBase__h19332 =
	     { {48{x__h19389[15]}}, x__h19389 } << mav_scr_write_cap[33:28] ;
  assign addBase__h25300 =
	     { {48{x__h25357[15]}}, x__h25357 } <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 ;
  assign addTop__h19454 =
	     { {50{x__h19544[15]}}, x__h19544 } << mav_scr_write_cap[33:28] ;
  assign b__h22788 = csr_mstatus_rg_mstatus[ie_to_x__h22689] ;
  assign b__h25868 = csr_mstatus_rg_mstatus[pie_from_x__h25816] ;
  assign base__h21454 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[23:10] } ;
  assign base__h7387 = { rg_dpcc[1:0], rg_dpcc[23:10] } ;
  assign bot__h11370 =
	     { rg_stcc[149:100] & highBitsfilter__h11072, 14'd0 } +
	     addBase__h11367 ;
  assign bot__h11856 =
	     { rg_sepcc[149:100] & highBitsfilter__h11582, 14'd0 } +
	     addBase__h11853 ;
  assign bot__h13594 =
	     { rg_mtcc[149:100] & highBitsfilter__h13304, 14'd0 } +
	     addBase__h13591 ;
  assign bot__h14177 =
	     { rg_mepcc[149:100] & highBitsfilter__h13903, 14'd0 } +
	     addBase__h14174 ;
  assign bot__h15606 =
	     { rg_dpcc[159:110] & highBitsfilter__h15399, 14'd0 } +
	     addBase__h15603 ;
  assign bot__h19335 =
	     { mav_scr_write_cap[149:100] & mask__h19333, 14'd0 } +
	     addBase__h19332 ;
  assign bot__h25303 =
	     { x__h25310[63:14] & highBitsfilter__h24980, 14'd0 } +
	     addBase__h25300 ;
  assign capUnpacked_capFat_addrBits__h17647 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h17626[12:0] } :
	       newAddrBits__h17626[13:0] ;
  assign capUnpacked_capFat_addrBits__h18285 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h18264[12:0] } :
	       newAddrBits__h18264[13:0] ;
  assign capUnpacked_capFat_address__h17646 =
	     { 2'd0, bot__h19335 } + { 2'd0, offsetAddr__h17271 } ;
  assign capUnpacked_capFat_address__h18284 =
	     { 2'd0, bot__h19335 } + { 2'd0, offsetAddr__h17909 } ;
  assign csr_mip_fv_read__94_BIT_0_839_AND_csr_mie_fv_r_ETC___d2848 =
	     csr_mip$fv_read[0] && csr_mie$fv_read[0] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2772 =
	     csr_mip$fv_read[11] && csr_mie$fv_read[11] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2760 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2761 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2838 =
	     csr_mip_fv_read__94_BIT_11_755_AND_csr_mie_fv__ETC___d2772 ||
	     csr_mip_fv_read__94_BIT_3_773_AND_csr_mie_fv_r_ETC___d2782 ||
	     csr_mip_fv_read__94_BIT_7_784_AND_csr_mie_fv_r_ETC___d2793 ||
	     csr_mip_fv_read__94_BIT_9_795_AND_csr_mie_fv_r_ETC___d2804 ||
	     csr_mip_fv_read__94_BIT_1_806_AND_csr_mie_fv_r_ETC___d2815 ||
	     csr_mip_fv_read__94_BIT_5_817_AND_csr_mie_fv_r_ETC___d2826 ||
	     csr_mip_fv_read__94_BIT_8_828_AND_csr_mie_fv_r_ETC___d2837 ;
  assign csr_mip_fv_read__94_BIT_1_806_AND_csr_mie_fv_r_ETC___d2815 =
	     csr_mip$fv_read[1] && csr_mie$fv_read[1] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_3_773_AND_csr_mie_fv_r_ETC___d2782 =
	     csr_mip$fv_read[3] && csr_mie$fv_read[3] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2778 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2779 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_4_850_AND_csr_mie_fv_r_ETC___d2859 =
	     csr_mip$fv_read[4] && csr_mie$fv_read[4] &&
	     (interrupt_pending_cur_priv < _theResult____h29494 ||
	      interrupt_pending_cur_priv == _theResult____h29494 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_5_817_AND_csr_mie_fv_r_ETC___d2826 =
	     csr_mip$fv_read[5] && csr_mie$fv_read[5] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_7_784_AND_csr_mie_fv_r_ETC___d2793 =
	     csr_mip$fv_read[7] && csr_mie$fv_read[7] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2789 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2790 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_8_828_AND_csr_mie_fv_r_ETC___d2837 =
	     csr_mip$fv_read[8] && csr_mie$fv_read[8] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mip_fv_read__94_BIT_9_795_AND_csr_mie_fv_r_ETC___d2804 =
	     csr_mip$fv_read[9] && csr_mie$fv_read[9] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2800 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2801 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769) ;
  assign csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395 =
	     x__h25864 | mask__h25852 ;
  assign csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2116 =
	     x__h22784 | val__h22773 ;
  assign csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2157 =
	     csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	     CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2309 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h24803 != 6'd0 &&
	     exc_code__h24803 != 6'd1 &&
	     exc_code__h24803 != 6'd2 &&
	     exc_code__h24803 != 6'd3 &&
	     exc_code__h24803 != 6'd4 &&
	     exc_code__h24803 != 6'd5 &&
	     exc_code__h24803 != 6'd6 &&
	     exc_code__h24803 != 6'd7 &&
	     exc_code__h24803 != 6'd8 &&
	     exc_code__h24803 != 6'd9 &&
	     exc_code__h24803 != 6'd11 &&
	     exc_code__h24803 != 6'd12 &&
	     exc_code__h24803 != 6'd13 &&
	     exc_code__h24803 != 6'd15 ;
  assign dcsr__h7230 = { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] } ;
  assign deleg_bit___1__h22710 = rg_mideleg[csr_trap_actions_exc_code[3:0]] ;
  assign deleg_bit___1__h22725 = rg_medeleg[csr_trap_actions_exc_code[4:0]] ;
  assign exc_code__h24803 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h24110 = exc_pc__h24018 + vector_offset__h24019 ;
  assign exc_pc__h24018 =
	     csr_trap_actions_nmi ?
	       rg_nmi_vector :
	       y_avValue_snd_snd_snd__h24072 ;
  assign fixed_up_val_23__h10481 =
	     { csr_mstatus_rg_mstatus[22:20],
	       mav_csr_write_word[19:18],
	       csr_mstatus_rg_mstatus[17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_041_ETC___d1043,
	       csr_mstatus_rg_mstatus[10:9],
	       mav_csr_write_word[8],
	       csr_mstatus_rg_mstatus[7:6],
	       mav_csr_write_word[5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:2],
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign fixed_up_val_23__h12742 =
	     { mav_csr_write_word[22:17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       (mav_csr_write_word[12:11] == 2'b10) ?
		 2'b01 :
		 mav_csr_write_word[12:11],
	       mav_csr_write_word[10:5],
	       1'd0,
	       mav_csr_write_word[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h20779 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       ma_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_041_ETC___d1043,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h22612 =
	     { IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[22:17],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[14:13],
	       (IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[12:11],
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[10:5],
	       1'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h25738 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[22:17],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[14:13],
	       (IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[12:11],
	       IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[10:5],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h9886 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd3,
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_041_ETC___d1043,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign highBitsfilter__h11072 = 50'h3FFFFFFFFFFFF << rg_stcc[33:28] ;
  assign highBitsfilter__h11582 = 50'h3FFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign highBitsfilter__h13304 = 50'h3FFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign highBitsfilter__h13903 = 50'h3FFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign highBitsfilter__h15399 = 50'h3FFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign highBitsfilter__h24980 =
	     50'h3FFFFFFFFFFFF <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 ;
  assign highOffsetBits__h11073 = x__h15426 & highBitsfilter__h11072 ;
  assign highOffsetBits__h11583 = x__h15426 & highBitsfilter__h11582 ;
  assign highOffsetBits__h13305 = x__h15426 & highBitsfilter__h13304 ;
  assign highOffsetBits__h13904 = x__h15426 & highBitsfilter__h13903 ;
  assign highOffsetBits__h15400 = x__h15426 & highBitsfilter__h15399 ;
  assign highOffsetBits__h17913 = x__h17939 & mask__h19333 ;
  assign highOffsetBits__h24981 = x__h25007 & highBitsfilter__h24980 ;
  assign ie_from_x__h25815 = { 4'd0, csr_ret_actions_from_priv } ;
  assign ie_to_x__h22689 = { 4'd0, new_priv__h22563 } ;
  assign in__h20361 = mav_scr_write_cap[151:86] & y__h20378 ;
  assign in__h21576 = csr_trap_actions_pcc[161:96] & y__h21593 ;
  assign in__h5905 = rg_stcc[151:86] & y__h5922 ;
  assign in__h6113 = rg_sepcc[151:86] & y__h6130 ;
  assign in__h6445 = rg_mtcc[151:86] & y__h6462 ;
  assign in__h6665 = rg_mepcc[151:86] & y__h6682 ;
  assign in__h6900 = rg_dpcc[161:96] & y__h6917 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2761 =
	     interrupt_pending_cur_priv == _theResult____h27798 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2779 =
	     interrupt_pending_cur_priv == _theResult____h28010 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2790 =
	     interrupt_pending_cur_priv == _theResult____h28222 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2801 =
	     interrupt_pending_cur_priv == _theResult____h28434 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 =
	     interrupt_pending_cur_priv == _theResult____h28646 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 =
	     interrupt_pending_cur_priv == _theResult____h28858 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 =
	     interrupt_pending_cur_priv == _theResult____h29070 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 =
	     interrupt_pending_cur_priv == _theResult____h29282 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2760 =
	     interrupt_pending_cur_priv < _theResult____h27798 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2778 =
	     interrupt_pending_cur_priv < _theResult____h28010 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2789 =
	     interrupt_pending_cur_priv < _theResult____h28222 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2800 =
	     interrupt_pending_cur_priv < _theResult____h28434 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 =
	     interrupt_pending_cur_priv < _theResult____h28646 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 =
	     interrupt_pending_cur_priv < _theResult____h28858 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 =
	     interrupt_pending_cur_priv < _theResult____h29070 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 =
	     interrupt_pending_cur_priv < _theResult____h29282 ;
  assign length__h20188 = { 50'd0, x__h20193 } << mav_scr_write_cap[33:28] ;
  assign mask__h19333 = 50'h3FFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h19455 = 52'hFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h22772 = 64'd1 << ie_to_x__h22689 ;
  assign mask__h22789 = 64'd1 << pie_to_x__h22690 ;
  assign mask__h25852 = 64'd1 << pie_from_x__h25816 ;
  assign mask__h25869 = 64'd1 << ie_from_x__h25815 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d1015 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d1011 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1504 =
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr != 12'h001 &&
	     mav_csr_write_csr_addr != 12'h002 &&
	     mav_csr_write_csr_addr != 12'h003 &&
	     mav_csr_write_csr_addr != 12'h100 &&
	     mav_csr_write_csr_addr != 12'h102 &&
	     mav_csr_write_csr_addr != 12'h103 &&
	     mav_csr_write_csr_addr != 12'h104 &&
	     mav_csr_write_csr_addr != 12'h105 &&
	     mav_csr_write_csr_addr != 12'h106 &&
	     mav_csr_write_csr_addr != 12'h140 &&
	     mav_csr_write_csr_addr != 12'h141 &&
	     mav_csr_write_csr_addr != 12'h142 &&
	     mav_csr_write_csr_addr != 12'h143 &&
	     mav_csr_write_csr_addr != 12'h144 &&
	     mav_csr_write_csr_addr != 12'h180 &&
	     mav_csr_write_csr_addr != 12'h302 &&
	     mav_csr_write_csr_addr != 12'h303 &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 &&
	     mav_csr_write_csr_addr != 12'h7B0 &&
	     mav_csr_write_csr_addr != 12'h7B1 &&
	     mav_csr_write_csr_addr != 12'h7B2 &&
	     mav_csr_write_csr_addr != 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0x323___d1014 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1028 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1039 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h003 ||
	      mav_csr_write_csr_addr == 12'h100 ||
	      mav_csr_write_csr_addr == 12'h300) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h104 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h105 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1142 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h140 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1144 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h141 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h142 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1199 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h143 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1201 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h144 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1203 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h180 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1205 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h302 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1214 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h303 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1217 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h304 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1219 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1267 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1269 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h340 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1271 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h344 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1327 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'hB02 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1329 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1331 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1335 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1337 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1339 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1349 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1414 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1416 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d1010 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_csr_write_word_BITS_14_TO_13_050_EQ_0x3_05_ETC___d1081 =
	     { sd__h12741,
	       40'd5120,
	       (mav_csr_write_csr_addr == 12'h100) ?
		 fixed_up_val_23__h10481 :
		 fixed_up_val_23__h12742 } ;
  assign mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583 =
	     mav_scr_write_cap[13:11] < repBound__h20419 ;
  assign mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x0_ETC__q2 =
	     mav_scr_write_cap[149:100] +
	     ({ {48{x__h20499[1]}}, x__h20499 } << mav_scr_write_cap[33:28]) ;
  assign mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726 =
	     { mav_scr_write_cap[151:100] & mask__h19455, 14'd0 } +
	     addTop__h19454 ;
  assign mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718 =
	     mav_scr_write_cap[27:25] < repBound__h20419 ;
  assign mav_scr_write_cap_BITS_33_TO_28_595_ULT_51_712_ETC___d1742 =
	     mav_scr_write_cap[33:28] < 6'd51 &&
	     mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726[64:63] -
	     { 1'd0, x__h19638 } >
	     2'd1 ;
  assign mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585 =
	     mav_scr_write_cap[85:83] < repBound__h20419 ;
  assign newAddrBits__h11327 =
	     { 2'd0, rg_stcc[13:0] } + { 2'd0, x__h11214[13:0] } ;
  assign newAddrBits__h11813 =
	     { 2'd0, rg_sepcc[13:0] } + { 2'd0, x__h11708[13:0] } ;
  assign newAddrBits__h13551 =
	     { 2'd0, rg_mtcc[13:0] } + { 2'd0, x__h13446[13:0] } ;
  assign newAddrBits__h14134 =
	     { 2'd0, rg_mepcc[13:0] } + { 2'd0, x__h14029[13:0] } ;
  assign newAddrBits__h15572 =
	     { 2'd0, rg_dpcc[23:10] } + { 2'd0, x__h15511[13:0] } ;
  assign newAddrBits__h17626 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h17520[13:0] } ;
  assign newAddrBits__h18264 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h18158[13:0] } ;
  assign newAddrBits__h25257 =
	     { 2'd0, x__h25201 } + { 2'd0, x__h25171[13:0] } ;
  assign new_dcsr__h15111 =
	     { rg_dcsr[31:16],
	       mav_csr_write_word[15:9],
	       rg_dcsr[8:5],
	       mav_csr_write_word[4],
	       rg_dcsr[3],
	       mav_csr_write_word[2:0] } ;
  assign new_priv__h22563 =
	     csr_trap_actions_nmi ?
	       2'b11 :
	       ((csr_trap_actions_from_priv == 2'b11) ?
		  csr_trap_actions_from_priv :
		  _theResult___fst__h22701) ;
  assign offsetAddr__h13301 =
	     { mav_csr_write_word[63:2], 1'b0, mav_csr_write_word[0] } ;
  assign offsetAddr__h13900 = { mav_csr_write_word[63:1], 1'd0 } ;
  assign offsetAddr__h17271 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63:1],
	       1'd0 } ;
  assign offsetAddr__h17909 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63:2],
	       1'b0,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[0] } ;
  assign offset__h20280 = { 2'd0, mav_scr_write_cap[85:72] } - x__h19389 ;
  assign offset__h21455 =
	     { 2'd0, csr_trap_actions_pcc[95:82] } - base__h21454 ;
  assign offset__h5777 = { 2'd0, rg_stcc[85:72] } - x__h11424 ;
  assign offset__h5985 = { 2'd0, rg_sepcc[85:72] } - x__h11910 ;
  assign offset__h6317 = { 2'd0, rg_mtcc[85:72] } - x__h13648 ;
  assign offset__h6537 = { 2'd0, rg_mepcc[85:72] } - x__h14231 ;
  assign offset__h7388 = { 2'd0, rg_dpcc[95:82] } - base__h7387 ;
  assign pie_from_x__h25816 = { 4'd1, csr_ret_actions_from_priv } ;
  assign pie_to_x__h22690 = { 4'd1, new_priv__h22563 } ;
  assign repBoundBits__h11079 = { repBound__h5827, 11'd0 } ;
  assign repBoundBits__h11589 = { repBound__h6035, 11'd0 } ;
  assign repBoundBits__h13311 = { repBound__h6367, 11'd0 } ;
  assign repBoundBits__h13910 = { repBound__h6587, 11'd0 } ;
  assign repBoundBits__h15406 = { rg_dpcc[9:7], 11'd0 } ;
  assign repBoundBits__h17281 = { repBound__h20419, 11'd0 } ;
  assign repBoundBits__h24987 =
	     { x1_avValue_snd_fst_tempFields_repBoundTopBits__h25235,
	       11'd0 } ;
  assign repBound__h15809 = rg_dpcc[23:21] - 3'b001 ;
  assign repBound__h20419 = mav_scr_write_cap[13:11] - 3'b001 ;
  assign repBound__h4840 = soc_map$m_pcc_reset_value[13:11] - 3'b001 ;
  assign repBound__h5827 =
	     x1_avValue_snd_fst_tempFields_repBoundTopBits__h25223 ;
  assign repBound__h6035 = rg_sepcc[13:11] - 3'b001 ;
  assign repBound__h6367 = rg_mtcc[13:11] - 3'b001 ;
  assign repBound__h6587 = rg_mepcc[13:11] - 3'b001 ;
  assign result__h15007 = { 4'd0, mav_csr_write_word[59:0] } ;
  assign result__h20128 =
	     { 1'd0,
	       ~mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726[64],
	       mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726[63:0] } ;
  assign result_d_addrBits__h15584 =
	     (rg_dpcc[43:38] == 6'd52) ?
	       { 1'b0, newAddrBits__h15572[12:0] } :
	       newAddrBits__h15572[13:0] ;
  assign result_d_addrBits__h25269 =
	     (IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 ==
	      6'd52) ?
	       { 1'b0, newAddrBits__h25257[12:0] } :
	       newAddrBits__h25257[13:0] ;
  assign result_d_address__h15583 =
	     { 2'd0, bot__h15606 } + { 2'd0, mav_csr_write_word } ;
  assign result_d_address__h25268 =
	     { 2'd0, bot__h25303 } + { 2'd0, _theResult_____2__h24020 } ;
  assign ret__h19458 =
	     { 1'd0,
	       mav_scr_write_cap_BITS_151_TO_100_713_AND_4503_ETC___d1726[64:0] } ;
  assign rg_dpcc_08_BITS_23_TO_21_394_ULT_rg_dpcc_08_BI_ETC___d1398 =
	     rg_dpcc[23:21] < repBound__h15809 ;
  assign rg_dpcc_08_BITS_37_TO_35_396_ULT_rg_dpcc_08_BI_ETC___d1397 =
	     rg_dpcc[37:35] < repBound__h15809 ;
  assign rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 =
	     rg_mepcc[13:11] < repBound__h6587 ;
  assign rg_mepcc_64_BITS_27_TO_25_418_ULT_rg_mepcc_64__ETC___d2419 =
	     rg_mepcc[27:25] < repBound__h6587 ;
  assign rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371 =
	     rg_mepcc[85:83] < repBound__h6587 ;
  assign rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 =
	     rg_mtcc[13:11] < repBound__h6367 ;
  assign rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340 =
	     rg_mtcc[85:83] < repBound__h6367 ;
  assign rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 =
	     rg_sepcc[13:11] < repBound__h6035 ;
  assign rg_sepcc_90_BITS_27_TO_25_429_ULT_rg_sepcc_90__ETC___d2430 =
	     rg_sepcc[27:25] < repBound__h6035 ;
  assign rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297 =
	     rg_sepcc[85:83] < repBound__h6035 ;
  assign rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 =
	     rg_stcc[13:11] < repBound__h5827 ;
  assign rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268 =
	     rg_stcc[85:83] < repBound__h5827 ;
  assign sd__h12741 = mav_csr_write_word[14:13] == 2'h3 ;
  assign sd__h20778 = ma_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h22611 =
	     IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[14:13] ==
	     2'h3 ;
  assign sd__h25737 =
	     IF_csr_ret_actions_from_priv_EQ_0b11_382_THEN__ETC___d2402[14:13] ==
	     2'h3 ;
  assign signBits__h15397 = {50{mav_csr_write_word[63]}} ;
  assign signBits__h17910 =
	     {50{SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63]}} ;
  assign signBits__h24978 = {50{_theResult_____2__h24020[63]}} ;
  assign soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 =
	     soc_map$m_pcc_reset_value[13:11] < repBound__h4840 ;
  assign soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 =
	     soc_map$m_pcc_reset_value[27:25] < repBound__h4840 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12 =
	     soc_map$m_pcc_reset_value[85:83] < repBound__h4840 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 =
	     { soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12,
	       (soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3),
	       (soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3) } ;
  assign toBoundsM1__h11083 = { 3'b110, ~rg_stcc[10:0] } ;
  assign toBoundsM1__h11593 = { 3'b110, ~rg_sepcc[10:0] } ;
  assign toBoundsM1__h13315 = { 3'b110, ~rg_mtcc[10:0] } ;
  assign toBoundsM1__h13914 = { 3'b110, ~rg_mepcc[10:0] } ;
  assign toBoundsM1__h15410 = { 3'b110, ~rg_dpcc[20:10] } ;
  assign toBoundsM1__h18562 = { 3'b110, ~mav_scr_write_cap[10:0] } ;
  assign toBoundsM1__h24991 = { 3'b110, ~x__h25201[10:0] } ;
  assign toBounds__h11082 = 14'd14336 - { 3'b0, rg_stcc[10:0] } ;
  assign toBounds__h11592 = 14'd14336 - { 3'b0, rg_sepcc[10:0] } ;
  assign toBounds__h13314 = 14'd14336 - { 3'b0, rg_mtcc[10:0] } ;
  assign toBounds__h13913 = 14'd14336 - { 3'b0, rg_mepcc[10:0] } ;
  assign toBounds__h15409 = 14'd14336 - { 3'b0, rg_dpcc[20:10] } ;
  assign toBounds__h18561 = 14'd14336 - { 3'b0, mav_scr_write_cap[10:0] } ;
  assign toBounds__h24990 = 14'd14336 - { 3'b0, x__h25201[10:0] } ;
  assign to_y__h26031 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2395[8] } ;
  assign v__h10430 =
	     { sd__h12741,
	       43'd8192,
	       mav_csr_write_word[19:18],
	       3'd0,
	       mav_csr_write_word[14:13],
	       4'd0,
	       mav_csr_write_word[8],
	       2'd0,
	       mav_csr_write_word[5],
	       3'd0,
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign v__h12618 =
	     { 35'd0,
	       mav_csr_write_word[28],
	       12'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign v__h12654 = { 52'd0, mav_csr_write_word[11:0] } ;
  assign v__h13737 = { 61'd0, mav_csr_write_word[2:0] } ;
  assign v__h14320 =
	     { mav_csr_write_word[63], 57'd0, mav_csr_write_word[5:0] } ;
  assign v__h15108 = { 32'd0, new_dcsr__h15111 } ;
  assign v__h22568 = { sd__h22611, 40'd5120, fixed_up_val_23__h22612 } ;
  assign v__h9611 = { 59'd0, mav_csr_write_word[4:0] } ;
  assign v__h9755 = { 56'd0, mav_csr_write_word[7:0] } ;
  assign val__h22773 = 64'd0 << ie_to_x__h22689 ;
  assign val__h22790 = { 63'd0, b__h22788 } << pie_to_x__h22690 ;
  assign val__h25870 = { 63'd0, b__h25868 } << ie_from_x__h25815 ;
  assign vector_offset__h24019 = { 56'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h12701 = { sd__h12741, 40'd5120, fixed_up_val_23__h12742 } ;
  assign x1_avValue_snd_fst_capFat_addrBits__h25097 =
	     (new_priv__h22563 == 2'b11) ? rg_mtcc[85:72] : rg_stcc[85:72] ;
  assign x1_avValue_snd_fst_tempFields_repBoundTopBits__h25223 =
	     rg_stcc[13:11] - 3'b001 ;
  assign x1_avValue_snd_fst_tempFields_repBoundTopBits__h25235 =
	     (new_priv__h22563 == 2'b11) ?
	       repBound__h6367 :
	       x1_avValue_snd_fst_tempFields_repBoundTopBits__h25223 ;
  assign x__h11214 = offsetAddr__h13301 >> rg_stcc[33:28] ;
  assign x__h11424 =
	     { (rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 ==
		rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268) ?
		 2'd0 :
		 ((rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 &&
		   !rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268) ?
		    2'd1 :
		    2'd3),
	       rg_stcc[13:0] } ;
  assign x__h11708 = offsetAddr__h13900 >> rg_sepcc[33:28] ;
  assign x__h11910 =
	     { IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302,
	       rg_sepcc[13:0] } ;
  assign x__h13446 = offsetAddr__h13301 >> rg_mtcc[33:28] ;
  assign x__h13648 =
	     { (rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 ==
		rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340) ?
		 2'd0 :
		 ((rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 &&
		   !rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[13:0] } ;
  assign x__h14029 = offsetAddr__h13900 >> rg_mepcc[33:28] ;
  assign x__h14231 =
	     { IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376,
	       rg_mepcc[13:0] } ;
  assign x__h15426 = mav_csr_write_word[63:14] ^ signBits__h15397 ;
  assign x__h15511 = mav_csr_write_word >> rg_dpcc[43:38] ;
  assign x__h17520 = offsetAddr__h17271 >> mav_scr_write_cap[33:28] ;
  assign x__h17939 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602[63:14] ^
	     signBits__h17910 ;
  assign x__h18158 = offsetAddr__h17909 >> mav_scr_write_cap[33:28] ;
  assign x__h19389 = { x__h20499, mav_scr_write_cap[13:0] } ;
  assign x__h19544 = { x__h20480, mav_scr_write_cap[27:14] } ;
  assign x__h20193 = x__h19544 - x__h19389 ;
  assign x__h20292 = x__h20294 << mav_scr_write_cap[33:28] ;
  assign x__h20294 = { {48{offset__h20280[15]}}, offset__h20280 } ;
  assign x__h20379 = 66'h3FFFFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign x__h20480 =
	     (mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718 ==
	      mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_27_TO_25_717_ULT_mav_sc_ETC___d1718 &&
		 !mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585) ?
		  2'd1 :
		  2'd3) ;
  assign x__h20499 =
	     (mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583 ==
	      mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_13_TO_11_581_ULT_mav_sc_ETC___d1583 &&
		 !mav_scr_write_cap_BITS_85_TO_83_584_ULT_mav_sc_ETC___d1585) ?
		  2'd1 :
		  2'd3) ;
  assign x__h21467 = x__h21469 << csr_trap_actions_pcc[43:38] ;
  assign x__h21469 = { {48{offset__h21455[15]}}, offset__h21455 } ;
  assign x__h21594 = 66'h3FFFFFFFFFFFFFFFF << csr_trap_actions_pcc[43:38] ;
  assign x__h22771 = x__h22801 | val__h22790 ;
  assign x__h22784 = x__h22771 & y__h22785 ;
  assign x__h22801 = csr_mstatus_rg_mstatus & y__h22802 ;
  assign x__h25007 = _theResult_____2__h24020[63:14] ^ signBits__h24978 ;
  assign x__h25171 =
	     _theResult_____2__h24020 >>
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2317 ;
  assign x__h25201 =
	     (new_priv__h22563 == 2'b11) ? rg_mtcc[13:0] : rg_stcc[13:0] ;
  assign x__h25310 =
	     (new_priv__h22563 == 2'b11) ? rg_mtcc[151:86] : rg_stcc[151:86] ;
  assign x__h25357 = (new_priv__h22563 == 2'b11) ? x__h13648 : x__h11424 ;
  assign x__h25677 =
	     (csr_trap_actions_nmi || new_priv__h22563 == 2'b11) ?
	       v__h22568 :
	       y_avValue_fst__h23990 ;
  assign x__h25678 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       57'd0,
	       exc_code__h24803 } ;
  assign x__h25851 = x__h25881 | val__h25870 ;
  assign x__h25864 = x__h25851 & y__h25865 ;
  assign x__h25881 = csr_mstatus_rg_mstatus & y__h25882 ;
  assign x__h5789 = x__h5791 << rg_stcc[33:28] ;
  assign x__h5791 = { {48{offset__h5777[15]}}, offset__h5777 } ;
  assign x__h5923 = 66'h3FFFFFFFFFFFFFFFF << rg_stcc[33:28] ;
  assign x__h5997 = x__h5999 << rg_sepcc[33:28] ;
  assign x__h5999 = { {48{offset__h5985[15]}}, offset__h5985 } ;
  assign x__h6131 = 66'h3FFFFFFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign x__h6329 = x__h6331 << rg_mtcc[33:28] ;
  assign x__h6331 = { {48{offset__h6317[15]}}, offset__h6317 } ;
  assign x__h6463 = 66'h3FFFFFFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign x__h6549 = x__h6551 << rg_mepcc[33:28] ;
  assign x__h6551 = { {48{offset__h6537[15]}}, offset__h6537 } ;
  assign x__h6683 = 66'h3FFFFFFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign x__h6918 = 66'h3FFFFFFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign x__h7335 = { rg_sccsr, 5'd3 } ;
  assign x__h7353 = { rg_mccsr, 5'd3 } ;
  assign x__h7400 = x__h7402 << rg_dpcc[43:38] ;
  assign x__h7402 = { {48{offset__h7388[15]}}, offset__h7388 } ;
  assign x__h9854 = { 41'h10000001400, fixed_up_val_23__h9886 } ;
  assign x_addrBits__h11348 =
	     (rg_stcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h11327[12:0] } :
	       newAddrBits__h11327[13:0] ;
  assign x_addrBits__h11834 =
	     (rg_sepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h11813[12:0] } :
	       newAddrBits__h11813[13:0] ;
  assign x_addrBits__h13572 =
	     (rg_mtcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h13551[12:0] } :
	       newAddrBits__h13551[13:0] ;
  assign x_addrBits__h14155 =
	     (rg_mepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h14134[12:0] } :
	       newAddrBits__h14134[13:0] ;
  assign x_address__h11347 =
	     { 2'd0, bot__h11370 } + { 2'd0, offsetAddr__h13301 } ;
  assign x_address__h11833 =
	     { 2'd0, bot__h11856 } + { 2'd0, offsetAddr__h13900 } ;
  assign x_address__h13571 =
	     { 2'd0, bot__h13594 } + { 2'd0, offsetAddr__h13301 } ;
  assign x_address__h14154 =
	     { 2'd0, bot__h14177 } + { 2'd0, offsetAddr__h13900 } ;
  assign y__h20378 = ~x__h20379 ;
  assign y__h21593 = ~x__h21594 ;
  assign y__h22785 = ~mask__h22772 ;
  assign y__h22802 = ~mask__h22789 ;
  assign y__h25865 = ~mask__h25852 ;
  assign y__h25882 = ~mask__h25869 ;
  assign y__h5922 = ~x__h5923 ;
  assign y__h6130 = ~x__h6131 ;
  assign y__h6462 = ~x__h6463 ;
  assign y__h6682 = ~x__h6683 ;
  assign y__h6917 = ~x__h6918 ;
  assign y_avValue_fst__h23972 =
	     { sd__h22611,
	       43'd8192,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[19:18],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[14:13],
	       4'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[8],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[5],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2124[1],
	       1'd0 } ;
  assign y_avValue_fst__h23990 =
	     (new_priv__h22563 == 2'b01) ? y_avValue_fst__h23972 : v__h22568 ;
  assign y_avValue_snd_snd_snd__h24072 =
	     { CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1,
	       2'd0 } ;
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd31:
	  x1_avValue_fst_flags__h20557 = mav_scr_write_cap[55];
      default: x1_avValue_fst_flags__h20557 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[55];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd30, 5'd31:
	  x1_avValue_fst_reserved__h20558 = mav_scr_write_cap[54:53];
      default: x1_avValue_fst_reserved__h20558 = 2'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd30, 5'd31:
	  x1_avValue_fst_otype__h20559 = mav_scr_write_cap[52:35];
      default: x1_avValue_fst_otype__h20559 = 18'd262143;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd30, 5'd31:
	  x1_avValue_fst_perms_soft__h20597 = mav_scr_write_cap[71:68];
      default: x1_avValue_fst_perms_soft__h20597 = 4'd0;
    endcase
  end
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  v__h9611 or
	  v__h13737 or
	  v__h9755 or
	  v__h10430 or
	  csr_mie$fav_sie_write or
	  offsetAddr__h13301 or
	  offsetAddr__h13900 or
	  v__h14320 or
	  csr_mip$fav_sip_write or
	  wordxl1__h12701 or
	  v__h12618 or
	  v__h12654 or
	  csr_mie$fav_write or
	  csr_mip$fav_write or result__h15007 or v__h15108)
  begin
    case (mav_csr_write_csr_addr)
      12'h001: y_avValue_fst__h16209 = v__h9611;
      12'h002, 12'h306: y_avValue_fst__h16209 = v__h13737;
      12'h003: y_avValue_fst__h16209 = v__h9755;
      12'h100: y_avValue_fst__h16209 = v__h10430;
      12'h102, 12'h103, 12'h106, 12'h7A0, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  y_avValue_fst__h16209 = 64'd0;
      12'h104: y_avValue_fst__h16209 = csr_mie$fav_sie_write;
      12'h105, 12'h305: y_avValue_fst__h16209 = offsetAddr__h13301;
      12'h140,
      12'h143,
      12'h180,
      12'h340,
      12'h343,
      12'h7A2,
      12'h7A3,
      12'hB00,
      12'hB02:
	  y_avValue_fst__h16209 = mav_csr_write_word;
      12'h141, 12'h341: y_avValue_fst__h16209 = offsetAddr__h13900;
      12'h142, 12'h342: y_avValue_fst__h16209 = v__h14320;
      12'h144: y_avValue_fst__h16209 = csr_mip$fav_sip_write;
      12'h300: y_avValue_fst__h16209 = wordxl1__h12701;
      12'h301: y_avValue_fst__h16209 = 64'h800000000014112D;
      12'h302: y_avValue_fst__h16209 = v__h12618;
      12'h303: y_avValue_fst__h16209 = v__h12654;
      12'h304: y_avValue_fst__h16209 = csr_mie$fav_write;
      12'h344: y_avValue_fst__h16209 = csr_mip$fav_write;
      12'h7A1: y_avValue_fst__h16209 = result__h15007;
      12'h7B0: y_avValue_fst__h16209 = v__h15108;
      default: y_avValue_fst__h16209 = mav_csr_write_word;
    endcase
  end
  always@(new_priv__h22563 or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285)
  begin
    case (new_priv__h22563)
      2'b01:
	  CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2];
      2'b11:
	  CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2];
      default: CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
		   SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2];
    endcase
  end
  always@(mav_scr_write_cap or
	  mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x0_ETC__q2)
  begin
    case (mav_scr_write_cap[33:28])
      6'd50: x__h19638 = mav_scr_write_cap[13];
      6'd51: x__h19638 = mav_scr_write_cap[12];
      default: x__h19638 =
		   mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x0_ETC__q2[49];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  capUnpacked_capFat_address__h18284 or
	  mav_scr_write_cap or capUnpacked_capFat_address__h17646)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd28:
	  x1_avValue_fst_address__h20554 = capUnpacked_capFat_address__h18284;
      5'd13, 5'd14, 5'd29, 5'd30:
	  x1_avValue_fst_address__h20554 = mav_scr_write_cap[151:86];
      5'd15, 5'd31:
	  x1_avValue_fst_address__h20554 = capUnpacked_capFat_address__h17646;
      default: x1_avValue_fst_address__h20554 = 66'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  capUnpacked_capFat_addrBits__h18285 or
	  mav_scr_write_cap or capUnpacked_capFat_addrBits__h17647)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd28:
	  x1_avValue_fst_addrBits__h20555 =
	      capUnpacked_capFat_addrBits__h18285;
      5'd13, 5'd14, 5'd29, 5'd30:
	  x1_avValue_fst_addrBits__h20555 = mav_scr_write_cap[85:72];
      5'd15, 5'd31:
	  x1_avValue_fst_addrBits__h20555 =
	      capUnpacked_capFat_addrBits__h17647;
      default: x1_avValue_fst_addrBits__h20555 = 14'd0;
    endcase
  end
  always@(new_priv__h22563 or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285)
  begin
    case (new_priv__h22563)
      2'b01:
	  CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0];
      2'b11:
	  CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0];
      default: CASE_new_priv2563_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
		   SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769 =
	      csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769 =
	      csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2769 =
		   interrupt_pending_cur_priv == 2'b11 &&
		   csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872 =
	      !csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872 =
	      !csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_762_THEN__ETC___d2872 =
		   interrupt_pending_cur_priv != 2'b11 ||
		   !csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[34];
      default: CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q4 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[34];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd13, 5'd14, 5'd15, 5'd28, 5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[33:0];
      default: CASE_mav_scr_write_scr_addr_12_mav_scr_write_c_ETC__q5 =
		   34'h344000000;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$fv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$fv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$fv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$fv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7230 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7335 or rg_mcycle or rg_minstret or x__h7353)
  begin
    case (read_csr_csr_addr)
      12'h001:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 = 64'd0;
      12'h104:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mie$fv_sie_read;
      12'h105:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_stval;
      12'h144:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mip$fv_sip_read;
      12'h180:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 = rg_satp;
      12'h300:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mie$fv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mip$fv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 32'd0, dcsr__h7230 };
      12'h7B1:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 48'd0, x__h7335 };
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 48'd0, x__h7353 };
      default: IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
		   rg_dscratch1;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$fv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$fv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$fv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$fv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7230 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7335 or rg_mcycle or rg_minstret or x__h7353)
  begin
    case (read_csr_port2_csr_addr)
      12'h001:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 = 64'd0;
      12'h104:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mie$fv_sie_read;
      12'h105:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_stval;
      12'h144:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mip$fv_sip_read;
      12'h180:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 = rg_satp;
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mie$fv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mip$fv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 32'd0, dcsr__h7230 };
      12'h7B1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 48'd0, x__h7335 };
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 48'd0, x__h7353 };
      default: IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
		   rg_dscratch1;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$fv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$fv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$fv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$fv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7230 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7335 or rg_mcycle or rg_minstret or x__h7353)
  begin
    case (mav_read_csr_csr_addr)
      12'h001:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 = 64'd0;
      12'h104:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mie$fv_sie_read;
      12'h105:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_sscratch;
      12'h141:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_stval;
      12'h144:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mip$fv_sip_read;
      12'h180:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_satp;
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      64'h800000000014112D;
      12'h302:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mie$fv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mip$fv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata2;
      12'h7A3:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata3;
      12'h7B0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 32'd0, dcsr__h7230 };
      12'h7B1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_dscratch0;
      12'h9C0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 48'd0, x__h7335 };
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_minstret;
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 48'd0, x__h7353 };
      default: IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
		   rg_dscratch1;
    endcase
  end
  always@(read_scr_scr_addr or
	  rg_mepcc or
	  rg_stcc or
	  rg_stdc or
	  rg_sscratchc or rg_sepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd12:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_stcc;
      5'd13:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_stdc;
      5'd14:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_sscratchc;
      5'd15:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_sepcc;
      5'd28:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
		   rg_mepcc;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1634 or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1670)
  begin
    case (mav_scr_write_scr_addr)
      5'd12, 5'd28:
	  IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772 =
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1634 &&
	      mav_scr_write_cap[152];
      5'd13, 5'd14, 5'd29:
	  IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772 =
	      mav_scr_write_cap[152];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772 =
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1670 &&
	      mav_scr_write_cap[152];
      default: IF_mav_scr_write_scr_addr_EQ_12_578_THEN_SEXT__ETC___d1772 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[152];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'h0000000A00002000;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_sscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_stdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_sepcc$EN) rg_sepcc <= `BSV_ASSIGNMENT_DELAY rg_sepcc$D_IN;
	if (rg_sscratchc$EN)
	  rg_sscratchc <= `BSV_ASSIGNMENT_DELAY rg_sscratchc$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_stcc$EN) rg_stcc <= `BSV_ASSIGNMENT_DELAY rg_stcc$D_IN;
	if (rg_stdc$EN) rg_stdc <= `BSV_ASSIGNMENT_DELAY rg_stdc$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpcc$EN) rg_dpcc <= `BSV_ASSIGNMENT_DELAY rg_dpcc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_fflags$EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags$D_IN;
    if (rg_frm$EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_medeleg$EN) rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
    if (rg_mideleg$EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_nmi_vector$EN)
      rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_scause$EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause$D_IN;
    if (rg_sccsr$EN) rg_sccsr <= `BSV_ASSIGNMENT_DELAY rg_sccsr$D_IN;
    if (rg_sscratch$EN) rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch$D_IN;
    if (rg_stval$EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpcc = 163'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_dscratch0 = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch1 = 64'hAAAAAAAAAAAAAAAA;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_medeleg = 29'h0AAAAAAA;
    rg_mepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_scause = 7'h2A;
    rg_sccsr = 11'h2AA;
    rg_sepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_sscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_stcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug)
	$display("sstatus = 0x%0h",
		 { csr_mstatus_rg_mstatus[63],
		   29'd0,
		   csr_mstatus_rg_mstatus[33:32],
		   12'd0,
		   csr_mstatus_rg_mstatus[19:18],
		   1'd0,
		   csr_mstatus_rg_mstatus[16:13],
		   4'd0,
		   csr_mstatus_rg_mstatus[8],
		   2'd0,
		   csr_mstatus_rg_mstatus[5:4],
		   2'd0,
		   csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sip     = 0x%0h", csr_mip$fv_sip_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sie     = 0x%0h", csr_mie$fv_sie_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	   !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	  mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1504 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h21467 | in__h21576[63:0],
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("    priv %0d: ", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ip: 0x%0h", csr_mip$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ie: 0x%0h", csr_mie$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd10 &&
	  rg_scause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd11 &&
	  rg_scause[5:0] != 6'd12 &&
	  rg_scause[5:0] != 6'd13 &&
	  rg_scause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" status: 0x%0h",
	       { csr_mstatus_rg_mstatus[63],
		 29'd0,
		 csr_mstatus_rg_mstatus[33:32],
		 12'd0,
		 csr_mstatus_rg_mstatus[19:18],
		 1'd0,
		 csr_mstatus_rg_mstatus[16:13],
		 4'd0,
		 csr_mstatus_rg_mstatus[8],
		 2'd0,
		 csr_mstatus_rg_mstatus[5:4],
		 2'd0,
		 csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tval: 0x%0h", rg_stval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ip: 0x%0h", csr_mip$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ie: 0x%0h", csr_mie$fv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" edeleg: 0x%0h", rg_medeleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ideleg: 0x%0h", rg_mideleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h24020);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("MStatus{",
	       "sd:%0d",
	       x__h25677[14:13] == 2'h3 || x__h25677[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" sxl:%0d uxl:%0d", x__h25677[35:34], x__h25677[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tsr:%0d", x__h25677[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tw:%0d", x__h25677[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" tvm:%0d", x__h25677[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" mxr:%0d", x__h25677[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" sum:%0d", x__h25677[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" mprv:%0d", x__h25677[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" xs:%0d", x__h25677[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" fs:%0d", x__h25677[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" mpp:%0d", x__h25677[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" spp:%0d", x__h25677[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" pies:%0d_%0d%0d", x__h25677[7], x__h25677[5], x__h25677[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" ies:%0d_%0d%0d", x__h25677[3], x__h25677[1], x__h25677[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h24803 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  NOT_csr_trap_actions_nmi_142_AND_csr_trap_acti_ETC___d2258)
	$write("unknown interrupt Exc_Code %d", exc_code__h24803);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h24803 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2309)
	$write("unknown trap Exc_Code %d", exc_code__h24803);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" new priv %0d", new_priv__h22563);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("valid:%b",
	       mav_scr_write_cap[152],
	       " perms:0x%x",
	       { 15'd0, mav_scr_write_cap[71:56] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" reserved:0x%x", mav_scr_write_cap[54:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1707)
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1709)
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("%d", $unsigned(mav_scr_write_cap[33:28]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("'h%h", mav_scr_write_cap[27:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("'h%h", mav_scr_write_cap[13:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" address:0x%x", mav_scr_write_cap[151:86]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" addrBits:0x%x", mav_scr_write_cap[85:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       { 2'd0, bot__h19335 },
	       mav_scr_write_cap_BITS_33_TO_28_595_ULT_51_712_ETC___d1742 ?
		 result__h20128 :
		 ret__h19458,
	       (mav_scr_write_cap[33:28] < 6'd52) ?
		 length__h20188 :
		 66'h3FFFFFFFFFFFFFFFF,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1602);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("'h%h", repBound__h20419);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1755)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1757)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1758)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1760)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1761)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_578_687_AND_N_ETC___d1762)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("%d", $signed(x__h20480));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("%d", $signed(x__h20499), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__506_ULE_1_507___d1508)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

