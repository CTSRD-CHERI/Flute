//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// read_scr                       O   154
// mav_read_csr                   O    65
// mav_csr_write                  O   129
// mav_scr_write                  O   153
// read_frm                       O     3 reg
// read_fflags                    O     5 reg
// mv_update_fcsr_fflags          O     5
// mv_update_mstatus_fs           O    64
// read_misa                      O    28 const
// read_mstatus                   O    64 reg
// read_sstatus                   O    64
// read_ustatus                   O    64
// read_satp                      O    64 reg
// csr_trap_actions               O   283
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   229
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    64
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// read_dpcc                      O   163 reg
// RDY_read_dpcc                  O     1 const
// RDY_write_dpcc                 O     1 const
// dcsr_break_enters_debug        O     1
// RDY_dcsr_break_enters_debug    O     1 const
// read_dcsr_step                 O     1 reg
// RDY_read_dcsr_step             O     1 const
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    64
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I   153
// mv_update_fcsr_fflags_flags    I     5
// ma_update_fcsr_fflags_flags    I     5
// mv_update_mstatus_fs_fs        I     2
// ma_update_mstatus_fs_fs        I     2
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I   163
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// write_dpcc_pcc                 I   163
// dcsr_break_enters_debug_cur_priv  I     2
// write_dcsr_cause_priv_cause    I     3
// write_dcsr_cause_priv_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_ma_update_fcsr_fflags       I     1
// EN_ma_update_mstatus_fs        I     1
// EN_csr_minstret_incr           I     1
// EN_write_dpcc                  I     1
// EN_write_dcsr_cause_priv       I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   mv_update_fcsr_fflags_flags -> mv_update_fcsr_fflags
//   mv_update_mstatus_fs_fs -> mv_update_mstatus_fs
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   dcsr_break_enters_debug_cur_priv -> dcsr_break_enters_debug
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_frm,

		     read_fflags,

		     mv_update_fcsr_fflags_flags,
		     mv_update_fcsr_fflags,

		     ma_update_fcsr_fflags_flags,
		     EN_ma_update_fcsr_fflags,

		     mv_update_mstatus_fs_fs,
		     mv_update_mstatus_fs,

		     ma_update_mstatus_fs_fs,
		     EN_ma_update_mstatus_fs,

		     read_misa,

		     read_mstatus,

		     read_sstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     s_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,

		     nmi_pending,

		     read_dpcc,
		     RDY_read_dpcc,

		     write_dpcc_pcc,
		     EN_write_dpcc,
		     RDY_write_dpcc,

		     dcsr_break_enters_debug_cur_priv,
		     dcsr_break_enters_debug,
		     RDY_dcsr_break_enters_debug,

		     read_dcsr_step,
		     RDY_read_dcsr_step,

		     write_dcsr_cause_priv_cause,
		     write_dcsr_cause_priv_priv,
		     EN_write_dcsr_cause_priv,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [153 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [63 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [128 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [152 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [152 : 0] mav_scr_write;

  // value method read_frm
  output [2 : 0] read_frm;

  // value method read_fflags
  output [4 : 0] read_fflags;

  // value method mv_update_fcsr_fflags
  input  [4 : 0] mv_update_fcsr_fflags_flags;
  output [4 : 0] mv_update_fcsr_fflags;

  // action method ma_update_fcsr_fflags
  input  [4 : 0] ma_update_fcsr_fflags_flags;
  input  EN_ma_update_fcsr_fflags;

  // value method mv_update_mstatus_fs
  input  [1 : 0] mv_update_mstatus_fs_fs;
  output [63 : 0] mv_update_mstatus_fs;

  // action method ma_update_mstatus_fs
  input  [1 : 0] ma_update_mstatus_fs_fs;
  input  EN_ma_update_mstatus_fs;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_sstatus
  output [63 : 0] read_sstatus;

  // value method read_ustatus
  output [63 : 0] read_ustatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [162 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [282 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [228 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [63 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // value method nmi_pending
  output nmi_pending;

  // value method read_dpcc
  output [162 : 0] read_dpcc;
  output RDY_read_dpcc;

  // action method write_dpcc
  input  [162 : 0] write_dpcc_pcc;
  input  EN_write_dpcc;
  output RDY_write_dpcc;

  // value method dcsr_break_enters_debug
  input  [1 : 0] dcsr_break_enters_debug_cur_priv;
  output dcsr_break_enters_debug;
  output RDY_dcsr_break_enters_debug;

  // value method read_dcsr_step
  output read_dcsr_step;
  output RDY_read_dcsr_step;

  // action method write_dcsr_cause_priv
  input  [2 : 0] write_dcsr_cause_priv_cause;
  input  [1 : 0] write_dcsr_cause_priv_priv;
  input  EN_write_dcsr_cause_priv;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  reg dcsr_break_enters_debug;
  wire [282 : 0] csr_trap_actions;
  wire [228 : 0] csr_ret_actions;
  wire [162 : 0] read_dpcc;
  wire [153 : 0] read_scr;
  wire [152 : 0] mav_scr_write;
  wire [128 : 0] mav_csr_write;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] csr_mip_read,
		mv_update_mstatus_fs,
		read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_sstatus,
		read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [4 : 0] mv_update_fcsr_fflags, read_fflags;
  wire [2 : 0] read_frm;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_dcsr_break_enters_debug,
       RDY_debug,
       RDY_read_dcsr_step,
       RDY_read_dpcc,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_write_dpcc,
       csr_counter_read_fault,
       nmi_pending,
       read_dcsr_step,
       wfi_resume;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [63 : 0] csr_mstatus_rg_mstatus;
  reg [63 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  reg [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpcc
  reg [162 : 0] rg_dpcc;
  reg [162 : 0] rg_dpcc$D_IN;
  wire rg_dpcc$EN;

  // register rg_dscratch0
  reg [63 : 0] rg_dscratch0;
  wire [63 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [63 : 0] rg_dscratch1;
  wire [63 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  reg [4 : 0] rg_fflags$D_IN;
  wire rg_fflags$EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm$D_IN;
  wire rg_frm$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_medeleg
  reg [28 : 0] rg_medeleg;
  wire [28 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_mepcc
  reg [152 : 0] rg_mepcc;
  reg [152 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [152 : 0] rg_mscratchc;
  wire [152 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [152 : 0] rg_mtcc;
  reg [152 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [152 : 0] rg_mtdc;
  wire [152 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [63 : 0] rg_nmi_vector;
  wire [63 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_scause
  reg [6 : 0] rg_scause;
  reg [6 : 0] rg_scause$D_IN;
  wire rg_scause$EN;

  // register rg_sccsr
  reg [10 : 0] rg_sccsr;
  wire [10 : 0] rg_sccsr$D_IN;
  wire rg_sccsr$EN;

  // register rg_sepcc
  reg [152 : 0] rg_sepcc;
  reg [152 : 0] rg_sepcc$D_IN;
  wire rg_sepcc$EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch$D_IN;
  wire rg_sscratch$EN;

  // register rg_sscratchc
  reg [152 : 0] rg_sscratchc;
  wire [152 : 0] rg_sscratchc$D_IN;
  wire rg_sscratchc$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_stcc
  reg [152 : 0] rg_stcc;
  reg [152 : 0] rg_stcc$D_IN;
  wire rg_stcc$EN;

  // register rg_stdc
  reg [152 : 0] rg_stdc;
  wire [152 : 0] rg_stdc$D_IN;
  wire rg_stdc$EN;

  // register rg_stval
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval$D_IN;
  wire rg_stval$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [63 : 0] csr_mie$mav_sie_write,
		csr_mie$mav_sie_write_wordxl,
		csr_mie$mav_write,
		csr_mie$mav_write_wordxl,
		csr_mie$mv_read,
		csr_mie$mv_sie_read;
  wire [27 : 0] csr_mie$mav_sie_write_misa, csr_mie$mav_write_misa;
  wire csr_mie$EN_mav_sie_write, csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [63 : 0] csr_mip$mav_sip_write,
		csr_mip$mav_sip_write_wordxl,
		csr_mip$mav_write,
		csr_mip$mav_write_wordxl,
		csr_mip$mv_read,
		csr_mip$mv_sip_read;
  wire [27 : 0] csr_mip$mav_sip_write_misa, csr_mip$mav_write_misa;
  wire csr_mip$EN_mav_sip_write,
       csr_mip$EN_mav_write,
       csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule soc_map
  wire [152 : 0] soc_map$m_mepcc_reset_value,
		 soc_map$m_mtcc_reset_value,
		 soc_map$m_pcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_nmivec_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_update_fcsr_fflags,
       CAN_FIRE_ma_update_mstatus_fs,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_dcsr_cause_priv,
       CAN_FIRE_write_dpcc,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_update_fcsr_fflags,
       WILL_FIRE_ma_update_mstatus_fs,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_dcsr_cause_priv,
       WILL_FIRE_write_dpcc;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
  wire [162 : 0] MUX_rg_dpcc$write_1__VAL_1, MUX_rg_dpcc$write_1__VAL_3;
  wire [152 : 0] MUX_rg_mepcc$write_1__VAL_2,
		 MUX_rg_mepcc$write_1__VAL_4,
		 MUX_rg_mtcc$write_1__VAL_2,
		 MUX_rg_mtcc$write_1__VAL_3,
		 MUX_rg_sepcc$write_1__VAL_4,
		 MUX_rg_stcc$write_1__VAL_3;
  wire [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_2,
		MUX_csr_mstatus_rg_mstatus$write_1__VAL_4,
		MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2;
  wire [31 : 0] MUX_rg_dcsr$write_1__VAL_3;
  wire [28 : 0] MUX_rg_medeleg$write_1__VAL_1;
  wire [10 : 0] MUX_rg_mccsr$write_1__VAL_2;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire [4 : 0] MUX_rg_fflags$write_1__VAL_3;
  wire [2 : 0] MUX_rg_frm$write_1__VAL_1;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_5,
       MUX_rg_dcsr$write_1__SEL_2,
       MUX_rg_dpcc$write_1__SEL_3,
       MUX_rg_fflags$write_1__SEL_2,
       MUX_rg_frm$write_1__SEL_1,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_3,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_medeleg$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_4,
       MUX_rg_mideleg$write_1__SEL_1,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_satp$write_1__SEL_1,
       MUX_rg_scause$write_1__SEL_2,
       MUX_rg_scause$write_1__SEL_3,
       MUX_rg_sepcc$write_1__SEL_2,
       MUX_rg_sepcc$write_1__SEL_4,
       MUX_rg_stcc$write_1__SEL_2,
       MUX_rg_stcc$write_1__SEL_3,
       MUX_rg_stval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [152 : 0] IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758;
  reg [71 : 0] IF_mav_scr_write_scr_addr_EQ_13_646_OR_mav_scr_ETC___d1857;
  reg [65 : 0] IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814;
  reg [63 : 0] IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007,
	       IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465,
	       IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715,
	       y_avValue_fst__h17524;
  reg [61 : 0] CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1;
  reg [33 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9;
  reg [17 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7;
  reg [13 : 0] IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821;
  reg [3 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4;
  reg [1 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6;
  reg CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
      CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3,
      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802,
      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905,
      IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807;
  wire [152 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2448;
  wire [151 : 0] _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2388;
  wire [85 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2447;
  wire [65 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2473,
		a_capFat_address__h28947,
		addTop__h21211,
		capUnpacked_capFat_address__h19267,
		capUnpacked_capFat_address__h19918,
		in__h22092,
		in__h23957,
		in__h5913,
		in__h6121,
		in__h6453,
		in__h6673,
		in__h6908,
		length__h21919,
		mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717,
		result__h21859,
		result_d_address__h16861,
		result_d_address__h27630,
		ret__h21215,
		x1_avValue_address__h20143,
		x__h22110,
		x__h23975,
		x__h27672,
		x__h5931,
		x__h6139,
		x__h6471,
		x__h6691,
		x__h6926,
		x_address__h12473,
		x_address__h12982,
		x_address__h14819,
		x_address__h15425,
		y__h22109,
		y__h23974,
		y__h5930,
		y__h6138,
		y__h6470,
		y__h6690,
		y__h6925;
  wire [63 : 0] IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143,
		IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411,
		SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595,
		SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423,
		SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357,
		SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285,
		_theResult_____2__h26400,
		_theResult___fst__h28218,
		_theResult___fst__h28419,
		addBase__h12493,
		addBase__h13002,
		addBase__h14839,
		addBase__h15445,
		addBase__h16881,
		addBase__h21089,
		addBase__h27662,
		bot__h12496,
		bot__h13005,
		bot__h14842,
		bot__h15448,
		bot__h16884,
		bot__h21092,
		bot__h27665,
		csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404,
		csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135,
		exc_pc___1__h26490,
		exc_pc__h26398,
		mask__h25153,
		mask__h25170,
		mask__h28239,
		mask__h28256,
		mav_csr_write_word_BITS_14_TO_13_044_EQ_0x3_04_ETC___d1075,
		new_csr_value__h16278,
		offsetAddr__h14527,
		offsetAddr__h15149,
		offsetAddr__h18845,
		offsetAddr__h19521,
		v__h11535,
		v__h13767,
		v__h13879,
		v__h15591,
		v__h16379,
		v__h24949,
		val__h25154,
		val__h25171,
		val__h28257,
		vector_offset__h26399,
		wordxl1__h10965,
		wordxl1__h13926,
		x__h12329,
		x__h12844,
		x__h14681,
		x__h15287,
		x__h16791,
		x__h19103,
		x__h19779,
		x__h22023,
		x__h22025,
		x__h23848,
		x__h23850,
		x__h25152,
		x__h25165,
		x__h25182,
		x__h27560,
		x__h28064,
		x__h28065,
		x__h28238,
		x__h28251,
		x__h28268,
		x__h5797,
		x__h5799,
		x__h6005,
		x__h6007,
		x__h6337,
		x__h6339,
		x__h6557,
		x__h6559,
		x__h7408,
		x__h7410,
		x__h9349,
		y__h25166,
		y__h25183,
		y__h28252,
		y__h28269,
		y_avValue_fst__h17256,
		y_avValue_fst__h17261,
		y_avValue_fst__h17266,
		y_avValue_fst__h26352,
		y_avValue_fst__h26370,
		y_avValue_snd_snd_snd__h26452;
  wire [54 : 0] IF_IF_mav_scr_write_cap_BITS_33_TO_28_567_EQ_0_ETC___d1797;
  wire [52 : 0] IF_IF_csr_ret_actions_from_priv_EQ_0b11_391_TH_ETC___d2445;
  wire [51 : 0] mask__h21212;
  wire [49 : 0] highBitsfilter__h12178,
		highBitsfilter__h12709,
		highBitsfilter__h14530,
		highBitsfilter__h15152,
		highBitsfilter__h16670,
		highBitsfilter__h27360,
		highOffsetBits__h12179,
		highOffsetBits__h12710,
		highOffsetBits__h14531,
		highOffsetBits__h15153,
		highOffsetBits__h16671,
		highOffsetBits__h19525,
		highOffsetBits__h27361,
		mask__h21090,
		mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2,
		signBits__h16668,
		signBits__h19522,
		signBits__h27358,
		x__h16698,
		x__h19552,
		x__h27388;
  wire [31 : 0] dcsr__h7238, new_dcsr__h16382;
  wire [22 : 0] fixed_up_val_23__h11006,
		fixed_up_val_23__h11586,
		fixed_up_val_23__h13967,
		fixed_up_val_23__h22606,
		fixed_up_val_23__h23160,
		fixed_up_val_23__h24993,
		fixed_up_val_23__h28125;
  wire [17 : 0] a_capFat_otype__h28952, x1_avValue_otype__h20148, x__h28885;
  wire [15 : 0] base__h23835,
		base__h7395,
		newAddrBits__h12453,
		newAddrBits__h12962,
		newAddrBits__h14799,
		newAddrBits__h15405,
		newAddrBits__h16850,
		newAddrBits__h19247,
		newAddrBits__h19898,
		newAddrBits__h27619,
		offset__h22011,
		offset__h23836,
		offset__h5785,
		offset__h5993,
		offset__h6325,
		offset__h6545,
		offset__h7396,
		x__h12550,
		x__h13059,
		x__h14896,
		x__h15502,
		x__h21146,
		x__h21301,
		x__h21924,
		x__h27719,
		x__h7343,
		x__h7361;
  wire [13 : 0] a_capFat_addrBits__h28948,
		capUnpacked_capFat_addrBits__h19268,
		capUnpacked_capFat_addrBits__h19919,
		result_d_addrBits__h16862,
		result_d_addrBits__h27631,
		toBoundsM1__h12189,
		toBoundsM1__h12720,
		toBoundsM1__h14541,
		toBoundsM1__h15163,
		toBoundsM1__h16681,
		toBoundsM1__h20272,
		toBoundsM1__h27371,
		toBounds__h12188,
		toBounds__h12719,
		toBounds__h14540,
		toBounds__h15162,
		toBounds__h16680,
		toBounds__h20271,
		toBounds__h27370,
		x1_avValue_addrBits__h20144,
		x__h27590,
		x_addrBits__h12474,
		x_addrBits__h12983,
		x_addrBits__h14820,
		x_addrBits__h15426;
  wire [9 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2467;
  wire [5 : 0] IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2983,
	       IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2985,
	       IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2986,
	       IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2988,
	       IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336,
	       exc_code__h27183,
	       ie_from_x__h28202,
	       ie_to_x__h25070,
	       pie_from_x__h28203,
	       pie_to_x__h25071;
  wire [4 : 0] IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1389,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22;
  wire [3 : 0] IF_rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc__ETC___d2455,
	       IF_rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc__ETC___d2464,
	       x1_avValue_perms_soft__h22325;
  wire [2 : 0] repBound__h17087,
	       repBound__h22150,
	       repBound__h4842,
	       repBound__h5835,
	       repBound__h6043,
	       repBound__h6375,
	       repBound__h6595;
  wire [1 : 0] IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037,
	       IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376,
	       IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302,
	       _theResult____h30245,
	       _theResult____h30457,
	       _theResult____h30669,
	       _theResult____h30881,
	       _theResult____h31093,
	       _theResult____h31305,
	       _theResult____h31517,
	       _theResult____h31729,
	       _theResult____h31941,
	       _theResult___fst__h25082,
	       a_capFat_reserved__h28951,
	       new_priv__h24944,
	       to_y__h28418,
	       x1_avValue_reserved__h20147,
	       x__h19503,
	       x__h22211,
	       x__h22230;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2353,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1616,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1655,
       IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2361,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1107,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1156,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1225,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1273,
       IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1347,
       IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_474__ETC___d2581,
       NOT_access_permitted_1_read_not_write_592_OR_a_ETC___d2607,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_608__ETC___d2715,
       NOT_access_permitted_2_read_not_write_724_OR_a_ETC___d2739,
       NOT_cfg_verbosity_read__486_ULE_1_487___d1488,
       NOT_csr_mip_mv_read__94_BIT_0_872_963_OR_NOT_c_ETC___d2970,
       NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908,
       NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935,
       NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2962,
       NOT_csr_mip_mv_read__94_BIT_1_839_936_OR_NOT_c_ETC___d2943,
       NOT_csr_mip_mv_read__94_BIT_3_806_909_OR_NOT_c_ETC___d2916,
       NOT_csr_mip_mv_read__94_BIT_5_850_945_OR_NOT_c_ETC___d2952,
       NOT_csr_mip_mv_read__94_BIT_7_817_918_OR_NOT_c_ETC___d2925,
       NOT_csr_mip_mv_read__94_BIT_8_861_954_OR_NOT_c_ETC___d2961,
       NOT_csr_mip_mv_read__94_BIT_9_828_927_OR_NOT_c_ETC___d2934,
       NOT_csr_trap_actions_nmi_161_AND_csr_trap_acti_ETC___d2277,
       NOT_mav_scr_write_cap_BITS_33_TO_28_567_ULT_50_ETC___d1619,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1698,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1700,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1743,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1745,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1746,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1748,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1749,
       NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1750,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1660,
       a_capFat_flags__h28950,
       access_permitted_1_csr_addr_ULE_0xC1F___d2476,
       access_permitted_1_csr_addr_ULT_0xC03___d2474,
       access_permitted_2_csr_addr_ULE_0xC1F___d2610,
       access_permitted_2_csr_addr_ULT_0xC03___d2608,
       b__h25169,
       b__h28255,
       csr_mip_mv_read__94_BIT_0_872_AND_csr_mie_mv_r_ETC___d2881,
       csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2805,
       csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2871,
       csr_mip_mv_read__94_BIT_1_839_AND_csr_mie_mv_r_ETC___d2848,
       csr_mip_mv_read__94_BIT_3_806_AND_csr_mie_mv_r_ETC___d2815,
       csr_mip_mv_read__94_BIT_4_883_AND_csr_mie_mv_r_ETC___d2892,
       csr_mip_mv_read__94_BIT_5_850_AND_csr_mie_mv_r_ETC___d2859,
       csr_mip_mv_read__94_BIT_7_817_AND_csr_mie_mv_r_ETC___d2826,
       csr_mip_mv_read__94_BIT_8_861_AND_csr_mie_mv_r_ETC___d2870,
       csr_mip_mv_read__94_BIT_9_828_AND_csr_mie_mv_r_ETC___d2837,
       csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2176,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2328,
       deleg_bit___1__h25091,
       deleg_bit___1__h25106,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2794,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2856,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2867,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2878,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2793,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2855,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2866,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2877,
       mav_csr_write_csr_addr_ULE_0x33F___d1015,
       mav_csr_write_csr_addr_ULE_0xB1F___d1011,
       mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1484,
       mav_csr_write_csr_addr_ULT_0x323___d1014,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1031,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1079,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1138,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1140,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1187,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1191,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1193,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1197,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1206,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1209,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1211,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1255,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1257,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1259,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1303,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1305,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1307,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1311,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1313,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1315,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1333,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1393,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1395,
       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1560,
       mav_csr_write_csr_addr_ULT_0xB03___d1010,
       mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577,
       mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709,
       mav_scr_write_cap_BITS_33_TO_28_567_ULT_51_703_ETC___d1730,
       mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579,
       rg_dpcc_08_BITS_23_TO_21_373_ULT_rg_dpcc_08_BI_ETC___d1377,
       rg_dpcc_08_BITS_37_TO_35_375_ULT_rg_dpcc_08_BI_ETC___d1376,
       rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369,
       rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc_64__ETC___d2450,
       rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371,
       rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338,
       rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340,
       rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295,
       rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc_90__ETC___d2459,
       rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297,
       rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266,
       rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268,
       sd__h13966,
       sd__h22605,
       sd__h23159,
       sd__h24992,
       sd__h28124,
       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12,
       x1_avValue_flags__h20146,
       x__h21395;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'h001 ||
	       read_csr_csr_addr == 12'h002 ||
	       read_csr_csr_addr == 12'h003 ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'h100 ||
	       read_csr_csr_addr == 12'h102 ||
	       read_csr_csr_addr == 12'h103 ||
	       read_csr_csr_addr == 12'h104 ||
	       read_csr_csr_addr == 12'h105 ||
	       read_csr_csr_addr == 12'h106 ||
	       read_csr_csr_addr == 12'h140 ||
	       read_csr_csr_addr == 12'h141 ||
	       read_csr_csr_addr == 12'h142 ||
	       read_csr_csr_addr == 12'h143 ||
	       read_csr_csr_addr == 12'h144 ||
	       read_csr_csr_addr == 12'h9C0 ||
	       read_csr_csr_addr == 12'h180 ||
	       read_csr_csr_addr == 12'h302 ||
	       read_csr_csr_addr == 12'h303 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3 ||
	       read_csr_csr_addr == 12'h7B0 ||
	       read_csr_csr_addr == 12'h7B1 ||
	       read_csr_csr_addr == 12'h7B2 ||
	       read_csr_csr_addr == 12'h7B3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'h001 ||
	       read_csr_port2_csr_addr == 12'h002 ||
	       read_csr_port2_csr_addr == 12'h003 ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'h100 ||
	       read_csr_port2_csr_addr == 12'h102 ||
	       read_csr_port2_csr_addr == 12'h103 ||
	       read_csr_port2_csr_addr == 12'h104 ||
	       read_csr_port2_csr_addr == 12'h105 ||
	       read_csr_port2_csr_addr == 12'h106 ||
	       read_csr_port2_csr_addr == 12'h140 ||
	       read_csr_port2_csr_addr == 12'h141 ||
	       read_csr_port2_csr_addr == 12'h142 ||
	       read_csr_port2_csr_addr == 12'h143 ||
	       read_csr_port2_csr_addr == 12'h144 ||
	       read_csr_port2_csr_addr == 12'h9C0 ||
	       read_csr_port2_csr_addr == 12'h180 ||
	       read_csr_port2_csr_addr == 12'h302 ||
	       read_csr_port2_csr_addr == 12'h303 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3 ||
	       read_csr_port2_csr_addr == 12'h7B0 ||
	       read_csr_port2_csr_addr == 12'h7B1 ||
	       read_csr_port2_csr_addr == 12'h7B2 ||
	       read_csr_port2_csr_addr == 12'h7B3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd12 || read_scr_scr_addr == 5'd13 ||
	       read_scr_scr_addr == 5'd14 ||
	       read_scr_scr_addr == 5'd15 ||
	       read_scr_scr_addr == 5'd28 ||
	       read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'h001 ||
	       mav_read_csr_csr_addr == 12'h002 ||
	       mav_read_csr_csr_addr == 12'h003 ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'h100 ||
	       mav_read_csr_csr_addr == 12'h102 ||
	       mav_read_csr_csr_addr == 12'h103 ||
	       mav_read_csr_csr_addr == 12'h104 ||
	       mav_read_csr_csr_addr == 12'h105 ||
	       mav_read_csr_csr_addr == 12'h106 ||
	       mav_read_csr_csr_addr == 12'h140 ||
	       mav_read_csr_csr_addr == 12'h141 ||
	       mav_read_csr_csr_addr == 12'h142 ||
	       mav_read_csr_csr_addr == 12'h143 ||
	       mav_read_csr_csr_addr == 12'h144 ||
	       mav_read_csr_csr_addr == 12'h9C0 ||
	       mav_read_csr_csr_addr == 12'h180 ||
	       mav_read_csr_csr_addr == 12'h302 ||
	       mav_read_csr_csr_addr == 12'h303 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3 ||
	       mav_read_csr_csr_addr == 12'h7B0 ||
	       mav_read_csr_csr_addr == 12'h7B1 ||
	       mav_read_csr_csr_addr == 12'h7B2 ||
	       mav_read_csr_csr_addr == 12'h7B3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write =
	     { x__h9349,
	       mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1560,
	       wordxl1__h10965 } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     (mav_scr_write_scr_addr == 5'd12) ?
	       { x__h19503 == 2'd0 &&
		 SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623 &&
		 mav_scr_write_cap[152],
		 x1_avValue_address__h20143,
		 x1_avValue_addrBits__h20144,
		 x1_avValue_perms_soft__h22325,
		 x__h19503 == 2'd0 && mav_scr_write_cap[67],
		 x__h19503 == 2'd0 && mav_scr_write_cap[66],
		 x__h19503 == 2'd0 && mav_scr_write_cap[65],
		 x__h19503 == 2'd0 && mav_scr_write_cap[64],
		 x__h19503 == 2'd0 && mav_scr_write_cap[63],
		 x__h19503 == 2'd0 && mav_scr_write_cap[62],
		 x__h19503 == 2'd0 && mav_scr_write_cap[61],
		 x__h19503 == 2'd0 && mav_scr_write_cap[60],
		 x__h19503 == 2'd0 && mav_scr_write_cap[59],
		 x__h19503 == 2'd0 && mav_scr_write_cap[58],
		 x__h19503 == 2'd0 && mav_scr_write_cap[57],
		 x__h19503 == 2'd0 && mav_scr_write_cap[56],
		 x1_avValue_flags__h20146,
		 IF_IF_mav_scr_write_cap_BITS_33_TO_28_567_EQ_0_ETC___d1797 } :
	       { IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807,
		 IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814,
		 IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821,
		 IF_mav_scr_write_scr_addr_EQ_13_646_OR_mav_scr_ETC___d1857 } ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_frm
  assign read_frm = rg_frm ;

  // value method read_fflags
  assign read_fflags = rg_fflags ;

  // value method mv_update_fcsr_fflags
  assign mv_update_fcsr_fflags = rg_fflags | mv_update_fcsr_fflags_flags ;

  // action method ma_update_fcsr_fflags
  assign CAN_FIRE_ma_update_fcsr_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fcsr_fflags = EN_ma_update_fcsr_fflags ;

  // value method mv_update_mstatus_fs
  assign mv_update_mstatus_fs =
	     { sd__h22605, 40'd5120, fixed_up_val_23__h22606 } ;

  // action method ma_update_mstatus_fs
  assign CAN_FIRE_ma_update_mstatus_fs = 1'd1 ;
  assign WILL_FIRE_ma_update_mstatus_fs = EN_ma_update_mstatus_fs ;

  // value method read_misa
  assign read_misa = 28'd135532845 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_sstatus
  assign read_sstatus =
	     { csr_mstatus_rg_mstatus[63],
	       29'd0,
	       csr_mstatus_rg_mstatus[33:32],
	       12'd0,
	       csr_mstatus_rg_mstatus[19:18],
	       1'd0,
	       csr_mstatus_rg_mstatus[16:13],
	       4'd0,
	       csr_mstatus_rg_mstatus[8],
	       2'd0,
	       csr_mstatus_rg_mstatus[5:4],
	       2'd0,
	       csr_mstatus_rg_mstatus[1:0] } ;

  // value method read_ustatus
  assign read_ustatus =
	     { 59'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp = rg_satp ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2361,
	       _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2388,
	       x__h28064,
	       x__h28065,
	       new_priv__h24944 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2448,
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2467,
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2473 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_474__ETC___d2581 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_1_read_not_write_592_OR_a_ETC___d2607 } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_608__ETC___d2715 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_2_read_not_write_724_OR_a_ETC___d2739 } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd1 ||
		access_permitted_scr_scr_addr == 5'd12 ||
		access_permitted_scr_scr_addr == 5'd13 ||
		access_permitted_scr_scr_addr == 5'd15 ||
		access_permitted_scr_scr_addr == 5'd14 ||
		access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     (csr_counter_read_fault_csr_addr == 12'hC00 &&
	      !rg_mcounteren[0] ||
	      csr_counter_read_fault_csr_addr == 12'hC01 &&
	      !rg_mcounteren[1] ||
	      csr_counter_read_fault_csr_addr == 12'hC02 &&
	      !rg_mcounteren[2] ||
	      csr_counter_read_fault_csr_addr >= 12'hC03 &&
	      csr_counter_read_fault_csr_addr <= 12'hC1F) ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2871 ||
	       csr_mip_mv_read__94_BIT_0_872_AND_csr_mie_mv_r_ETC___d2881 ||
	       csr_mip_mv_read__94_BIT_4_883_AND_csr_mie_mv_r_ETC___d2892,
	       IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2988 } ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 64'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // value method read_dpcc
  assign read_dpcc = rg_dpcc ;
  assign RDY_read_dpcc = 1'd1 ;

  // action method write_dpcc
  assign RDY_write_dpcc = 1'd1 ;
  assign CAN_FIRE_write_dpcc = 1'd1 ;
  assign WILL_FIRE_write_dpcc = EN_write_dpcc ;

  // value method dcsr_break_enters_debug
  always@(dcsr_break_enters_debug_cur_priv or rg_dcsr)
  begin
    case (dcsr_break_enters_debug_cur_priv)
      2'b01: dcsr_break_enters_debug = rg_dcsr[13];
      2'b11: dcsr_break_enters_debug = rg_dcsr[15];
      default: dcsr_break_enters_debug = rg_dcsr[12];
    endcase
  end
  assign RDY_dcsr_break_enters_debug = 1'd1 ;

  // value method read_dcsr_step
  assign read_dcsr_step = rg_dcsr[2] ;
  assign RDY_read_dcsr_step = 1'd1 ;

  // action method write_dcsr_cause_priv
  assign CAN_FIRE_write_dcsr_cause_priv = 1'd1 ;
  assign WILL_FIRE_write_dcsr_cause_priv = EN_write_dcsr_cause_priv ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_sie_write_misa(csr_mie$mav_sie_write_misa),
		    .mav_sie_write_wordxl(csr_mie$mav_sie_write_wordxl),
		    .mav_write_misa(csr_mie$mav_write_misa),
		    .mav_write_wordxl(csr_mie$mav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .EN_mav_sie_write(csr_mie$EN_mav_sie_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write),
		    .mv_sie_read(csr_mie$mv_sie_read),
		    .mav_sie_write(csr_mie$mav_sie_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .mav_sip_write_misa(csr_mip$mav_sip_write_misa),
		    .mav_sip_write_wordxl(csr_mip$mav_sip_write_wordxl),
		    .mav_write_misa(csr_mip$mav_write_misa),
		    .mav_write_wordxl(csr_mip$mav_write_wordxl),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_mav_write(csr_mip$EN_mav_write),
		    .EN_mav_sip_write(csr_mip$EN_mav_sip_write),
		    .mv_read(csr_mip$mv_read),
		    .mav_write(csr_mip$mav_write),
		    .mv_sip_read(csr_mip$mv_sip_read),
		    .mav_sip_write(csr_mip$mav_sip_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(soc_map$m_pcc_reset_value),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1031 ;
  assign MUX_rg_dcsr$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323 ;
  assign MUX_rg_dpcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1333 ;
  assign MUX_rg_fflags$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 ;
  assign MUX_rg_frm$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1079 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24944 == 2'b11) ;
  assign MUX_rg_mcause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1303 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1255 ;
  assign MUX_rg_medeleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1197 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1259 ;
  assign MUX_rg_mideleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1206 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h19503 == 2'd0 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1211 ;
  assign MUX_rg_satp$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 ;
  assign MUX_rg_scause$write_1__SEL_2 =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b01 ;
  assign MUX_rg_scause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1187 ;
  assign MUX_rg_sepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ;
  assign MUX_rg_sepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1140 ;
  assign MUX_rg_stcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h19503 == 2'd0 ;
  assign MUX_rg_stcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 ;
  assign MUX_rg_stval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1191 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1315 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1311 ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 =
	     { sd__h28124, 40'd5120, fixed_up_val_23__h28125 } ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 =
	     { sd__h23159, 40'd5120, fixed_up_val_23__h23160 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word_BITS_14_TO_13_044_EQ_0x3_04_ETC___d1075 or
	  wordxl1__h10965)
  begin
    case (mav_csr_write_csr_addr)
      12'h001, 12'h002, 12'h003:
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 = wordxl1__h10965;
      default: MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 =
		   mav_csr_write_word_BITS_14_TO_13_044_EQ_0x3_04_ETC___d1075;
    endcase
  end
  assign MUX_rg_dcsr$write_1__VAL_3 =
	     { rg_dcsr[31:9],
	       write_dcsr_cause_priv_cause,
	       rg_dcsr[5:2],
	       write_dcsr_cause_priv_priv } ;
  assign MUX_rg_dpcc$write_1__VAL_1 =
	     { soc_map$m_pcc_reset_value,
	       repBound__h4842,
	       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
	       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 } ;
  assign MUX_rg_dpcc$write_1__VAL_3 =
	     { (highOffsetBits__h16671 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1347 ||
		rg_dpcc[43:38] >= 6'd50) &&
	       rg_dpcc[162],
	       result_d_address__h16861,
	       result_d_addrBits__h16862,
	       rg_dpcc[81:10],
	       repBound__h17087,
	       rg_dpcc_08_BITS_37_TO_35_375_ULT_rg_dpcc_08_BI_ETC___d1376,
	       rg_dpcc_08_BITS_23_TO_21_373_ULT_rg_dpcc_08_BI_ETC___d1377,
	       IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1389 } ;
  assign MUX_rg_fflags$write_1__VAL_3 =
	     rg_fflags | ma_update_fcsr_fflags_flags ;
  assign MUX_rg_frm$write_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'h002) ?
	       mav_csr_write_word[2:0] :
	       mav_csr_write_word[7:5] ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h27183 } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { mav_csr_write_word[63], mav_csr_write_word[5:0] } ;
  assign MUX_rg_mccsr$write_1__VAL_2 =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign MUX_rg_medeleg$write_1__VAL_1 =
	     { mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1660 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h19267,
	       capUnpacked_capFat_addrBits__h19268,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_4 =
	     { (highOffsetBits__h15153 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1273 ||
		rg_mepcc[33:28] >= 6'd50) &&
	       rg_mepcc[52:35] == 18'd262143 &&
	       rg_mepcc[152],
	       x_address__h15425,
	       x_addrBits__h15426,
	       rg_mepcc[71:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h19918,
	       capUnpacked_capFat_addrBits__h19919,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h14531 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1225 ||
		rg_mtcc[33:28] >= 6'd50) &&
	       rg_mtcc[52:35] == 18'd262143 &&
	       rg_mtcc[152],
	       x_address__h14819,
	       x_addrBits__h14820,
	       rg_mtcc[71:0] } ;
  assign MUX_rg_sepcc$write_1__VAL_4 =
	     { (highOffsetBits__h12710 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1156 ||
		rg_sepcc[33:28] >= 6'd50) &&
	       rg_sepcc[52:35] == 18'd262143 &&
	       rg_sepcc[152],
	       x_address__h12982,
	       x_addrBits__h12983,
	       rg_sepcc[71:0] } ;
  assign MUX_rg_stcc$write_1__VAL_3 =
	     { (highOffsetBits__h12179 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1107 ||
		rg_stcc[33:28] >= 6'd50) &&
	       rg_stcc[52:35] == 18'd262143 &&
	       rg_stcc[152],
	       x_address__h12473,
	       x_addrBits__h12474,
	       rg_stcc[71:0] } ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 or
	  EN_csr_trap_actions or
	  v__h24949 or
	  EN_ma_update_mstatus_fs or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start:
	csr_mstatus_rg_mstatus$D_IN = 64'h0000000A00002000;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_2;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = v__h24949;
    EN_ma_update_mstatus_fs:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_4;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_5:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
    default: csr_mstatus_rg_mstatus$D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1031 ||
	     EN_csr_trap_actions ||
	     EN_ma_update_mstatus_fs ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dcsr
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dcsr$write_1__SEL_2 or
	  new_dcsr__h16382 or
	  EN_write_dcsr_cause_priv or MUX_rg_dcsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dcsr$D_IN = 32'd1073741843;
    MUX_rg_dcsr$write_1__SEL_2: rg_dcsr$D_IN = new_dcsr__h16382;
    EN_write_dcsr_cause_priv: rg_dcsr$D_IN = MUX_rg_dcsr$write_1__VAL_3;
    default: rg_dcsr$D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dcsr$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323 ||
	     EN_write_dcsr_cause_priv ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dpcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dpcc$write_1__VAL_1 or
	  EN_write_dpcc or
	  write_dpcc_pcc or
	  MUX_rg_dpcc$write_1__SEL_3 or MUX_rg_dpcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_1;
    EN_write_dpcc: rg_dpcc$D_IN = write_dpcc_pcc;
    MUX_rg_dpcc$write_1__SEL_3: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_3;
    default: rg_dpcc$D_IN =
		 163'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dpcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1333 ||
	     EN_write_dpcc ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = mav_csr_write_word ;
  assign rg_dscratch0$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1393 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = mav_csr_write_word ;
  assign rg_dscratch1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1395 ;

  // register rg_fflags
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_fflags$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_ma_update_fcsr_fflags or MUX_rg_fflags$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_fflags$D_IN = 5'd0;
    MUX_rg_fflags$write_1__SEL_2: rg_fflags$D_IN = mav_csr_write_word[4:0];
    EN_ma_update_fcsr_fflags: rg_fflags$D_IN = MUX_rg_fflags$write_1__VAL_3;
    default: rg_fflags$D_IN = 5'bxxxxx /* unspecified value */ ;
  endcase
  assign rg_fflags$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 ||
	     EN_ma_update_fcsr_fflags ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_frm
  assign rg_frm$D_IN =
	     MUX_rg_frm$write_1__SEL_1 ? MUX_rg_frm$write_1__VAL_1 : 3'd0 ;
  assign rg_frm$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1079 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_3:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24944 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1303 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b11 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[2:0] :
	       3'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1255 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_medeleg
  assign rg_medeleg$D_IN =
	     MUX_rg_medeleg$write_1__SEL_1 ?
	       MUX_rg_medeleg$write_1__VAL_1 :
	       29'd0 ;
  assign rg_medeleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1197 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_mepcc$write_1__SEL_4 or MUX_rg_mepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_mepcc$write_1__SEL_4: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_4;
    default: rg_mepcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24944 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1259 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mideleg
  assign rg_mideleg$D_IN =
	     MUX_rg_mideleg$write_1__SEL_1 ?
	       mav_csr_write_word[11:0] :
	       12'd0 ;
  assign rg_mideleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1206 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1257 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN = mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1211 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h19503 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN = mav_scr_write_cap ;
  assign rg_mtdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mcause$write_1__SEL_2 ?
	       csr_trap_actions_xtval :
	       mav_csr_write_word ;
  assign rg_mtval$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24944 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1305 ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = 1'b1 ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_satp
  assign rg_satp$D_IN =
	     MUX_rg_satp$write_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign rg_satp$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_scause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_scause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_scause$D_IN = 7'd0;
    MUX_rg_scause$write_1__SEL_2:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_3:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_scause$D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_scause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1187 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sccsr
  assign rg_sccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_sccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b01 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_sepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_sepcc$write_1__SEL_4 or MUX_rg_sepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_sepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_sepcc$write_1__SEL_2: rg_sepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_2:
	rg_sepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_sepcc$write_1__SEL_4: rg_sepcc$D_IN = MUX_rg_sepcc$write_1__VAL_4;
    default: rg_sepcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_sepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1140 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sscratch
  assign rg_sscratch$D_IN = mav_csr_write_word ;
  assign rg_sscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1138 ;

  // register rg_sscratchc
  assign rg_sscratchc$D_IN = mav_scr_write_cap ;
  assign rg_sscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd14 ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_stcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_stcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_stcc$write_1__SEL_3 or MUX_rg_stcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_stcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_stcc$write_1__SEL_2: rg_stcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_stcc$write_1__SEL_3: rg_stcc$D_IN = MUX_rg_stcc$write_1__VAL_3;
    default: rg_stcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_stcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h19503 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stdc
  assign rg_stdc$D_IN = mav_scr_write_cap ;
  assign rg_stdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd13 ;

  // register rg_stval
  assign rg_stval$D_IN =
	     MUX_rg_stval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       csr_trap_actions_xtval ;
  assign rg_stval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1191 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24944 == 2'b01 ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? new_csr_value__h16278 : 64'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1315 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 64'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1313 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$mav_sie_write_misa = 28'd135532845 ;
  assign csr_mie$mav_sie_write_wordxl = mav_csr_write_word ;
  assign csr_mie$mav_write_misa = 28'd135532845 ;
  assign csr_mie$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1209 ;
  assign csr_mie$EN_mav_sie_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$mav_sip_write_misa = 28'd135532845 ;
  assign csr_mip$mav_sip_write_wordxl = mav_csr_write_word ;
  assign csr_mip$mav_write_misa = 28'd135532845 ;
  assign csr_mip$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1307 ;
  assign csr_mip$EN_mav_sip_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1193 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_ret_actions_from_priv_EQ_0b11_391_TH_ETC___d2445 =
	     { a_capFat_otype__h28952,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[34:0] :
		 rg_sepcc[34:0] } ;
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2353 =
	     _theResult_____2__h26400[63] ?
	       x__h27560[13:0] >= toBounds__h27370 :
	       x__h27560[13:0] <= toBoundsM1__h27371 ;
  assign IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143 =
	     (new_priv__h24944 == 2'b11) ?
	       { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135[63:13],
		 csr_trap_actions_from_priv,
		 csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135[10:0] } :
	       { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135[63:9],
		 csr_trap_actions_from_priv[0],
		 csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135[7:0] } ;
  assign IF_IF_mav_scr_write_cap_BITS_33_TO_28_567_EQ_0_ETC___d1797 =
	     { x1_avValue_reserved__h20147,
	       x1_avValue_otype__h20148,
	       x__h19503 != 2'd0 || mav_scr_write_cap[34],
	       (x__h19503 == 2'd0) ?
		 mav_scr_write_cap[33:0] :
		 34'h344000000 } ;
  assign IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2983 =
	     (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908 &&
	      NOT_csr_mip_mv_read__94_BIT_3_806_909_OR_NOT_c_ETC___d2916 &&
	      NOT_csr_mip_mv_read__94_BIT_7_817_918_OR_NOT_c_ETC___d2925) ?
	       6'd9 :
	       ((NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908 &&
		 NOT_csr_mip_mv_read__94_BIT_3_806_909_OR_NOT_c_ETC___d2916) ?
		  6'd7 :
		  (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908 ?
		     6'd3 :
		     6'd11)) ;
  assign IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2985 =
	     (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935 &&
	      NOT_csr_mip_mv_read__94_BIT_1_839_936_OR_NOT_c_ETC___d2943) ?
	       6'd5 :
	       (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935 ?
		  6'd1 :
		  IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2983) ;
  assign IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2986 =
	     (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935 &&
	      NOT_csr_mip_mv_read__94_BIT_1_839_936_OR_NOT_c_ETC___d2943 &&
	      NOT_csr_mip_mv_read__94_BIT_5_850_945_OR_NOT_c_ETC___d2952) ?
	       6'd8 :
	       IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2985 ;
  assign IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2988 =
	     (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2962 &&
	      NOT_csr_mip_mv_read__94_BIT_0_872_963_OR_NOT_c_ETC___d2970) ?
	       6'd4 :
	       (NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2962 ?
		  6'd0 :
		  IF_NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_N_ETC___d2986) ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1616 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63] ?
	       x__h19779[13:0] >= toBounds__h20271 :
	       x__h19779[13:0] <= toBoundsM1__h20272 ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1655 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63] ?
	       x__h19103[13:0] >= toBounds__h20271 :
	       x__h19103[13:0] <= toBoundsM1__h20272 ;
  assign IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037 =
	     (csr_mstatus_rg_mstatus[12:11] == 2'b10) ?
	       2'b01 :
	       csr_mstatus_rg_mstatus[12:11] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h28218 :
	       _theResult___fst__h28419 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2447 =
	     { a_capFat_addrBits__h28948,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[71:56] :
		 rg_sepcc[71:56],
	       a_capFat_flags__h28950,
	       a_capFat_reserved__h28951,
	       IF_IF_csr_ret_actions_from_priv_EQ_0b11_391_TH_ETC___d2445 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2448 =
	     { (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[152] :
		 rg_sepcc[152],
	       a_capFat_address__h28947,
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2447 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2467 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { repBound__h6595,
		 rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc_64__ETC___d2450,
		 rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369,
		 rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371,
		 IF_rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc__ETC___d2455 } :
	       { repBound__h6043,
		 rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc_90__ETC___d2459,
		 rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295,
		 rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297,
		 IF_rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc__ETC___d2464 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2473 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[12:11],
		 _theResult___fst__h28218 } :
	       { to_y__h28418, _theResult___fst__h28419 } ;
  assign IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2361 =
	     (highOffsetBits__h27361 == 50'd0 &&
	      IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2353 ||
	      IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 >=
	      6'd50) &&
	     ((new_priv__h24944 == 2'b11) ? rg_mtcc[152] : rg_stcc[152]) ;
  assign IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 =
	     (new_priv__h24944 == 2'b11) ? rg_mtcc[33:28] : rg_stcc[33:28] ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1107 =
	     mav_csr_write_word[63] ?
	       x__h12329[13:0] >= toBounds__h12188 :
	       x__h12329[13:0] <= toBoundsM1__h12189 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1156 =
	     mav_csr_write_word[63] ?
	       x__h12844[13:0] >= toBounds__h12719 :
	       x__h12844[13:0] <= toBoundsM1__h12720 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1225 =
	     mav_csr_write_word[63] ?
	       x__h14681[13:0] >= toBounds__h14540 :
	       x__h14681[13:0] <= toBoundsM1__h14541 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1273 =
	     mav_csr_write_word[63] ?
	       x__h15287[13:0] >= toBounds__h15162 :
	       x__h15287[13:0] <= toBoundsM1__h15163 ;
  assign IF_mav_csr_write_word_BIT_63_088_THEN_NOT_mav__ETC___d1347 =
	     mav_csr_write_word[63] ?
	       x__h16791[13:0] >= toBounds__h16680 :
	       x__h16791[13:0] <= toBoundsM1__h16681 ;
  assign IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379 =
	     result_d_addrBits__h16862[13:11] < repBound__h17087 ;
  assign IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1389 =
	     { IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379,
	       (rg_dpcc_08_BITS_37_TO_35_375_ULT_rg_dpcc_08_BI_ETC___d1376 ==
		IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379) ?
		 2'd0 :
		 ((rg_dpcc_08_BITS_37_TO_35_375_ULT_rg_dpcc_08_BI_ETC___d1376 &&
		   !IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379) ?
		    2'd1 :
		    2'd3),
	       (rg_dpcc_08_BITS_23_TO_21_373_ULT_rg_dpcc_08_BI_ETC___d1377 ==
		IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379) ?
		 2'd0 :
		 ((rg_dpcc_08_BITS_23_TO_21_373_ULT_rg_dpcc_08_BI_ETC___d1377 &&
		   !IF_rg_dpcc_08_BITS_43_TO_38_16_EQ_52_363_THEN__ETC___d1379) ?
		    2'd1 :
		    2'd3) } ;
  assign IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376 =
	     (rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 ==
	      rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
	       2'd0 :
	       ((rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 &&
		 !rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc__ETC___d2455 =
	     { (rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc_64__ETC___d2450 ==
		rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		 2'd0 :
		 ((rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc_64__ETC___d2450 &&
		   !rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376 } ;
  assign IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302 =
	     (rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 ==
	      rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
	       2'd0 :
	       ((rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 &&
		 !rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc__ETC___d2464 =
	     { (rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc_90__ETC___d2459 ==
		rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		 2'd0 :
		 ((rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc_90__ETC___d2459 &&
		   !rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297) ?
		    2'd1 :
		    2'd3),
	       IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302 } ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_474__ETC___d2581 =
	     (!access_permitted_1_csr_addr_ULT_0xC03___d2474 &&
	      access_permitted_1_csr_addr_ULE_0xC1F___d2476 ||
	      access_permitted_1_csr_addr >= 12'hB03 &&
	      access_permitted_1_csr_addr <= 12'hB1F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'h001 ||
	      access_permitted_1_csr_addr == 12'h002 ||
	      access_permitted_1_csr_addr == 12'h003 ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'h100 ||
	      access_permitted_1_csr_addr == 12'h102 ||
	      access_permitted_1_csr_addr == 12'h103 ||
	      access_permitted_1_csr_addr == 12'h104 ||
	      access_permitted_1_csr_addr == 12'h105 ||
	      access_permitted_1_csr_addr == 12'h106 ||
	      access_permitted_1_csr_addr == 12'h140 ||
	      access_permitted_1_csr_addr == 12'h141 ||
	      access_permitted_1_csr_addr == 12'h142 ||
	      access_permitted_1_csr_addr == 12'h143 ||
	      access_permitted_1_csr_addr == 12'h144 ||
	      access_permitted_1_csr_addr == 12'h180 ||
	      access_permitted_1_csr_addr == 12'h302 ||
	      access_permitted_1_csr_addr == 12'h303 ||
	      access_permitted_1_csr_addr == 12'h9C0 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3 ||
	      access_permitted_1_csr_addr == 12'h7B0 ||
	      access_permitted_1_csr_addr == 12'h7B1 ||
	      access_permitted_1_csr_addr == 12'h7B2 ||
	      access_permitted_1_csr_addr == 12'h7B3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_1_read_not_write_592_OR_a_ETC___d2607 =
	     (!access_permitted_1_read_not_write ||
	      access_permitted_1_csr_addr_ULT_0xC03___d2474 ||
	      !access_permitted_1_csr_addr_ULE_0xC1F___d2476) &&
	     access_permitted_1_csr_addr != 12'h001 &&
	     access_permitted_1_csr_addr != 12'h002 &&
	     access_permitted_1_csr_addr != 12'h003 &&
	     (access_permitted_1_csr_addr != 12'hC00 ||
	      !access_permitted_1_read_not_write) &&
	     (access_permitted_1_csr_addr != 12'hC02 ||
	      !access_permitted_1_read_not_write) ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_608__ETC___d2715 =
	     (!access_permitted_2_csr_addr_ULT_0xC03___d2608 &&
	      access_permitted_2_csr_addr_ULE_0xC1F___d2610 ||
	      access_permitted_2_csr_addr >= 12'hB03 &&
	      access_permitted_2_csr_addr <= 12'hB1F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'h001 ||
	      access_permitted_2_csr_addr == 12'h002 ||
	      access_permitted_2_csr_addr == 12'h003 ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'h100 ||
	      access_permitted_2_csr_addr == 12'h102 ||
	      access_permitted_2_csr_addr == 12'h103 ||
	      access_permitted_2_csr_addr == 12'h104 ||
	      access_permitted_2_csr_addr == 12'h105 ||
	      access_permitted_2_csr_addr == 12'h106 ||
	      access_permitted_2_csr_addr == 12'h140 ||
	      access_permitted_2_csr_addr == 12'h141 ||
	      access_permitted_2_csr_addr == 12'h142 ||
	      access_permitted_2_csr_addr == 12'h143 ||
	      access_permitted_2_csr_addr == 12'h144 ||
	      access_permitted_2_csr_addr == 12'h180 ||
	      access_permitted_2_csr_addr == 12'h302 ||
	      access_permitted_2_csr_addr == 12'h303 ||
	      access_permitted_2_csr_addr == 12'h9C0 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3 ||
	      access_permitted_2_csr_addr == 12'h7B0 ||
	      access_permitted_2_csr_addr == 12'h7B1 ||
	      access_permitted_2_csr_addr == 12'h7B2 ||
	      access_permitted_2_csr_addr == 12'h7B3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_access_permitted_2_read_not_write_724_OR_a_ETC___d2739 =
	     (!access_permitted_2_read_not_write ||
	      access_permitted_2_csr_addr_ULT_0xC03___d2608 ||
	      !access_permitted_2_csr_addr_ULE_0xC1F___d2610) &&
	     access_permitted_2_csr_addr != 12'h001 &&
	     access_permitted_2_csr_addr != 12'h002 &&
	     access_permitted_2_csr_addr != 12'h003 &&
	     (access_permitted_2_csr_addr != 12'hC00 ||
	      !access_permitted_2_read_not_write) &&
	     (access_permitted_2_csr_addr != 12'hC02 ||
	      !access_permitted_2_read_not_write) ;
  assign NOT_cfg_verbosity_read__486_ULE_1_487___d1488 =
	     cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_mv_read__94_BIT_0_872_963_OR_NOT_c_ETC___d2970 =
	     !csr_mip$mv_read[0] || !csr_mie$mv_read[0] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2877 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2878 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908 =
	     !csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2793 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2794 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935 =
	     NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2908 &&
	     NOT_csr_mip_mv_read__94_BIT_3_806_909_OR_NOT_c_ETC___d2916 &&
	     NOT_csr_mip_mv_read__94_BIT_7_817_918_OR_NOT_c_ETC___d2925 &&
	     NOT_csr_mip_mv_read__94_BIT_9_828_927_OR_NOT_c_ETC___d2934 ;
  assign NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2962 =
	     NOT_csr_mip_mv_read__94_BIT_11_788_894_OR_NOT__ETC___d2935 &&
	     NOT_csr_mip_mv_read__94_BIT_1_839_936_OR_NOT_c_ETC___d2943 &&
	     NOT_csr_mip_mv_read__94_BIT_5_850_945_OR_NOT_c_ETC___d2952 &&
	     NOT_csr_mip_mv_read__94_BIT_8_861_954_OR_NOT_c_ETC___d2961 ;
  assign NOT_csr_mip_mv_read__94_BIT_1_839_936_OR_NOT_c_ETC___d2943 =
	     !csr_mip$mv_read[1] || !csr_mie$mv_read[1] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_3_806_909_OR_NOT_c_ETC___d2916 =
	     !csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_5_850_945_OR_NOT_c_ETC___d2952 =
	     !csr_mip$mv_read[5] || !csr_mie$mv_read[5] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2855 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2856 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_7_817_918_OR_NOT_c_ETC___d2925 =
	     !csr_mip$mv_read[7] || !csr_mie$mv_read[7] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_8_861_954_OR_NOT_c_ETC___d2961 =
	     !csr_mip$mv_read[8] || !csr_mie$mv_read[8] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2866 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2867 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_mip_mv_read__94_BIT_9_828_927_OR_NOT_c_ETC___d2934 =
	     !csr_mip$mv_read[9] || !csr_mie$mv_read[9] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905) ;
  assign NOT_csr_trap_actions_nmi_161_AND_csr_trap_acti_ETC___d2277 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h27183 != 6'd0 &&
	     exc_code__h27183 != 6'd1 &&
	     exc_code__h27183 != 6'd2 &&
	     exc_code__h27183 != 6'd3 &&
	     exc_code__h27183 != 6'd4 &&
	     exc_code__h27183 != 6'd5 &&
	     exc_code__h27183 != 6'd6 &&
	     exc_code__h27183 != 6'd7 &&
	     exc_code__h27183 != 6'd8 &&
	     exc_code__h27183 != 6'd9 &&
	     exc_code__h27183 != 6'd10 &&
	     exc_code__h27183 != 6'd11 ;
  assign NOT_mav_scr_write_cap_BITS_33_TO_28_567_ULT_50_ETC___d1619 =
	     mav_scr_write_cap[33:28] >= 6'd50 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1698 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1700 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     !mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1743 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1745 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     !mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1746 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1748 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     !mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1749 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1750 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	     !mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595 =
	     x__h22023 | in__h22092[63:0] ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623 =
	     (highOffsetBits__h19525 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1616 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_567_ULT_50_ETC___d1619) &&
	     mav_scr_write_cap[52:35] == 18'd262143 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1660 =
	     (highOffsetBits__h19525 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1655 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_567_ULT_50_ETC___d1619) &&
	     (mav_scr_write_cap[52:35] == 18'd262143 ||
	      !SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[0]) ;
  assign SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 =
	     x__h7408 | in__h6908[63:0] ;
  assign SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 =
	     x__h6557 | in__h6673[63:0] ;
  assign SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 =
	     x__h6337 | in__h6453[63:0] ;
  assign SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 =
	     x__h6005 | in__h6121[63:0] ;
  assign SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 =
	     x__h5797 | in__h5913[63:0] ;
  assign _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2388 =
	     { result_d_address__h27630,
	       result_d_addrBits__h27631,
	       (new_priv__h24944 == 2'b11) ? rg_mtcc[71:0] : rg_stcc[71:0] } ;
  assign _theResult_____2__h26400 =
	     csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2176 ?
	       exc_pc___1__h26490 :
	       exc_pc__h26398 ;
  assign _theResult____h30245 = rg_mideleg[11] ? 2'b01 : 2'b11 ;
  assign _theResult____h30457 = rg_mideleg[3] ? 2'b01 : 2'b11 ;
  assign _theResult____h30669 = rg_mideleg[7] ? 2'b01 : 2'b11 ;
  assign _theResult____h30881 = rg_mideleg[9] ? 2'b01 : 2'b11 ;
  assign _theResult____h31093 = rg_mideleg[1] ? 2'b01 : 2'b11 ;
  assign _theResult____h31305 = rg_mideleg[5] ? 2'b01 : 2'b11 ;
  assign _theResult____h31517 = rg_mideleg[8] ? 2'b01 : 2'b11 ;
  assign _theResult____h31729 = rg_mideleg[0] ? 2'b01 : 2'b11 ;
  assign _theResult____h31941 = rg_mideleg[4] ? 2'b01 : 2'b11 ;
  assign _theResult___fst__h25082 =
	     (csr_trap_actions_interrupt ?
		deleg_bit___1__h25091 :
		deleg_bit___1__h25106) ?
	       2'b01 :
	       2'b11 ;
  assign _theResult___fst__h28218 =
	     { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[63:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[10:0] } ;
  assign _theResult___fst__h28419 =
	     { csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[63:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[7:0] } ;
  assign a_capFat_addrBits__h28948 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[85:72] :
	       rg_sepcc[85:72] ;
  assign a_capFat_address__h28947 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[151:86] :
	       rg_sepcc[151:86] ;
  assign a_capFat_flags__h28950 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[55] :
	       rg_sepcc[55] ;
  assign a_capFat_otype__h28952 =
	     (x__h28885 == 18'd262142) ? 18'd262143 : x__h28885 ;
  assign a_capFat_reserved__h28951 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[54:53] :
	       rg_sepcc[54:53] ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d2476 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d2474 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d2610 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d2608 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign addBase__h12493 =
	     { {48{x__h12550[15]}}, x__h12550 } << rg_stcc[33:28] ;
  assign addBase__h13002 =
	     { {48{x__h13059[15]}}, x__h13059 } << rg_sepcc[33:28] ;
  assign addBase__h14839 =
	     { {48{x__h14896[15]}}, x__h14896 } << rg_mtcc[33:28] ;
  assign addBase__h15445 =
	     { {48{x__h15502[15]}}, x__h15502 } << rg_mepcc[33:28] ;
  assign addBase__h16881 =
	     { {48{base__h7395[15]}}, base__h7395 } << rg_dpcc[43:38] ;
  assign addBase__h21089 =
	     { {48{x__h21146[15]}}, x__h21146 } << mav_scr_write_cap[33:28] ;
  assign addBase__h27662 =
	     { {48{x__h27719[15]}}, x__h27719 } <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 ;
  assign addTop__h21211 =
	     { {50{x__h21301[15]}}, x__h21301 } << mav_scr_write_cap[33:28] ;
  assign b__h25169 = csr_mstatus_rg_mstatus[ie_to_x__h25070] ;
  assign b__h28255 = csr_mstatus_rg_mstatus[pie_from_x__h28203] ;
  assign base__h23835 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[23:10] } ;
  assign base__h7395 = { rg_dpcc[1:0], rg_dpcc[23:10] } ;
  assign bot__h12496 =
	     { rg_stcc[149:100] & highBitsfilter__h12178, 14'd0 } +
	     addBase__h12493 ;
  assign bot__h13005 =
	     { rg_sepcc[149:100] & highBitsfilter__h12709, 14'd0 } +
	     addBase__h13002 ;
  assign bot__h14842 =
	     { rg_mtcc[149:100] & highBitsfilter__h14530, 14'd0 } +
	     addBase__h14839 ;
  assign bot__h15448 =
	     { rg_mepcc[149:100] & highBitsfilter__h15152, 14'd0 } +
	     addBase__h15445 ;
  assign bot__h16884 =
	     { rg_dpcc[159:110] & highBitsfilter__h16670, 14'd0 } +
	     addBase__h16881 ;
  assign bot__h21092 =
	     { mav_scr_write_cap[149:100] & mask__h21090, 14'd0 } +
	     addBase__h21089 ;
  assign bot__h27665 =
	     { x__h27672[63:14] & highBitsfilter__h27360, 14'd0 } +
	     addBase__h27662 ;
  assign capUnpacked_capFat_addrBits__h19268 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h19247[12:0] } :
	       newAddrBits__h19247[13:0] ;
  assign capUnpacked_capFat_addrBits__h19919 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h19898[12:0] } :
	       newAddrBits__h19898[13:0] ;
  assign capUnpacked_capFat_address__h19267 =
	     { 2'd0, bot__h21092 } + { 2'd0, offsetAddr__h18845 } ;
  assign capUnpacked_capFat_address__h19918 =
	     { 2'd0, bot__h21092 } + { 2'd0, offsetAddr__h19521 } ;
  assign csr_mip_mv_read__94_BIT_0_872_AND_csr_mie_mv_r_ETC___d2881 =
	     csr_mip$mv_read[0] && csr_mie$mv_read[0] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2877 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2878 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2805 =
	     csr_mip$mv_read[11] && csr_mie$mv_read[11] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2793 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2794 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2871 =
	     csr_mip_mv_read__94_BIT_11_788_AND_csr_mie_mv__ETC___d2805 ||
	     csr_mip_mv_read__94_BIT_3_806_AND_csr_mie_mv_r_ETC___d2815 ||
	     csr_mip_mv_read__94_BIT_7_817_AND_csr_mie_mv_r_ETC___d2826 ||
	     csr_mip_mv_read__94_BIT_9_828_AND_csr_mie_mv_r_ETC___d2837 ||
	     csr_mip_mv_read__94_BIT_1_839_AND_csr_mie_mv_r_ETC___d2848 ||
	     csr_mip_mv_read__94_BIT_5_850_AND_csr_mie_mv_r_ETC___d2859 ||
	     csr_mip_mv_read__94_BIT_8_861_AND_csr_mie_mv_r_ETC___d2870 ;
  assign csr_mip_mv_read__94_BIT_1_839_AND_csr_mie_mv_r_ETC___d2848 =
	     csr_mip$mv_read[1] && csr_mie$mv_read[1] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_3_806_AND_csr_mie_mv_r_ETC___d2815 =
	     csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_4_883_AND_csr_mie_mv_r_ETC___d2892 =
	     csr_mip$mv_read[4] && csr_mie$mv_read[4] &&
	     (interrupt_pending_cur_priv < _theResult____h31941 ||
	      interrupt_pending_cur_priv == _theResult____h31941 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_5_850_AND_csr_mie_mv_r_ETC___d2859 =
	     csr_mip$mv_read[5] && csr_mie$mv_read[5] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2855 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2856 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_7_817_AND_csr_mie_mv_r_ETC___d2826 =
	     csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_8_861_AND_csr_mie_mv_r_ETC___d2870 =
	     csr_mip$mv_read[8] && csr_mie$mv_read[8] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2866 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2867 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mip_mv_read__94_BIT_9_828_AND_csr_mie_mv_r_ETC___d2837 =
	     csr_mip$mv_read[9] && csr_mie$mv_read[9] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802) ;
  assign csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404 =
	     x__h28251 | mask__h28239 ;
  assign csr_mstatus_rg_mstatus_45_AND_INV_1_SL_1_CONCA_ETC___d2135 =
	     x__h25165 | val__h25154 ;
  assign csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2176 =
	     csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	     CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2328 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h27183 != 6'd0 &&
	     exc_code__h27183 != 6'd1 &&
	     exc_code__h27183 != 6'd2 &&
	     exc_code__h27183 != 6'd3 &&
	     exc_code__h27183 != 6'd4 &&
	     exc_code__h27183 != 6'd5 &&
	     exc_code__h27183 != 6'd6 &&
	     exc_code__h27183 != 6'd7 &&
	     exc_code__h27183 != 6'd8 &&
	     exc_code__h27183 != 6'd9 &&
	     exc_code__h27183 != 6'd11 &&
	     exc_code__h27183 != 6'd12 &&
	     exc_code__h27183 != 6'd13 &&
	     exc_code__h27183 != 6'd15 ;
  assign dcsr__h7238 = { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] } ;
  assign deleg_bit___1__h25091 = rg_mideleg[csr_trap_actions_exc_code[3:0]] ;
  assign deleg_bit___1__h25106 = rg_medeleg[csr_trap_actions_exc_code[4:0]] ;
  assign exc_code__h27183 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h26490 = exc_pc__h26398 + vector_offset__h26399 ;
  assign exc_pc__h26398 =
	     csr_trap_actions_nmi ?
	       rg_nmi_vector :
	       y_avValue_snd_snd_snd__h26452 ;
  assign fixed_up_val_23__h11006 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd3,
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h11586 =
	     { csr_mstatus_rg_mstatus[22:20],
	       mav_csr_write_word[19:18],
	       csr_mstatus_rg_mstatus[17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037,
	       csr_mstatus_rg_mstatus[10:9],
	       mav_csr_write_word[8],
	       csr_mstatus_rg_mstatus[7:6],
	       mav_csr_write_word[5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:2],
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign fixed_up_val_23__h13967 =
	     { mav_csr_write_word[22:17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       (mav_csr_write_word[12:11] == 2'b10) ?
		 2'b01 :
		 mav_csr_write_word[12:11],
	       mav_csr_write_word[10:5],
	       1'd0,
	       mav_csr_write_word[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h22606 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       mv_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h23160 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       ma_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_45_BITS_12_TO_11_035_ETC___d1037,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h24993 =
	     { IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[22:17],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[14:13],
	       (IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[12:11],
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[10:5],
	       1'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h28125 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[22:17],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[14:13],
	       (IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[12:11],
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[10:5],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[3:1],
	       1'd0 } ;
  assign highBitsfilter__h12178 = 50'h3FFFFFFFFFFFF << rg_stcc[33:28] ;
  assign highBitsfilter__h12709 = 50'h3FFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign highBitsfilter__h14530 = 50'h3FFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign highBitsfilter__h15152 = 50'h3FFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign highBitsfilter__h16670 = 50'h3FFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign highBitsfilter__h27360 =
	     50'h3FFFFFFFFFFFF <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 ;
  assign highOffsetBits__h12179 = x__h16698 & highBitsfilter__h12178 ;
  assign highOffsetBits__h12710 = x__h16698 & highBitsfilter__h12709 ;
  assign highOffsetBits__h14531 = x__h16698 & highBitsfilter__h14530 ;
  assign highOffsetBits__h15153 = x__h16698 & highBitsfilter__h15152 ;
  assign highOffsetBits__h16671 = x__h16698 & highBitsfilter__h16670 ;
  assign highOffsetBits__h19525 = x__h19552 & mask__h21090 ;
  assign highOffsetBits__h27361 = x__h27388 & highBitsfilter__h27360 ;
  assign ie_from_x__h28202 = { 4'd0, csr_ret_actions_from_priv } ;
  assign ie_to_x__h25070 = { 4'd0, new_priv__h24944 } ;
  assign in__h22092 = mav_scr_write_cap[151:86] & y__h22109 ;
  assign in__h23957 = csr_trap_actions_pcc[161:96] & y__h23974 ;
  assign in__h5913 = rg_stcc[151:86] & y__h5930 ;
  assign in__h6121 = rg_sepcc[151:86] & y__h6138 ;
  assign in__h6453 = rg_mtcc[151:86] & y__h6470 ;
  assign in__h6673 = rg_mepcc[151:86] & y__h6690 ;
  assign in__h6908 = rg_dpcc[161:96] & y__h6925 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2794 =
	     interrupt_pending_cur_priv == _theResult____h30245 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2812 =
	     interrupt_pending_cur_priv == _theResult____h30457 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2823 =
	     interrupt_pending_cur_priv == _theResult____h30669 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2834 =
	     interrupt_pending_cur_priv == _theResult____h30881 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2845 =
	     interrupt_pending_cur_priv == _theResult____h31093 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2856 =
	     interrupt_pending_cur_priv == _theResult____h31305 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2867 =
	     interrupt_pending_cur_priv == _theResult____h31517 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_27_ETC___d2878 =
	     interrupt_pending_cur_priv == _theResult____h31729 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2793 =
	     interrupt_pending_cur_priv < _theResult____h30245 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2811 =
	     interrupt_pending_cur_priv < _theResult____h30457 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2822 =
	     interrupt_pending_cur_priv < _theResult____h30669 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2833 =
	     interrupt_pending_cur_priv < _theResult____h30881 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2844 =
	     interrupt_pending_cur_priv < _theResult____h31093 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2855 =
	     interrupt_pending_cur_priv < _theResult____h31305 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2866 =
	     interrupt_pending_cur_priv < _theResult____h31517 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d2877 =
	     interrupt_pending_cur_priv < _theResult____h31729 ;
  assign length__h21919 = { 50'd0, x__h21924 } << mav_scr_write_cap[33:28] ;
  assign mask__h21090 = 50'h3FFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h21212 = 52'hFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h25153 = 64'd1 << ie_to_x__h25070 ;
  assign mask__h25170 = 64'd1 << pie_to_x__h25071 ;
  assign mask__h28239 = 64'd1 << pie_from_x__h28203 ;
  assign mask__h28256 = 64'd1 << ie_from_x__h28202 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d1015 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d1011 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1484 =
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr != 12'h001 &&
	     mav_csr_write_csr_addr != 12'h002 &&
	     mav_csr_write_csr_addr != 12'h003 &&
	     mav_csr_write_csr_addr != 12'h100 &&
	     mav_csr_write_csr_addr != 12'h102 &&
	     mav_csr_write_csr_addr != 12'h103 &&
	     mav_csr_write_csr_addr != 12'h104 &&
	     mav_csr_write_csr_addr != 12'h105 &&
	     mav_csr_write_csr_addr != 12'h106 &&
	     mav_csr_write_csr_addr != 12'h140 &&
	     mav_csr_write_csr_addr != 12'h141 &&
	     mav_csr_write_csr_addr != 12'h142 &&
	     mav_csr_write_csr_addr != 12'h143 &&
	     mav_csr_write_csr_addr != 12'h144 &&
	     mav_csr_write_csr_addr != 12'h180 &&
	     mav_csr_write_csr_addr != 12'h302 &&
	     mav_csr_write_csr_addr != 12'h303 &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 &&
	     mav_csr_write_csr_addr != 12'h7B0 &&
	     mav_csr_write_csr_addr != 12'h7B1 &&
	     mav_csr_write_csr_addr != 12'h7B2 &&
	     mav_csr_write_csr_addr != 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0x323___d1014 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1022 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1031 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003 ||
	      mav_csr_write_csr_addr == 12'h100 ||
	      mav_csr_write_csr_addr == 12'h300) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1079 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1084 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h104 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1086 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h105 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1138 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h140 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1140 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h141 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1187 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h142 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1191 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h143 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1193 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h144 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1195 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h180 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1197 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h302 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1206 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h303 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1209 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h304 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1211 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1255 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1257 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h340 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1259 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1303 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1305 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1307 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h344 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1311 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'hB02 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1313 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1315 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1319 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1321 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1323 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1333 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1393 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1395 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     mav_csr_write_csr_addr == 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_010_OR_NOT_ma_ETC___d1560 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1014 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1015) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d1010 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_csr_write_word_BITS_14_TO_13_044_EQ_0x3_04_ETC___d1075 =
	     { sd__h13966,
	       40'd5120,
	       (mav_csr_write_csr_addr == 12'h100) ?
		 fixed_up_val_23__h11586 :
		 fixed_up_val_23__h13967 } ;
  assign mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577 =
	     mav_scr_write_cap[13:11] < repBound__h22150 ;
  assign mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2 =
	     mav_scr_write_cap[149:100] +
	     ({ {48{x__h22230[1]}}, x__h22230 } << mav_scr_write_cap[33:28]) ;
  assign mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717 =
	     { mav_scr_write_cap[151:100] & mask__h21212, 14'd0 } +
	     addTop__h21211 ;
  assign mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709 =
	     mav_scr_write_cap[27:25] < repBound__h22150 ;
  assign mav_scr_write_cap_BITS_33_TO_28_567_ULT_51_703_ETC___d1730 =
	     mav_scr_write_cap[33:28] < 6'd51 &&
	     mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717[64:63] -
	     { 1'd0, x__h21395 } >
	     2'd1 ;
  assign mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579 =
	     mav_scr_write_cap[85:83] < repBound__h22150 ;
  assign newAddrBits__h12453 =
	     { 2'd0, rg_stcc[13:0] } + { 2'd0, x__h12329[13:0] } ;
  assign newAddrBits__h12962 =
	     { 2'd0, rg_sepcc[13:0] } + { 2'd0, x__h12844[13:0] } ;
  assign newAddrBits__h14799 =
	     { 2'd0, rg_mtcc[13:0] } + { 2'd0, x__h14681[13:0] } ;
  assign newAddrBits__h15405 =
	     { 2'd0, rg_mepcc[13:0] } + { 2'd0, x__h15287[13:0] } ;
  assign newAddrBits__h16850 =
	     { 2'd0, rg_dpcc[23:10] } + { 2'd0, x__h16791[13:0] } ;
  assign newAddrBits__h19247 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h19103[13:0] } ;
  assign newAddrBits__h19898 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h19779[13:0] } ;
  assign newAddrBits__h27619 =
	     { 2'd0, x__h27590 } + { 2'd0, x__h27560[13:0] } ;
  assign new_csr_value__h16278 = { 4'd0, mav_csr_write_word[59:0] } ;
  assign new_dcsr__h16382 =
	     { rg_dcsr[31:16],
	       mav_csr_write_word[15:9],
	       rg_dcsr[8:5],
	       mav_csr_write_word[4],
	       rg_dcsr[3],
	       mav_csr_write_word[2:0] } ;
  assign new_priv__h24944 =
	     csr_trap_actions_nmi ?
	       2'b11 :
	       ((csr_trap_actions_from_priv == 2'b11) ?
		  csr_trap_actions_from_priv :
		  _theResult___fst__h25082) ;
  assign offsetAddr__h14527 =
	     { mav_csr_write_word[63:2], 1'b0, mav_csr_write_word[0] } ;
  assign offsetAddr__h15149 = { mav_csr_write_word[63:1], 1'd0 } ;
  assign offsetAddr__h18845 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63:1],
	       1'd0 } ;
  assign offsetAddr__h19521 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63:2],
	       1'b0,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[0] } ;
  assign offset__h22011 = { 2'd0, mav_scr_write_cap[85:72] } - x__h21146 ;
  assign offset__h23836 =
	     { 2'd0, csr_trap_actions_pcc[95:82] } - base__h23835 ;
  assign offset__h5785 = { 2'd0, rg_stcc[85:72] } - x__h12550 ;
  assign offset__h5993 = { 2'd0, rg_sepcc[85:72] } - x__h13059 ;
  assign offset__h6325 = { 2'd0, rg_mtcc[85:72] } - x__h14896 ;
  assign offset__h6545 = { 2'd0, rg_mepcc[85:72] } - x__h15502 ;
  assign offset__h7396 = { 2'd0, rg_dpcc[95:82] } - base__h7395 ;
  assign pie_from_x__h28203 = { 4'd1, csr_ret_actions_from_priv } ;
  assign pie_to_x__h25071 = { 4'd1, new_priv__h24944 } ;
  assign repBound__h17087 = rg_dpcc[23:21] - 3'b001 ;
  assign repBound__h22150 = mav_scr_write_cap[13:11] - 3'b001 ;
  assign repBound__h4842 = soc_map$m_pcc_reset_value[13:11] - 3'b001 ;
  assign repBound__h5835 = rg_stcc[13:11] - 3'b001 ;
  assign repBound__h6043 = rg_sepcc[13:11] - 3'b001 ;
  assign repBound__h6375 = rg_mtcc[13:11] - 3'b001 ;
  assign repBound__h6595 = rg_mepcc[13:11] - 3'b001 ;
  assign result__h21859 =
	     { 1'd0,
	       ~mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717[64],
	       mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717[63:0] } ;
  assign result_d_addrBits__h16862 =
	     (rg_dpcc[43:38] == 6'd52) ?
	       { 1'b0, newAddrBits__h16850[12:0] } :
	       newAddrBits__h16850[13:0] ;
  assign result_d_addrBits__h27631 =
	     (IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 ==
	      6'd52) ?
	       { 1'b0, newAddrBits__h27619[12:0] } :
	       newAddrBits__h27619[13:0] ;
  assign result_d_address__h16861 =
	     { 2'd0, bot__h16884 } + { 2'd0, mav_csr_write_word } ;
  assign result_d_address__h27630 =
	     { 2'd0, bot__h27665 } + { 2'd0, _theResult_____2__h26400 } ;
  assign ret__h21215 =
	     { 1'd0,
	       mav_scr_write_cap_BITS_151_TO_100_704_AND_4503_ETC___d1717[64:0] } ;
  assign rg_dpcc_08_BITS_23_TO_21_373_ULT_rg_dpcc_08_BI_ETC___d1377 =
	     rg_dpcc[23:21] < repBound__h17087 ;
  assign rg_dpcc_08_BITS_37_TO_35_375_ULT_rg_dpcc_08_BI_ETC___d1376 =
	     rg_dpcc[37:35] < repBound__h17087 ;
  assign rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_64_B_ETC___d369 =
	     rg_mepcc[13:11] < repBound__h6595 ;
  assign rg_mepcc_64_BITS_27_TO_25_449_ULT_rg_mepcc_64__ETC___d2450 =
	     rg_mepcc[27:25] < repBound__h6595 ;
  assign rg_mepcc_64_BITS_85_TO_83_70_ULT_rg_mepcc_64_B_ETC___d371 =
	     rg_mepcc[85:83] < repBound__h6595 ;
  assign rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 =
	     rg_mtcc[13:11] < repBound__h6375 ;
  assign rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340 =
	     rg_mtcc[85:83] < repBound__h6375 ;
  assign rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_90_B_ETC___d295 =
	     rg_sepcc[13:11] < repBound__h6043 ;
  assign rg_sepcc_90_BITS_27_TO_25_458_ULT_rg_sepcc_90__ETC___d2459 =
	     rg_sepcc[27:25] < repBound__h6043 ;
  assign rg_sepcc_90_BITS_85_TO_83_96_ULT_rg_sepcc_90_B_ETC___d297 =
	     rg_sepcc[85:83] < repBound__h6043 ;
  assign rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 =
	     rg_stcc[13:11] < repBound__h5835 ;
  assign rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268 =
	     rg_stcc[85:83] < repBound__h5835 ;
  assign sd__h13966 = mav_csr_write_word[14:13] == 2'h3 ;
  assign sd__h22605 = mv_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h23159 = ma_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h24992 =
	     IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[14:13] ==
	     2'h3 ;
  assign sd__h28124 =
	     IF_csr_ret_actions_from_priv_EQ_0b11_391_THEN__ETC___d2411[14:13] ==
	     2'h3 ;
  assign signBits__h16668 = {50{mav_csr_write_word[63]}} ;
  assign signBits__h19522 =
	     {50{SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63]}} ;
  assign signBits__h27358 = {50{_theResult_____2__h26400[63]}} ;
  assign soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 =
	     soc_map$m_pcc_reset_value[13:11] < repBound__h4842 ;
  assign soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 =
	     soc_map$m_pcc_reset_value[27:25] < repBound__h4842 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12 =
	     soc_map$m_pcc_reset_value[85:83] < repBound__h4842 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 =
	     { soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12,
	       (soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3),
	       (soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3) } ;
  assign toBoundsM1__h12189 = { 3'b110, ~rg_stcc[10:0] } ;
  assign toBoundsM1__h12720 = { 3'b110, ~rg_sepcc[10:0] } ;
  assign toBoundsM1__h14541 = { 3'b110, ~rg_mtcc[10:0] } ;
  assign toBoundsM1__h15163 = { 3'b110, ~rg_mepcc[10:0] } ;
  assign toBoundsM1__h16681 = { 3'b110, ~rg_dpcc[20:10] } ;
  assign toBoundsM1__h20272 = { 3'b110, ~mav_scr_write_cap[10:0] } ;
  assign toBoundsM1__h27371 = { 3'b110, ~x__h27590[10:0] } ;
  assign toBounds__h12188 = 14'd14336 - { 3'b0, rg_stcc[10:0] } ;
  assign toBounds__h12719 = 14'd14336 - { 3'b0, rg_sepcc[10:0] } ;
  assign toBounds__h14540 = 14'd14336 - { 3'b0, rg_mtcc[10:0] } ;
  assign toBounds__h15162 = 14'd14336 - { 3'b0, rg_mepcc[10:0] } ;
  assign toBounds__h16680 = 14'd14336 - { 3'b0, rg_dpcc[20:10] } ;
  assign toBounds__h20271 = 14'd14336 - { 3'b0, mav_scr_write_cap[10:0] } ;
  assign toBounds__h27370 = 14'd14336 - { 3'b0, x__h27590[10:0] } ;
  assign to_y__h28418 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_45_AND_INV_1_SL_0_CONCA_ETC___d2404[8] } ;
  assign v__h11535 =
	     { sd__h13966,
	       43'd8192,
	       mav_csr_write_word[19:18],
	       3'd0,
	       mav_csr_write_word[14:13],
	       4'd0,
	       mav_csr_write_word[8],
	       2'd0,
	       mav_csr_write_word[5],
	       3'd0,
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign v__h13767 =
	     { 35'd0,
	       mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign v__h13879 = { 52'd0, mav_csr_write_word[11:0] } ;
  assign v__h15591 =
	     { mav_csr_write_word[63], 57'd0, mav_csr_write_word[5:0] } ;
  assign v__h16379 = { 32'd0, new_dcsr__h16382 } ;
  assign v__h24949 = { sd__h24992, 40'd5120, fixed_up_val_23__h24993 } ;
  assign val__h25154 = 64'd0 << ie_to_x__h25070 ;
  assign val__h25171 = { 63'd0, b__h25169 } << pie_to_x__h25071 ;
  assign val__h28257 = { 63'd0, b__h28255 } << ie_from_x__h28202 ;
  assign vector_offset__h26399 = { 56'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h10965 = { 41'h10000001400, fixed_up_val_23__h11006 } ;
  assign wordxl1__h13926 = { sd__h13966, 40'd5120, fixed_up_val_23__h13967 } ;
  assign x1_avValue_addrBits__h20144 =
	     (x__h19503 == 2'd0) ?
	       capUnpacked_capFat_addrBits__h19919 :
	       14'd0 ;
  assign x1_avValue_address__h20143 =
	     (x__h19503 == 2'd0) ?
	       capUnpacked_capFat_address__h19918 :
	       66'd0 ;
  assign x1_avValue_flags__h20146 =
	     x__h19503 == 2'd0 && mav_scr_write_cap[55] ;
  assign x1_avValue_otype__h20148 =
	     (x__h19503 == 2'd0) ? mav_scr_write_cap[52:35] : 18'd262143 ;
  assign x1_avValue_perms_soft__h22325 =
	     (x__h19503 == 2'd0) ? mav_scr_write_cap[71:68] : 4'd0 ;
  assign x1_avValue_reserved__h20147 =
	     (x__h19503 == 2'd0) ? mav_scr_write_cap[54:53] : 2'd0 ;
  assign x__h12329 = offsetAddr__h14527 >> rg_stcc[33:28] ;
  assign x__h12550 =
	     { (rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 ==
		rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268) ?
		 2'd0 :
		 ((rg_stcc_61_BITS_13_TO_11_64_ULT_rg_stcc_61_BIT_ETC___d266 &&
		   !rg_stcc_61_BITS_85_TO_83_67_ULT_rg_stcc_61_BIT_ETC___d268) ?
		    2'd1 :
		    2'd3),
	       rg_stcc[13:0] } ;
  assign x__h12844 = offsetAddr__h15149 >> rg_sepcc[33:28] ;
  assign x__h13059 =
	     { IF_rg_sepcc_90_BITS_13_TO_11_93_ULT_rg_sepcc_9_ETC___d302,
	       rg_sepcc[13:0] } ;
  assign x__h14681 = offsetAddr__h14527 >> rg_mtcc[33:28] ;
  assign x__h14896 =
	     { (rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 ==
		rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340) ?
		 2'd0 :
		 ((rg_mtcc_33_BITS_13_TO_11_36_ULT_rg_mtcc_33_BIT_ETC___d338 &&
		   !rg_mtcc_33_BITS_85_TO_83_39_ULT_rg_mtcc_33_BIT_ETC___d340) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[13:0] } ;
  assign x__h15287 = offsetAddr__h15149 >> rg_mepcc[33:28] ;
  assign x__h15502 =
	     { IF_rg_mepcc_64_BITS_13_TO_11_67_ULT_rg_mepcc_6_ETC___d376,
	       rg_mepcc[13:0] } ;
  assign x__h16698 = mav_csr_write_word[63:14] ^ signBits__h16668 ;
  assign x__h16791 = mav_csr_write_word >> rg_dpcc[43:38] ;
  assign x__h19103 = offsetAddr__h18845 >> mav_scr_write_cap[33:28] ;
  assign x__h19503 =
	     (mav_scr_write_cap[33:28] == 6'd0) ?
	       mav_scr_write_cap[1:0] :
	       2'b0 ;
  assign x__h19552 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595[63:14] ^
	     signBits__h19522 ;
  assign x__h19779 = offsetAddr__h19521 >> mav_scr_write_cap[33:28] ;
  assign x__h21146 = { x__h22230, mav_scr_write_cap[13:0] } ;
  assign x__h21301 = { x__h22211, mav_scr_write_cap[27:14] } ;
  assign x__h21395 =
	     (mav_scr_write_cap[33:28] == 6'd50) ?
	       mav_scr_write_cap[13] :
	       mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2[49] ;
  assign x__h21924 = x__h21301 - x__h21146 ;
  assign x__h22023 = x__h22025 << mav_scr_write_cap[33:28] ;
  assign x__h22025 = { {48{offset__h22011[15]}}, offset__h22011 } ;
  assign x__h22110 = 66'h3FFFFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign x__h22211 =
	     (mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709 ==
	      mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_27_TO_25_708_ULT_mav_sc_ETC___d1709 &&
		 !mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579) ?
		  2'd1 :
		  2'd3) ;
  assign x__h22230 =
	     (mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577 ==
	      mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_13_TO_11_575_ULT_mav_sc_ETC___d1577 &&
		 !mav_scr_write_cap_BITS_85_TO_83_578_ULT_mav_sc_ETC___d1579) ?
		  2'd1 :
		  2'd3) ;
  assign x__h23848 = x__h23850 << csr_trap_actions_pcc[43:38] ;
  assign x__h23850 = { {48{offset__h23836[15]}}, offset__h23836 } ;
  assign x__h23975 = 66'h3FFFFFFFFFFFFFFFF << csr_trap_actions_pcc[43:38] ;
  assign x__h25152 = x__h25182 | val__h25171 ;
  assign x__h25165 = x__h25152 & y__h25166 ;
  assign x__h25182 = csr_mstatus_rg_mstatus & y__h25183 ;
  assign x__h27388 = _theResult_____2__h26400[63:14] ^ signBits__h27358 ;
  assign x__h27560 =
	     _theResult_____2__h26400 >>
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2336 ;
  assign x__h27590 =
	     (new_priv__h24944 == 2'b11) ? rg_mtcc[13:0] : rg_stcc[13:0] ;
  assign x__h27672 =
	     (new_priv__h24944 == 2'b11) ? rg_mtcc[151:86] : rg_stcc[151:86] ;
  assign x__h27719 = (new_priv__h24944 == 2'b11) ? x__h14896 : x__h12550 ;
  assign x__h28064 =
	     (csr_trap_actions_nmi || new_priv__h24944 == 2'b11) ?
	       v__h24949 :
	       y_avValue_fst__h26370 ;
  assign x__h28065 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       57'd0,
	       exc_code__h27183 } ;
  assign x__h28238 = x__h28268 | val__h28257 ;
  assign x__h28251 = x__h28238 & y__h28252 ;
  assign x__h28268 = csr_mstatus_rg_mstatus & y__h28269 ;
  assign x__h28885 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[52:35] :
	       rg_sepcc[52:35] ;
  assign x__h5797 = x__h5799 << rg_stcc[33:28] ;
  assign x__h5799 = { {48{offset__h5785[15]}}, offset__h5785 } ;
  assign x__h5931 = 66'h3FFFFFFFFFFFFFFFF << rg_stcc[33:28] ;
  assign x__h6005 = x__h6007 << rg_sepcc[33:28] ;
  assign x__h6007 = { {48{offset__h5993[15]}}, offset__h5993 } ;
  assign x__h6139 = 66'h3FFFFFFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign x__h6337 = x__h6339 << rg_mtcc[33:28] ;
  assign x__h6339 = { {48{offset__h6325[15]}}, offset__h6325 } ;
  assign x__h6471 = 66'h3FFFFFFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign x__h6557 = x__h6559 << rg_mepcc[33:28] ;
  assign x__h6559 = { {48{offset__h6545[15]}}, offset__h6545 } ;
  assign x__h6691 = 66'h3FFFFFFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign x__h6926 = 66'h3FFFFFFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign x__h7343 = { rg_sccsr, 5'd3 } ;
  assign x__h7361 = { rg_mccsr, 5'd3 } ;
  assign x__h7408 = x__h7410 << rg_dpcc[43:38] ;
  assign x__h7410 = { {48{offset__h7396[15]}}, offset__h7396 } ;
  assign x__h9349 =
	     (!mav_csr_write_csr_addr_ULT_0xB03___d1010 &&
	      mav_csr_write_csr_addr_ULE_0xB1F___d1011 ||
	      !mav_csr_write_csr_addr_ULT_0x323___d1014 &&
	      mav_csr_write_csr_addr_ULE_0x33F___d1015) ?
	       64'd0 :
	       y_avValue_fst__h17524 ;
  assign x_addrBits__h12474 =
	     (rg_stcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h12453[12:0] } :
	       newAddrBits__h12453[13:0] ;
  assign x_addrBits__h12983 =
	     (rg_sepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h12962[12:0] } :
	       newAddrBits__h12962[13:0] ;
  assign x_addrBits__h14820 =
	     (rg_mtcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h14799[12:0] } :
	       newAddrBits__h14799[13:0] ;
  assign x_addrBits__h15426 =
	     (rg_mepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h15405[12:0] } :
	       newAddrBits__h15405[13:0] ;
  assign x_address__h12473 =
	     { 2'd0, bot__h12496 } + { 2'd0, offsetAddr__h14527 } ;
  assign x_address__h12982 =
	     { 2'd0, bot__h13005 } + { 2'd0, offsetAddr__h15149 } ;
  assign x_address__h14819 =
	     { 2'd0, bot__h14842 } + { 2'd0, offsetAddr__h14527 } ;
  assign x_address__h15425 =
	     { 2'd0, bot__h15448 } + { 2'd0, offsetAddr__h15149 } ;
  assign y__h22109 = ~x__h22110 ;
  assign y__h23974 = ~x__h23975 ;
  assign y__h25166 = ~mask__h25153 ;
  assign y__h25183 = ~mask__h25170 ;
  assign y__h28252 = ~mask__h28239 ;
  assign y__h28269 = ~mask__h28256 ;
  assign y__h5930 = ~x__h5931 ;
  assign y__h6138 = ~x__h6139 ;
  assign y__h6470 = ~x__h6471 ;
  assign y__h6690 = ~x__h6691 ;
  assign y__h6925 = ~x__h6926 ;
  assign y_avValue_fst__h17256 = { 59'd0, mav_csr_write_word[4:0] } ;
  assign y_avValue_fst__h17261 = { 61'd0, mav_csr_write_word[2:0] } ;
  assign y_avValue_fst__h17266 = { 56'd0, mav_csr_write_word[7:0] } ;
  assign y_avValue_fst__h26352 =
	     { sd__h24992,
	       43'd8192,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[19:18],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[14:13],
	       4'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[8],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[5],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2143[1],
	       1'd0 } ;
  assign y_avValue_fst__h26370 =
	     (new_priv__h24944 == 2'b01) ? y_avValue_fst__h26352 : v__h24949 ;
  assign y_avValue_snd_snd_snd__h26452 =
	     { CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1,
	       2'd0 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  y_avValue_fst__h17256 or
	  y_avValue_fst__h17261 or
	  y_avValue_fst__h17266 or
	  v__h11535 or
	  csr_mie$mav_sie_write or
	  offsetAddr__h14527 or
	  offsetAddr__h15149 or
	  v__h15591 or
	  csr_mip$mav_sip_write or
	  wordxl1__h13926 or
	  v__h13767 or
	  v__h13879 or
	  csr_mie$mav_write or
	  csr_mip$mav_write or new_csr_value__h16278 or v__h16379)
  begin
    case (mav_csr_write_csr_addr)
      12'h001: y_avValue_fst__h17524 = y_avValue_fst__h17256;
      12'h002, 12'h306: y_avValue_fst__h17524 = y_avValue_fst__h17261;
      12'h003: y_avValue_fst__h17524 = y_avValue_fst__h17266;
      12'h100: y_avValue_fst__h17524 = v__h11535;
      12'h102, 12'h103, 12'h106, 12'h7A0, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  y_avValue_fst__h17524 = 64'd0;
      12'h104: y_avValue_fst__h17524 = csr_mie$mav_sie_write;
      12'h105, 12'h305: y_avValue_fst__h17524 = offsetAddr__h14527;
      12'h140,
      12'h143,
      12'h180,
      12'h340,
      12'h343,
      12'h7A2,
      12'h7A3,
      12'hB00,
      12'hB02:
	  y_avValue_fst__h17524 = mav_csr_write_word;
      12'h141, 12'h341: y_avValue_fst__h17524 = offsetAddr__h15149;
      12'h142, 12'h342: y_avValue_fst__h17524 = v__h15591;
      12'h144: y_avValue_fst__h17524 = csr_mip$mav_sip_write;
      12'h300: y_avValue_fst__h17524 = wordxl1__h13926;
      12'h301: y_avValue_fst__h17524 = 64'h800000000014112D;
      12'h302: y_avValue_fst__h17524 = v__h13767;
      12'h303: y_avValue_fst__h17524 = v__h13879;
      12'h304: y_avValue_fst__h17524 = csr_mie$mav_write;
      12'h344: y_avValue_fst__h17524 = csr_mip$mav_write;
      12'h7A1: y_avValue_fst__h17524 = new_csr_value__h16278;
      12'h7B0: y_avValue_fst__h17524 = v__h16379;
      default: y_avValue_fst__h17524 = mav_csr_write_word;
    endcase
  end
  always@(new_priv__h24944 or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285)
  begin
    case (new_priv__h24944)
      2'b01:
	  CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2];
      2'b11:
	  CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2];
      default: CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
		   SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  capUnpacked_capFat_addrBits__h19268 or x1_avValue_addrBits__h20144)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821 =
	      mav_scr_write_cap[85:72];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821 =
	      capUnpacked_capFat_addrBits__h19268;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821 =
	      x1_avValue_addrBits__h20144;
      default: IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1821 =
		   14'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1660 or
	  x__h19503 or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807 =
	      mav_scr_write_cap[152];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807 =
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1660 &&
	      mav_scr_write_cap[152];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807 =
	      x__h19503 == 2'd0 &&
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1623 &&
	      mav_scr_write_cap[152];
      default: IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1807 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[152];
    endcase
  end
  always@(new_priv__h24944 or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285)
  begin
    case (new_priv__h24944)
      2'b01:
	  CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0];
      2'b11:
	  CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0];
      default: CASE_new_priv4944_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
		   SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802 =
	      csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802 =
	      csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2802 =
		   interrupt_pending_cur_priv == 2'b11 &&
		   csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905 =
	      !csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905 =
	      !csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_795_THEN__ETC___d2905 =
		   interrupt_pending_cur_priv != 2'b11 ||
		   !csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[71:68];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 = 4'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[55];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[55];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
	      mav_scr_write_cap[54:53];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 = 2'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
	      mav_scr_write_cap[52:35];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
		   18'd262143;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
	      mav_scr_write_cap[34];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[34];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      mav_scr_write_cap[33:0];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
		   34'h344000000;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 or
	  mav_scr_write_cap or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 or
	  x1_avValue_perms_soft__h22325 or
	  x__h19503 or
	  x1_avValue_flags__h20146 or
	  IF_IF_mav_scr_write_cap_BITS_33_TO_28_567_EQ_0_ETC___d1797)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd15:
	  IF_mav_scr_write_scr_addr_EQ_13_646_OR_mav_scr_ETC___d1857 =
	      mav_scr_write_cap[71:0];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_646_OR_mav_scr_ETC___d1857 =
	      { x1_avValue_perms_soft__h22325,
		x__h19503 == 2'd0 && mav_scr_write_cap[67],
		x__h19503 == 2'd0 && mav_scr_write_cap[66],
		x__h19503 == 2'd0 && mav_scr_write_cap[65],
		x__h19503 == 2'd0 && mav_scr_write_cap[64],
		x__h19503 == 2'd0 && mav_scr_write_cap[63],
		x__h19503 == 2'd0 && mav_scr_write_cap[62],
		x__h19503 == 2'd0 && mav_scr_write_cap[61],
		x__h19503 == 2'd0 && mav_scr_write_cap[60],
		x__h19503 == 2'd0 && mav_scr_write_cap[59],
		x__h19503 == 2'd0 && mav_scr_write_cap[58],
		x__h19503 == 2'd0 && mav_scr_write_cap[57],
		x__h19503 == 2'd0 && mav_scr_write_cap[56],
		x1_avValue_flags__h20146,
		IF_IF_mav_scr_write_cap_BITS_33_TO_28_567_EQ_0_ETC___d1797 };
      default: IF_mav_scr_write_scr_addr_EQ_13_646_OR_mav_scr_ETC___d1857 =
		   { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4,
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[67],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[66],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[65],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[64],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[63],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[62],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[61],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[60],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[59],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[58],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[57],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[56],
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 };
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  capUnpacked_capFat_address__h19267 or x1_avValue_address__h20143)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814 =
	      mav_scr_write_cap[151:86];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814 =
	      capUnpacked_capFat_address__h19267;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814 =
	      x1_avValue_address__h20143;
      default: IF_mav_scr_write_scr_addr_EQ_13_646_THEN_mav_s_ETC___d1814 =
		   66'd0;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7238 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7343 or rg_mcycle or rg_minstret or x__h7361)
  begin
    case (read_csr_csr_addr)
      12'h001:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 = 64'd0;
      12'h104:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_stval;
      12'h144:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 = rg_satp;
      12'h300:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 32'd0, dcsr__h7238 };
      12'h7B1:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 48'd0, x__h7343 };
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
	      { 48'd0, x__h7361 };
      default: IF_read_csr_csr_addr_EQ_0x1_8_THEN_0_CONCAT_rg_ETC___d465 =
		   rg_dscratch1;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7238 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7343 or rg_mcycle or rg_minstret or x__h7361)
  begin
    case (read_csr_port2_csr_addr)
      12'h001:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 = 64'd0;
      12'h104:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_stval;
      12'h144:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 = rg_satp;
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 32'd0, dcsr__h7238 };
      12'h7B1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 48'd0, x__h7343 };
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
	      { 48'd0, x__h7361 };
      default: IF_read_csr_port2_csr_addr_EQ_0x1_80_THEN_0_CO_ETC___d715 =
		   rg_dscratch1;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7238 or
	  SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423 or
	  rg_dscratch0 or x__h7343 or rg_mcycle or rg_minstret or x__h7361)
  begin
    case (mav_read_csr_csr_addr)
      12'h001:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 = 64'd0;
      12'h104:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] };
      12'h140:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_sscratch;
      12'h141:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314;
      12'h142:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_stval;
      12'h144:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_satp;
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      64'h800000000014112D;
      12'h302:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mie$mv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata2;
      12'h7A3:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_tdata3;
      12'h7B0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 32'd0, dcsr__h7238 };
      12'h7B1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      SEXT__0_CONCAT_rg_dpcc_08_BITS_95_TO_82_09_10__ETC___d423;
      12'h7B2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_dscratch0;
      12'h9C0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 48'd0, x__h7343 };
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      rg_minstret;
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
	      { 48'd0, x__h7361 };
      default: IF_mav_read_csr_csr_addr_EQ_0x1_72_THEN_0_CONC_ETC___d1007 =
		   rg_dscratch1;
    endcase
  end
  always@(read_scr_scr_addr or
	  rg_mepcc or
	  rg_stcc or
	  rg_stdc or
	  rg_sscratchc or rg_sepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd12:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_stcc;
      5'd13:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_stdc;
      5'd14:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_sscratchc;
      5'd15:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_sepcc;
      5'd28:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_12_18_THEN_rg_stcc_61__ETC___d758 =
		   rg_mepcc;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'h0000000A00002000;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_sscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_stdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_sepcc$EN) rg_sepcc <= `BSV_ASSIGNMENT_DELAY rg_sepcc$D_IN;
	if (rg_sscratchc$EN)
	  rg_sscratchc <= `BSV_ASSIGNMENT_DELAY rg_sscratchc$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_stcc$EN) rg_stcc <= `BSV_ASSIGNMENT_DELAY rg_stcc$D_IN;
	if (rg_stdc$EN) rg_stdc <= `BSV_ASSIGNMENT_DELAY rg_stdc$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpcc$EN) rg_dpcc <= `BSV_ASSIGNMENT_DELAY rg_dpcc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_fflags$EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags$D_IN;
    if (rg_frm$EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_medeleg$EN) rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
    if (rg_mideleg$EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_nmi_vector$EN)
      rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_scause$EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause$D_IN;
    if (rg_sccsr$EN) rg_sccsr <= `BSV_ASSIGNMENT_DELAY rg_sccsr$D_IN;
    if (rg_sscratch$EN) rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch$D_IN;
    if (rg_stval$EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpcc = 163'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_dscratch0 = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch1 = 64'hAAAAAAAAAAAAAAAA;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_medeleg = 29'h0AAAAAAA;
    rg_mepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_scause = 7'h2A;
    rg_sccsr = 11'h2AA;
    rg_sepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_sscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_stcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug)
	$display("sstatus = 0x%0h",
		 { csr_mstatus_rg_mstatus[63],
		   29'd0,
		   csr_mstatus_rg_mstatus[33:32],
		   12'd0,
		   csr_mstatus_rg_mstatus[19:18],
		   1'd0,
		   csr_mstatus_rg_mstatus[16:13],
		   4'd0,
		   csr_mstatus_rg_mstatus[8],
		   2'd0,
		   csr_mstatus_rg_mstatus[5:4],
		   2'd0,
		   csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sip     = 0x%0h", csr_mip$mv_sip_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sie     = 0x%0h", csr_mie$mv_sie_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  (mav_csr_write_csr_addr_ULT_0xB03___d1010 ||
	   !mav_csr_write_csr_addr_ULE_0xB1F___d1011) &&
	  mav_csr_write_csr_addr_ULT_0x323_014_OR_NOT_ma_ETC___d1484 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h23848 | in__h23957[63:0],
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("    priv %0d: ", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd10 &&
	  rg_scause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd11 &&
	  rg_scause[5:0] != 6'd12 &&
	  rg_scause[5:0] != 6'd13 &&
	  rg_scause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" status: 0x%0h",
	       { csr_mstatus_rg_mstatus[63],
		 29'd0,
		 csr_mstatus_rg_mstatus[33:32],
		 12'd0,
		 csr_mstatus_rg_mstatus[19:18],
		 1'd0,
		 csr_mstatus_rg_mstatus[16:13],
		 4'd0,
		 csr_mstatus_rg_mstatus[8],
		 2'd0,
		 csr_mstatus_rg_mstatus[5:4],
		 2'd0,
		 csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_stcc_61_BITS_85_TO_72_62_63__ETC___d285[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_sepcc_90_BITS_85_TO_72_91_92_ETC___d314);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tval: 0x%0h", rg_stval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" edeleg: 0x%0h", rg_medeleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ideleg: 0x%0h", rg_mideleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_mtcc_33_BITS_85_TO_72_34_35__ETC___d357[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_mepcc_64_BITS_85_TO_72_65_66_ETC___d388);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h26400);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("MStatus{",
	       "sd:%0d",
	       x__h28064[14:13] == 2'h3 || x__h28064[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" sxl:%0d uxl:%0d", x__h28064[35:34], x__h28064[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tsr:%0d", x__h28064[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tw:%0d", x__h28064[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" tvm:%0d", x__h28064[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" mxr:%0d", x__h28064[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" sum:%0d", x__h28064[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" mprv:%0d", x__h28064[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" xs:%0d", x__h28064[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" fs:%0d", x__h28064[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" mpp:%0d", x__h28064[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" spp:%0d", x__h28064[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" pies:%0d_%0d%0d", x__h28064[7], x__h28064[5], x__h28064[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" ies:%0d_%0d%0d", x__h28064[3], x__h28064[1], x__h28064[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27183 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  NOT_csr_trap_actions_nmi_161_AND_csr_trap_acti_ETC___d2277)
	$write("unknown interrupt Exc_Code %d", exc_code__h27183);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27183 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2328)
	$write("unknown trap Exc_Code %d", exc_code__h27183);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" new priv %0d", new_priv__h24944);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("valid:%b",
	       mav_scr_write_cap[152],
	       " perms:0x%x",
	       { 15'd0, mav_scr_write_cap[71:56] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" reserved:0x%x", mav_scr_write_cap[54:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1698)
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1700)
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("%d", $unsigned(mav_scr_write_cap[33:28]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("'h%h", mav_scr_write_cap[27:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("'h%h", mav_scr_write_cap[13:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" address:0x%x", mav_scr_write_cap[151:86]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" addrBits:0x%x", mav_scr_write_cap[85:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       { 2'd0, bot__h21092 },
	       mav_scr_write_cap_BITS_33_TO_28_567_ULT_51_703_ETC___d1730 ?
		 result__h21859 :
		 ret__h21215,
	       (mav_scr_write_cap[33:28] < 6'd52) ?
		 length__h21919 :
		 66'h3FFFFFFFFFFFFFFFF,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1595);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("'h%h", repBound__h22150);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1743)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1745)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1746)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1748)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1749)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_566_678_AND_N_ETC___d1750)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("%d", $signed(x__h22211));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("%d", $signed(x__h22230), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__486_ULE_1_487___d1488)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

