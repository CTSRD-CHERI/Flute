//
// Generated by Bluespec Compiler (build 39ae402)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// read_scr                       O   154
// mav_read_csr                   O    65
// mav_csr_write                  O   129
// mav_scr_write                  O   153
// read_frm                       O     3 reg
// read_fflags                    O     5 reg
// mv_update_fcsr_fflags          O     5
// mv_update_mstatus_fs           O    64
// read_misa                      O    28 const
// read_mstatus                   O    64 reg
// read_sstatus                   O    64
// read_ustatus                   O    64
// read_satp                      O    64 reg
// csr_trap_actions               O   283
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   229
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    64
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// read_dpcc                      O   163 reg
// RDY_read_dpcc                  O     1 const
// RDY_write_dpcc                 O     1 const
// dcsr_break_enters_debug        O     1
// RDY_dcsr_break_enters_debug    O     1 const
// read_dcsr_step                 O     1 reg
// RDY_read_dcsr_step             O     1 const
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    64
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I   153
// mv_update_fcsr_fflags_flags    I     5
// ma_update_fcsr_fflags_flags    I     5
// mv_update_mstatus_fs_fs        I     2
// ma_update_mstatus_fs_fs        I     2
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I   163
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// write_dpcc_pcc                 I   163
// dcsr_break_enters_debug_cur_priv  I     2
// write_dcsr_cause_priv_cause    I     3
// write_dcsr_cause_priv_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_ma_update_fcsr_fflags       I     1
// EN_ma_update_mstatus_fs        I     1
// EN_csr_minstret_incr           I     1
// EN_write_dpcc                  I     1
// EN_write_dcsr_cause_priv       I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   mv_update_fcsr_fflags_flags -> mv_update_fcsr_fflags
//   mv_update_mstatus_fs_fs -> mv_update_mstatus_fs
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   dcsr_break_enters_debug_cur_priv -> dcsr_break_enters_debug
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_frm,

		     read_fflags,

		     mv_update_fcsr_fflags_flags,
		     mv_update_fcsr_fflags,

		     ma_update_fcsr_fflags_flags,
		     EN_ma_update_fcsr_fflags,

		     mv_update_mstatus_fs_fs,
		     mv_update_mstatus_fs,

		     ma_update_mstatus_fs_fs,
		     EN_ma_update_mstatus_fs,

		     read_misa,

		     read_mstatus,

		     read_sstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     s_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,

		     nmi_pending,

		     read_dpcc,
		     RDY_read_dpcc,

		     write_dpcc_pcc,
		     EN_write_dpcc,
		     RDY_write_dpcc,

		     dcsr_break_enters_debug_cur_priv,
		     dcsr_break_enters_debug,
		     RDY_dcsr_break_enters_debug,

		     read_dcsr_step,
		     RDY_read_dcsr_step,

		     write_dcsr_cause_priv_cause,
		     write_dcsr_cause_priv_priv,
		     EN_write_dcsr_cause_priv,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [153 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [63 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [128 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [152 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [152 : 0] mav_scr_write;

  // value method read_frm
  output [2 : 0] read_frm;

  // value method read_fflags
  output [4 : 0] read_fflags;

  // value method mv_update_fcsr_fflags
  input  [4 : 0] mv_update_fcsr_fflags_flags;
  output [4 : 0] mv_update_fcsr_fflags;

  // action method ma_update_fcsr_fflags
  input  [4 : 0] ma_update_fcsr_fflags_flags;
  input  EN_ma_update_fcsr_fflags;

  // value method mv_update_mstatus_fs
  input  [1 : 0] mv_update_mstatus_fs_fs;
  output [63 : 0] mv_update_mstatus_fs;

  // action method ma_update_mstatus_fs
  input  [1 : 0] ma_update_mstatus_fs_fs;
  input  EN_ma_update_mstatus_fs;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_sstatus
  output [63 : 0] read_sstatus;

  // value method read_ustatus
  output [63 : 0] read_ustatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [162 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [282 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [228 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [63 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // value method nmi_pending
  output nmi_pending;

  // value method read_dpcc
  output [162 : 0] read_dpcc;
  output RDY_read_dpcc;

  // action method write_dpcc
  input  [162 : 0] write_dpcc_pcc;
  input  EN_write_dpcc;
  output RDY_write_dpcc;

  // value method dcsr_break_enters_debug
  input  [1 : 0] dcsr_break_enters_debug_cur_priv;
  output dcsr_break_enters_debug;
  output RDY_dcsr_break_enters_debug;

  // value method read_dcsr_step
  output read_dcsr_step;
  output RDY_read_dcsr_step;

  // action method write_dcsr_cause_priv
  input  [2 : 0] write_dcsr_cause_priv_cause;
  input  [1 : 0] write_dcsr_cause_priv_priv;
  input  EN_write_dcsr_cause_priv;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  reg dcsr_break_enters_debug;
  wire [282 : 0] csr_trap_actions;
  wire [228 : 0] csr_ret_actions;
  wire [162 : 0] read_dpcc;
  wire [153 : 0] read_scr;
  wire [152 : 0] mav_scr_write;
  wire [128 : 0] mav_csr_write;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] csr_mip_read,
		mv_update_mstatus_fs,
		read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_sstatus,
		read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [4 : 0] mv_update_fcsr_fflags, read_fflags;
  wire [2 : 0] read_frm;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_dcsr_break_enters_debug,
       RDY_debug,
       RDY_read_dcsr_step,
       RDY_read_dpcc,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_write_dpcc,
       csr_counter_read_fault,
       nmi_pending,
       read_dcsr_step,
       wfi_resume;

  // inlined wires
  wire rw_mcycle$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [63 : 0] csr_mstatus_rg_mstatus;
  reg [63 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  reg [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpcc
  reg [162 : 0] rg_dpcc;
  reg [162 : 0] rg_dpcc$D_IN;
  wire rg_dpcc$EN;

  // register rg_dscratch0
  reg [63 : 0] rg_dscratch0;
  wire [63 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [63 : 0] rg_dscratch1;
  wire [63 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  reg [4 : 0] rg_fflags$D_IN;
  wire rg_fflags$EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm$D_IN;
  wire rg_frm$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_medeleg
  reg [28 : 0] rg_medeleg;
  wire [28 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_mepcc
  reg [152 : 0] rg_mepcc;
  reg [152 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [152 : 0] rg_mscratchc;
  wire [152 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [152 : 0] rg_mtcc;
  reg [152 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [152 : 0] rg_mtdc;
  wire [152 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [63 : 0] rg_nmi_vector;
  wire [63 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_scause
  reg [6 : 0] rg_scause;
  reg [6 : 0] rg_scause$D_IN;
  wire rg_scause$EN;

  // register rg_sccsr
  reg [10 : 0] rg_sccsr;
  wire [10 : 0] rg_sccsr$D_IN;
  wire rg_sccsr$EN;

  // register rg_sepcc
  reg [152 : 0] rg_sepcc;
  reg [152 : 0] rg_sepcc$D_IN;
  wire rg_sepcc$EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch$D_IN;
  wire rg_sscratch$EN;

  // register rg_sscratchc
  reg [152 : 0] rg_sscratchc;
  wire [152 : 0] rg_sscratchc$D_IN;
  wire rg_sscratchc$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_stcc
  reg [152 : 0] rg_stcc;
  reg [152 : 0] rg_stcc$D_IN;
  wire rg_stcc$EN;

  // register rg_stdc
  reg [152 : 0] rg_stdc;
  wire [152 : 0] rg_stdc$D_IN;
  wire rg_stdc$EN;

  // register rg_stval
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval$D_IN;
  wire rg_stval$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [63 : 0] csr_mie$mav_sie_write,
		csr_mie$mav_sie_write_wordxl,
		csr_mie$mav_write,
		csr_mie$mav_write_wordxl,
		csr_mie$mv_read,
		csr_mie$mv_sie_read;
  wire [27 : 0] csr_mie$mav_sie_write_misa, csr_mie$mav_write_misa;
  wire csr_mie$EN_mav_sie_write, csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [63 : 0] csr_mip$mav_sip_write,
		csr_mip$mav_sip_write_wordxl,
		csr_mip$mav_write,
		csr_mip$mav_write_wordxl,
		csr_mip$mv_read,
		csr_mip$mv_sip_read;
  wire [27 : 0] csr_mip$mav_sip_write_misa, csr_mip$mav_write_misa;
  wire csr_mip$EN_mav_sip_write,
       csr_mip$EN_mav_write,
       csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule soc_map
  wire [152 : 0] soc_map$m_mepcc_reset_value,
		 soc_map$m_mtcc_reset_value,
		 soc_map$m_pcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_nmivec_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_update_fcsr_fflags,
       CAN_FIRE_ma_update_mstatus_fs,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_dcsr_cause_priv,
       CAN_FIRE_write_dpcc,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_update_fcsr_fflags,
       WILL_FIRE_ma_update_mstatus_fs,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_dcsr_cause_priv,
       WILL_FIRE_write_dpcc;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
  wire [162 : 0] MUX_rg_dpcc$write_1__VAL_1, MUX_rg_dpcc$write_1__VAL_3;
  wire [152 : 0] MUX_rg_mepcc$write_1__VAL_2,
		 MUX_rg_mepcc$write_1__VAL_4,
		 MUX_rg_mtcc$write_1__VAL_2,
		 MUX_rg_mtcc$write_1__VAL_3,
		 MUX_rg_sepcc$write_1__VAL_4,
		 MUX_rg_stcc$write_1__VAL_3;
  wire [63 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_2,
		MUX_csr_mstatus_rg_mstatus$write_1__VAL_4,
		MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rg_mtval$write_1__VAL_1;
  wire [31 : 0] MUX_rg_dcsr$write_1__VAL_3;
  wire [28 : 0] MUX_rg_medeleg$write_1__VAL_1;
  wire [10 : 0] MUX_rg_mccsr$write_1__VAL_2;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire [4 : 0] MUX_rg_fflags$write_1__VAL_3;
  wire [2 : 0] MUX_rg_frm$write_1__VAL_1;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_5,
       MUX_rg_dcsr$write_1__SEL_2,
       MUX_rg_dpcc$write_1__SEL_3,
       MUX_rg_fflags$write_1__SEL_2,
       MUX_rg_frm$write_1__SEL_1,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_3,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_medeleg$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_4,
       MUX_rg_mideleg$write_1__SEL_1,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_satp$write_1__SEL_1,
       MUX_rg_scause$write_1__SEL_2,
       MUX_rg_scause$write_1__SEL_3,
       MUX_rg_sepcc$write_1__SEL_2,
       MUX_rg_sepcc$write_1__SEL_4,
       MUX_rg_stcc$write_1__SEL_2,
       MUX_rg_stcc$write_1__SEL_3,
       MUX_rg_stval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [152 : 0] IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771;
  reg [71 : 0] IF_mav_scr_write_scr_addr_EQ_13_668_OR_mav_scr_ETC___d1879;
  reg [65 : 0] IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836;
  reg [63 : 0] IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025,
	       IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473,
	       IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728,
	       y_avValue_fst__h17456;
  reg [61 : 0] CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1;
  reg [33 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9;
  reg [17 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7;
  reg [13 : 0] IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843;
  reg [3 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4;
  reg [1 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6;
  reg CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
      CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3,
      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830,
      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933,
      IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829;
  wire [152 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2472;
  wire [151 : 0] _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2412;
  wire [85 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2471;
  wire [65 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2497,
		a_capFat_address__h28890,
		addTop__h21148,
		capUnpacked_capFat_address__h19204,
		capUnpacked_capFat_address__h19855,
		in__h22029,
		in__h23894,
		in__h5818,
		in__h6026,
		in__h6358,
		in__h6578,
		in__h6813,
		length__h21856,
		mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739,
		result__h21796,
		result_d_address__h16788,
		result_d_address__h27573,
		ret__h21152,
		x1_avValue_address__h20080,
		x__h22047,
		x__h23912,
		x__h27615,
		x__h5836,
		x__h6044,
		x__h6376,
		x__h6596,
		x__h6831,
		x_address__h12399,
		x_address__h12908,
		x_address__h14745,
		x_address__h15351,
		y__h22046,
		y__h23911,
		y__h5835,
		y__h6043,
		y__h6375,
		y__h6595,
		y__h6830;
  wire [63 : 0] IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165,
		IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435,
		SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617,
		SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430,
		SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395,
		SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364,
		SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321,
		SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292,
		_theResult_____2__h26343,
		_theResult___fst__h28161,
		_theResult___fst__h28362,
		addBase__h12419,
		addBase__h12928,
		addBase__h14765,
		addBase__h15371,
		addBase__h16808,
		addBase__h21026,
		addBase__h27605,
		bot__h12422,
		bot__h12931,
		bot__h14768,
		bot__h15374,
		bot__h16811,
		bot__h21029,
		bot__h27608,
		csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428,
		csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157,
		exc_pc___1__h26433,
		exc_pc__h26341,
		mask__h25090,
		mask__h25107,
		mask__h28182,
		mask__h28199,
		mav_csr_write_word_BITS_14_TO_13_062_EQ_0x3_06_ETC___d1093,
		new_csr_value__h16205,
		offsetAddr__h14453,
		offsetAddr__h15075,
		offsetAddr__h18782,
		offsetAddr__h19458,
		v__h11461,
		v__h13693,
		v__h13805,
		v__h15517,
		v__h16306,
		v__h24886,
		val__h25091,
		val__h25108,
		val__h28200,
		vector_offset__h26342,
		wordxl1__h10891,
		wordxl1__h13852,
		x__h12255,
		x__h12770,
		x__h14607,
		x__h15213,
		x__h16718,
		x__h19040,
		x__h19716,
		x__h21960,
		x__h21962,
		x__h23785,
		x__h23787,
		x__h25089,
		x__h25102,
		x__h25119,
		x__h27503,
		x__h28007,
		x__h28008,
		x__h28181,
		x__h28194,
		x__h28211,
		x__h4873,
		x__h5702,
		x__h5704,
		x__h5910,
		x__h5912,
		x__h6242,
		x__h6244,
		x__h6462,
		x__h6464,
		x__h7321,
		x__h7323,
		x__h9270,
		y__h25103,
		y__h25120,
		y__h28195,
		y__h28212,
		y_avValue_fst__h17184,
		y_avValue_fst__h17189,
		y_avValue_fst__h17194,
		y_avValue_fst__h26295,
		y_avValue_fst__h26313,
		y_avValue_snd_snd_snd__h26395;
  wire [54 : 0] IF_IF_mav_scr_write_cap_BITS_33_TO_28_589_EQ_0_ETC___d1819;
  wire [52 : 0] IF_IF_csr_ret_actions_from_priv_EQ_0b11_415_TH_ETC___d2469;
  wire [51 : 0] mask__h21149;
  wire [49 : 0] highBitsfilter__h12104,
		highBitsfilter__h12635,
		highBitsfilter__h14456,
		highBitsfilter__h15078,
		highBitsfilter__h16597,
		highBitsfilter__h27303,
		highOffsetBits__h12105,
		highOffsetBits__h12636,
		highOffsetBits__h14457,
		highOffsetBits__h15079,
		highOffsetBits__h16598,
		highOffsetBits__h19462,
		highOffsetBits__h27304,
		mask__h21027,
		mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2,
		signBits__h16595,
		signBits__h19459,
		signBits__h27301,
		x__h16625,
		x__h19489,
		x__h27331;
  wire [31 : 0] dcsr__h7150, new_dcsr__h16309;
  wire [22 : 0] fixed_up_val_23__h10932,
		fixed_up_val_23__h11512,
		fixed_up_val_23__h13893,
		fixed_up_val_23__h22543,
		fixed_up_val_23__h23097,
		fixed_up_val_23__h24930,
		fixed_up_val_23__h28068;
  wire [17 : 0] a_capFat_otype__h28895, x1_avValue_otype__h20085, x__h28828;
  wire [15 : 0] base__h23772,
		base__h7308,
		newAddrBits__h12379,
		newAddrBits__h12888,
		newAddrBits__h14725,
		newAddrBits__h15331,
		newAddrBits__h16777,
		newAddrBits__h19184,
		newAddrBits__h19835,
		newAddrBits__h27562,
		offset__h21948,
		offset__h23773,
		offset__h5690,
		offset__h5898,
		offset__h6230,
		offset__h6450,
		offset__h7309,
		x__h12476,
		x__h12985,
		x__h14822,
		x__h15428,
		x__h21083,
		x__h21238,
		x__h21861,
		x__h27662,
		x__h7256,
		x__h7274;
  wire [13 : 0] a_capFat_addrBits__h28891,
		capUnpacked_capFat_addrBits__h19205,
		capUnpacked_capFat_addrBits__h19856,
		result_d_addrBits__h16789,
		result_d_addrBits__h27574,
		toBoundsM1__h12115,
		toBoundsM1__h12646,
		toBoundsM1__h14467,
		toBoundsM1__h15089,
		toBoundsM1__h16608,
		toBoundsM1__h20209,
		toBoundsM1__h27314,
		toBounds__h12114,
		toBounds__h12645,
		toBounds__h14466,
		toBounds__h15088,
		toBounds__h16607,
		toBounds__h20208,
		toBounds__h27313,
		x1_avValue_addrBits__h20081,
		x__h27533,
		x_addrBits__h12400,
		x_addrBits__h12909,
		x_addrBits__h14746,
		x_addrBits__h15352;
  wire [9 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2491;
  wire [5 : 0] IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3011,
	       IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3013,
	       IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3014,
	       IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3016,
	       IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360,
	       exc_code__h27126,
	       ie_from_x__h28145,
	       ie_to_x__h25007,
	       pie_from_x__h28146,
	       pie_to_x__h25008;
  wire [4 : 0] IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1407,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22;
  wire [3 : 0] IF_rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc__ETC___d2479,
	       IF_rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc__ETC___d2488,
	       x1_avValue_perms_soft__h22262;
  wire [2 : 0] repBound__h17014,
	       repBound__h22087,
	       repBound__h4687,
	       repBound__h5740,
	       repBound__h5948,
	       repBound__h6280,
	       repBound__h6500;
  wire [1 : 0] IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055,
	       IF_rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_7_ETC___d383,
	       IF_rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_9_ETC___d309,
	       _theResult____h30196,
	       _theResult____h30408,
	       _theResult____h30620,
	       _theResult____h30832,
	       _theResult____h31044,
	       _theResult____h31256,
	       _theResult____h31468,
	       _theResult____h31680,
	       _theResult____h31892,
	       _theResult___fst__h25019,
	       a_capFat_reserved__h28894,
	       new_priv__h24881,
	       to_y__h28361,
	       x1_avValue_reserved__h20084,
	       x__h19440,
	       x__h22148,
	       x__h22167;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2377,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1638,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1677,
       IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2385,
       IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1125,
       IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1174,
       IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1243,
       IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1291,
       IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1365,
       IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_498__ETC___d2607,
       NOT_access_permitted_1_read_not_write_618_OR_a_ETC___d2633,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_634__ETC___d2743,
       NOT_access_permitted_2_read_not_write_752_OR_a_ETC___d2767,
       NOT_cfg_verbosity_read__507_ULE_1_508___d1509,
       NOT_csr_mip_mv_read__01_BIT_0_900_991_OR_NOT_c_ETC___d2998,
       NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936,
       NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963,
       NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2990,
       NOT_csr_mip_mv_read__01_BIT_1_867_964_OR_NOT_c_ETC___d2971,
       NOT_csr_mip_mv_read__01_BIT_3_834_937_OR_NOT_c_ETC___d2944,
       NOT_csr_mip_mv_read__01_BIT_5_878_973_OR_NOT_c_ETC___d2980,
       NOT_csr_mip_mv_read__01_BIT_7_845_946_OR_NOT_c_ETC___d2953,
       NOT_csr_mip_mv_read__01_BIT_8_889_982_OR_NOT_c_ETC___d2989,
       NOT_csr_mip_mv_read__01_BIT_9_856_955_OR_NOT_c_ETC___d2962,
       NOT_csr_trap_actions_nmi_187_AND_csr_trap_acti_ETC___d2301,
       NOT_mav_scr_write_cap_BITS_33_TO_28_589_ULT_50_ETC___d1641,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1720,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1722,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1765,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1767,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1768,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1770,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1771,
       NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1772,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1682,
       a_capFat_flags__h28893,
       access_permitted_1_csr_addr_ULE_0xC1F___d2500,
       access_permitted_1_csr_addr_ULT_0xC03___d2498,
       access_permitted_2_csr_addr_ULE_0xC1F___d2636,
       access_permitted_2_csr_addr_ULT_0xC03___d2634,
       b__h25106,
       b__h28198,
       csr_mip_mv_read__01_BIT_0_900_AND_csr_mie_mv_r_ETC___d2909,
       csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2833,
       csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2899,
       csr_mip_mv_read__01_BIT_1_867_AND_csr_mie_mv_r_ETC___d2876,
       csr_mip_mv_read__01_BIT_3_834_AND_csr_mie_mv_r_ETC___d2843,
       csr_mip_mv_read__01_BIT_4_911_AND_csr_mie_mv_r_ETC___d2920,
       csr_mip_mv_read__01_BIT_5_878_AND_csr_mie_mv_r_ETC___d2887,
       csr_mip_mv_read__01_BIT_7_845_AND_csr_mie_mv_r_ETC___d2854,
       csr_mip_mv_read__01_BIT_8_889_AND_csr_mie_mv_r_ETC___d2898,
       csr_mip_mv_read__01_BIT_9_856_AND_csr_mie_mv_r_ETC___d2865,
       csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2200,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2352,
       deleg_bit___1__h25028,
       deleg_bit___1__h25043,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2822,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2840,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2851,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2862,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2873,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2884,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2895,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2906,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2821,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2839,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2850,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2861,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2872,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2883,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2894,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2905,
       mav_csr_write_csr_addr_ULE_0x33F___d1033,
       mav_csr_write_csr_addr_ULE_0xB1F___d1029,
       mav_csr_write_csr_addr_ULT_0x323_032_OR_NOT_ma_ETC___d1505,
       mav_csr_write_csr_addr_ULT_0x323___d1032,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1040,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1049,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1097,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1102,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1104,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1156,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1158,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1205,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1209,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1211,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1213,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1215,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1224,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1227,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1229,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1273,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1275,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1277,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1321,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1323,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1325,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1327,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1329,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1331,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1333,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1337,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1339,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1341,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1351,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1411,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1413,
       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1582,
       mav_csr_write_csr_addr_ULT_0xB03___d1028,
       mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599,
       mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731,
       mav_scr_write_cap_BITS_33_TO_28_589_ULT_51_725_ETC___d1752,
       mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601,
       rg_dpcc_15_BITS_23_TO_21_391_ULT_rg_dpcc_15_BI_ETC___d1395,
       rg_dpcc_15_BITS_37_TO_35_393_ULT_rg_dpcc_15_BI_ETC___d1394,
       rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_71_B_ETC___d376,
       rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc_71__ETC___d2474,
       rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378,
       rg_mtcc_40_BITS_13_TO_11_43_ULT_rg_mtcc_40_BIT_ETC___d345,
       rg_mtcc_40_BITS_85_TO_83_46_ULT_rg_mtcc_40_BIT_ETC___d347,
       rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_97_B_ETC___d302,
       rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc_97__ETC___d2483,
       rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304,
       rg_stcc_68_BITS_13_TO_11_71_ULT_rg_stcc_68_BIT_ETC___d273,
       rg_stcc_68_BITS_85_TO_83_74_ULT_rg_stcc_68_BIT_ETC___d275,
       sd__h13892,
       sd__h22542,
       sd__h23096,
       sd__h24929,
       sd__h28067,
       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12,
       x1_avValue_flags__h20083,
       x__h21332;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'h001 ||
	       read_csr_csr_addr == 12'h002 ||
	       read_csr_csr_addr == 12'h003 ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'h100 ||
	       read_csr_csr_addr == 12'h102 ||
	       read_csr_csr_addr == 12'h103 ||
	       read_csr_csr_addr == 12'h104 ||
	       read_csr_csr_addr == 12'h105 ||
	       read_csr_csr_addr == 12'h106 ||
	       read_csr_csr_addr == 12'h140 ||
	       read_csr_csr_addr == 12'h141 ||
	       read_csr_csr_addr == 12'h142 ||
	       read_csr_csr_addr == 12'h143 ||
	       read_csr_csr_addr == 12'h144 ||
	       read_csr_csr_addr == 12'h9C0 ||
	       read_csr_csr_addr == 12'h180 ||
	       read_csr_csr_addr == 12'h302 ||
	       read_csr_csr_addr == 12'h303 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h320 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3 ||
	       read_csr_csr_addr == 12'h7B0 ||
	       read_csr_csr_addr == 12'h7B1 ||
	       read_csr_csr_addr == 12'h7B2 ||
	       read_csr_csr_addr == 12'h7B3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'h001 ||
	       read_csr_port2_csr_addr == 12'h002 ||
	       read_csr_port2_csr_addr == 12'h003 ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'h100 ||
	       read_csr_port2_csr_addr == 12'h102 ||
	       read_csr_port2_csr_addr == 12'h103 ||
	       read_csr_port2_csr_addr == 12'h104 ||
	       read_csr_port2_csr_addr == 12'h105 ||
	       read_csr_port2_csr_addr == 12'h106 ||
	       read_csr_port2_csr_addr == 12'h140 ||
	       read_csr_port2_csr_addr == 12'h141 ||
	       read_csr_port2_csr_addr == 12'h142 ||
	       read_csr_port2_csr_addr == 12'h143 ||
	       read_csr_port2_csr_addr == 12'h144 ||
	       read_csr_port2_csr_addr == 12'h9C0 ||
	       read_csr_port2_csr_addr == 12'h180 ||
	       read_csr_port2_csr_addr == 12'h302 ||
	       read_csr_port2_csr_addr == 12'h303 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h320 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3 ||
	       read_csr_port2_csr_addr == 12'h7B0 ||
	       read_csr_port2_csr_addr == 12'h7B1 ||
	       read_csr_port2_csr_addr == 12'h7B2 ||
	       read_csr_port2_csr_addr == 12'h7B3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd12 || read_scr_scr_addr == 5'd13 ||
	       read_scr_scr_addr == 5'd14 ||
	       read_scr_scr_addr == 5'd15 ||
	       read_scr_scr_addr == 5'd28 ||
	       read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'h001 ||
	       mav_read_csr_csr_addr == 12'h002 ||
	       mav_read_csr_csr_addr == 12'h003 ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'h100 ||
	       mav_read_csr_csr_addr == 12'h102 ||
	       mav_read_csr_csr_addr == 12'h103 ||
	       mav_read_csr_csr_addr == 12'h104 ||
	       mav_read_csr_csr_addr == 12'h105 ||
	       mav_read_csr_csr_addr == 12'h106 ||
	       mav_read_csr_csr_addr == 12'h140 ||
	       mav_read_csr_csr_addr == 12'h141 ||
	       mav_read_csr_csr_addr == 12'h142 ||
	       mav_read_csr_csr_addr == 12'h143 ||
	       mav_read_csr_csr_addr == 12'h144 ||
	       mav_read_csr_csr_addr == 12'h9C0 ||
	       mav_read_csr_csr_addr == 12'h180 ||
	       mav_read_csr_csr_addr == 12'h302 ||
	       mav_read_csr_csr_addr == 12'h303 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h320 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3 ||
	       mav_read_csr_csr_addr == 12'h7B0 ||
	       mav_read_csr_csr_addr == 12'h7B1 ||
	       mav_read_csr_csr_addr == 12'h7B2 ||
	       mav_read_csr_csr_addr == 12'h7B3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write =
	     { x__h9270,
	       mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1582,
	       wordxl1__h10891 } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     (mav_scr_write_scr_addr == 5'd12) ?
	       { x__h19440 == 2'd0 &&
		 SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645 &&
		 mav_scr_write_cap[152],
		 x1_avValue_address__h20080,
		 x1_avValue_addrBits__h20081,
		 x1_avValue_perms_soft__h22262,
		 x__h19440 == 2'd0 && mav_scr_write_cap[67],
		 x__h19440 == 2'd0 && mav_scr_write_cap[66],
		 x__h19440 == 2'd0 && mav_scr_write_cap[65],
		 x__h19440 == 2'd0 && mav_scr_write_cap[64],
		 x__h19440 == 2'd0 && mav_scr_write_cap[63],
		 x__h19440 == 2'd0 && mav_scr_write_cap[62],
		 x__h19440 == 2'd0 && mav_scr_write_cap[61],
		 x__h19440 == 2'd0 && mav_scr_write_cap[60],
		 x__h19440 == 2'd0 && mav_scr_write_cap[59],
		 x__h19440 == 2'd0 && mav_scr_write_cap[58],
		 x__h19440 == 2'd0 && mav_scr_write_cap[57],
		 x__h19440 == 2'd0 && mav_scr_write_cap[56],
		 x1_avValue_flags__h20083,
		 IF_IF_mav_scr_write_cap_BITS_33_TO_28_589_EQ_0_ETC___d1819 } :
	       { IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829,
		 IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836,
		 IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843,
		 IF_mav_scr_write_scr_addr_EQ_13_668_OR_mav_scr_ETC___d1879 } ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_frm
  assign read_frm = rg_frm ;

  // value method read_fflags
  assign read_fflags = rg_fflags ;

  // value method mv_update_fcsr_fflags
  assign mv_update_fcsr_fflags = rg_fflags | mv_update_fcsr_fflags_flags ;

  // action method ma_update_fcsr_fflags
  assign CAN_FIRE_ma_update_fcsr_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fcsr_fflags = EN_ma_update_fcsr_fflags ;

  // value method mv_update_mstatus_fs
  assign mv_update_mstatus_fs =
	     { sd__h22542, 40'd5120, fixed_up_val_23__h22543 } ;

  // action method ma_update_mstatus_fs
  assign CAN_FIRE_ma_update_mstatus_fs = 1'd1 ;
  assign WILL_FIRE_ma_update_mstatus_fs = EN_ma_update_mstatus_fs ;

  // value method read_misa
  assign read_misa = 28'd135532845 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_sstatus
  assign read_sstatus =
	     { csr_mstatus_rg_mstatus[63],
	       29'd0,
	       csr_mstatus_rg_mstatus[33:32],
	       12'd0,
	       csr_mstatus_rg_mstatus[19:18],
	       1'd0,
	       csr_mstatus_rg_mstatus[16:13],
	       4'd0,
	       csr_mstatus_rg_mstatus[8],
	       2'd0,
	       csr_mstatus_rg_mstatus[5:4],
	       2'd0,
	       csr_mstatus_rg_mstatus[1:0] } ;

  // value method read_ustatus
  assign read_ustatus =
	     { 59'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp = rg_satp ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2385,
	       _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2412,
	       x__h28007,
	       x__h28008,
	       new_priv__h24881 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2472,
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2491,
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2497 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_498__ETC___d2607 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_1_read_not_write_618_OR_a_ETC___d2633 } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_634__ETC___d2743 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_2_read_not_write_752_OR_a_ETC___d2767 } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd1 ||
		access_permitted_scr_scr_addr == 5'd12 ||
		access_permitted_scr_scr_addr == 5'd13 ||
		access_permitted_scr_scr_addr == 5'd15 ||
		access_permitted_scr_scr_addr == 5'd14 ||
		access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     (csr_counter_read_fault_csr_addr == 12'hC00 &&
	      !rg_mcounteren[0] ||
	      csr_counter_read_fault_csr_addr == 12'hC01 &&
	      !rg_mcounteren[1] ||
	      csr_counter_read_fault_csr_addr == 12'hC02 &&
	      !rg_mcounteren[2] ||
	      csr_counter_read_fault_csr_addr >= 12'hC03 &&
	      csr_counter_read_fault_csr_addr <= 12'hC1F) ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2899 ||
	       csr_mip_mv_read__01_BIT_0_900_AND_csr_mie_mv_r_ETC___d2909 ||
	       csr_mip_mv_read__01_BIT_4_911_AND_csr_mie_mv_r_ETC___d2920,
	       IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3016 } ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 64'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // value method read_dpcc
  assign read_dpcc = rg_dpcc ;
  assign RDY_read_dpcc = 1'd1 ;

  // action method write_dpcc
  assign RDY_write_dpcc = 1'd1 ;
  assign CAN_FIRE_write_dpcc = 1'd1 ;
  assign WILL_FIRE_write_dpcc = EN_write_dpcc ;

  // value method dcsr_break_enters_debug
  always@(dcsr_break_enters_debug_cur_priv or rg_dcsr)
  begin
    case (dcsr_break_enters_debug_cur_priv)
      2'b01: dcsr_break_enters_debug = rg_dcsr[13];
      2'b11: dcsr_break_enters_debug = rg_dcsr[15];
      default: dcsr_break_enters_debug = rg_dcsr[12];
    endcase
  end
  assign RDY_dcsr_break_enters_debug = 1'd1 ;

  // value method read_dcsr_step
  assign read_dcsr_step = rg_dcsr[2] ;
  assign RDY_read_dcsr_step = 1'd1 ;

  // action method write_dcsr_cause_priv
  assign CAN_FIRE_write_dcsr_cause_priv = 1'd1 ;
  assign WILL_FIRE_write_dcsr_cause_priv = EN_write_dcsr_cause_priv ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_sie_write_misa(csr_mie$mav_sie_write_misa),
		    .mav_sie_write_wordxl(csr_mie$mav_sie_write_wordxl),
		    .mav_write_misa(csr_mie$mav_write_misa),
		    .mav_write_wordxl(csr_mie$mav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .EN_mav_sie_write(csr_mie$EN_mav_sie_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write),
		    .mv_sie_read(csr_mie$mv_sie_read),
		    .mav_sie_write(csr_mie$mav_sie_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .mav_sip_write_misa(csr_mip$mav_sip_write_misa),
		    .mav_sip_write_wordxl(csr_mip$mav_sip_write_wordxl),
		    .mav_write_misa(csr_mip$mav_write_misa),
		    .mav_write_wordxl(csr_mip$mav_write_wordxl),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_mav_write(csr_mip$EN_mav_write),
		    .EN_mav_sip_write(csr_mip$EN_mav_sip_write),
		    .mv_read(csr_mip$mv_read),
		    .mav_write(csr_mip$mav_write),
		    .mv_sip_read(csr_mip$mv_sip_read),
		    .mav_sip_write(csr_mip$mav_sip_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(soc_map$m_pcc_reset_value),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1049 ;
  assign MUX_rg_dcsr$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1341 ;
  assign MUX_rg_dpcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1351 ;
  assign MUX_rg_fflags$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1040 ;
  assign MUX_rg_frm$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1097 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24881 == 2'b11) ;
  assign MUX_rg_mcause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1321 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1273 ;
  assign MUX_rg_medeleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1215 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1277 ;
  assign MUX_rg_mideleg$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1224 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h19440 == 2'd0 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1229 ;
  assign MUX_rg_satp$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1213 ;
  assign MUX_rg_scause$write_1__SEL_2 =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b01 ;
  assign MUX_rg_scause$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1205 ;
  assign MUX_rg_sepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ;
  assign MUX_rg_sepcc$write_1__SEL_4 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1158 ;
  assign MUX_rg_stcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h19440 == 2'd0 ;
  assign MUX_rg_stcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1104 ;
  assign MUX_rg_stval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1209 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1333 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1329 ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 =
	     { sd__h28067, 40'd5120, fixed_up_val_23__h28068 } ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 =
	     { sd__h23096, 40'd5120, fixed_up_val_23__h23097 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word_BITS_14_TO_13_062_EQ_0x3_06_ETC___d1093 or
	  wordxl1__h10891)
  begin
    case (mav_csr_write_csr_addr)
      12'h001, 12'h002, 12'h003:
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 = wordxl1__h10891;
      default: MUX_csr_mstatus_rg_mstatus$write_1__VAL_5 =
		   mav_csr_write_word_BITS_14_TO_13_062_EQ_0x3_06_ETC___d1093;
    endcase
  end
  assign MUX_rg_dcsr$write_1__VAL_3 =
	     { rg_dcsr[31:9],
	       write_dcsr_cause_priv_cause,
	       rg_dcsr[5:2],
	       write_dcsr_cause_priv_priv } ;
  assign MUX_rg_dpcc$write_1__VAL_1 =
	     { soc_map$m_pcc_reset_value,
	       repBound__h4687,
	       soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9,
	       soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10,
	       soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 } ;
  assign MUX_rg_dpcc$write_1__VAL_3 =
	     { (highOffsetBits__h16598 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1365 ||
		rg_dpcc[43:38] >= 6'd50) &&
	       rg_dpcc[162],
	       result_d_address__h16788,
	       result_d_addrBits__h16789,
	       rg_dpcc[81:10],
	       repBound__h17014,
	       rg_dpcc_15_BITS_37_TO_35_393_ULT_rg_dpcc_15_BI_ETC___d1394,
	       rg_dpcc_15_BITS_23_TO_21_391_ULT_rg_dpcc_15_BI_ETC___d1395,
	       IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1407 } ;
  assign MUX_rg_fflags$write_1__VAL_3 =
	     rg_fflags | ma_update_fcsr_fflags_flags ;
  assign MUX_rg_frm$write_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'h002) ?
	       mav_csr_write_word[2:0] :
	       mav_csr_write_word[7:5] ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h27126 } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { mav_csr_write_word[63], mav_csr_write_word[5:0] } ;
  assign MUX_rg_mccsr$write_1__VAL_2 =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign MUX_rg_medeleg$write_1__VAL_1 =
	     { mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1682 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h19204,
	       capUnpacked_capFat_addrBits__h19205,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_4 =
	     { (highOffsetBits__h15079 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1291 ||
		rg_mepcc[33:28] >= 6'd50) &&
	       rg_mepcc[52:35] == 18'd262143 &&
	       rg_mepcc[152],
	       x_address__h15351,
	       x_addrBits__h15352,
	       rg_mepcc[71:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645 &&
	       mav_scr_write_cap[152],
	       capUnpacked_capFat_address__h19855,
	       capUnpacked_capFat_addrBits__h19856,
	       mav_scr_write_cap[71:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h14457 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1243 ||
		rg_mtcc[33:28] >= 6'd50) &&
	       rg_mtcc[52:35] == 18'd262143 &&
	       rg_mtcc[152],
	       x_address__h14745,
	       x_addrBits__h14746,
	       rg_mtcc[71:0] } ;
  assign MUX_rg_mtval$write_1__VAL_1 =
	     (csr_trap_actions_exc_code == 6'd28) ?
	       { 53'd0,
		 csr_trap_actions_cheri_exc_reg,
		 csr_trap_actions_cheri_exc_code } :
	       csr_trap_actions_xtval ;
  assign MUX_rg_sepcc$write_1__VAL_4 =
	     { (highOffsetBits__h12636 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1174 ||
		rg_sepcc[33:28] >= 6'd50) &&
	       rg_sepcc[52:35] == 18'd262143 &&
	       rg_sepcc[152],
	       x_address__h12908,
	       x_addrBits__h12909,
	       rg_sepcc[71:0] } ;
  assign MUX_rg_stcc$write_1__VAL_3 =
	     { (highOffsetBits__h12105 == 50'd0 &&
		IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1125 ||
		rg_stcc[33:28] >= 6'd50) &&
	       rg_stcc[52:35] == 18'd262143 &&
	       rg_stcc[152],
	       x_address__h12399,
	       x_addrBits__h12400,
	       rg_stcc[71:0] } ;

  // inlined wires
  assign rw_mcycle$whas =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1327 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_2 or
	  EN_csr_trap_actions or
	  v__h24886 or
	  EN_ma_update_mstatus_fs or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_4 or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_5 or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_5)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start:
	csr_mstatus_rg_mstatus$D_IN = 64'h0000000A00002000;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_2;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = v__h24886;
    EN_ma_update_mstatus_fs:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_4;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_5:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_5;
    default: csr_mstatus_rg_mstatus$D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1049 ||
	     EN_csr_trap_actions ||
	     EN_ma_update_mstatus_fs ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dcsr
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dcsr$write_1__SEL_2 or
	  new_dcsr__h16309 or
	  EN_write_dcsr_cause_priv or MUX_rg_dcsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dcsr$D_IN = 32'd1073741843;
    MUX_rg_dcsr$write_1__SEL_2: rg_dcsr$D_IN = new_dcsr__h16309;
    EN_write_dcsr_cause_priv: rg_dcsr$D_IN = MUX_rg_dcsr$write_1__VAL_3;
    default: rg_dcsr$D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dcsr$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1341 ||
	     EN_write_dcsr_cause_priv ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dpcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dpcc$write_1__VAL_1 or
	  EN_write_dpcc or
	  write_dpcc_pcc or
	  MUX_rg_dpcc$write_1__SEL_3 or MUX_rg_dpcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_1;
    EN_write_dpcc: rg_dpcc$D_IN = write_dpcc_pcc;
    MUX_rg_dpcc$write_1__SEL_3: rg_dpcc$D_IN = MUX_rg_dpcc$write_1__VAL_3;
    default: rg_dpcc$D_IN =
		 163'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dpcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1351 ||
	     EN_write_dpcc ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = mav_csr_write_word ;
  assign rg_dscratch0$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1411 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = mav_csr_write_word ;
  assign rg_dscratch1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1413 ;

  // register rg_fflags
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_fflags$write_1__SEL_2 or
	  mav_csr_write_word or
	  EN_ma_update_fcsr_fflags or MUX_rg_fflags$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_fflags$D_IN = 5'd0;
    MUX_rg_fflags$write_1__SEL_2: rg_fflags$D_IN = mav_csr_write_word[4:0];
    EN_ma_update_fcsr_fflags: rg_fflags$D_IN = MUX_rg_fflags$write_1__VAL_3;
    default: rg_fflags$D_IN = 5'bxxxxx /* unspecified value */ ;
  endcase
  assign rg_fflags$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1040 ||
	     EN_ma_update_fcsr_fflags ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_frm
  assign rg_frm$D_IN =
	     MUX_rg_frm$write_1__SEL_1 ? MUX_rg_frm$write_1__VAL_1 : 3'd0 ;
  assign rg_frm$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1097 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_3:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24881 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1321 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b11 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[2:0] :
	       3'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1273 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rw_mcycle$whas ? mav_csr_write_word : x__h4873 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_medeleg
  assign rg_medeleg$D_IN =
	     MUX_rg_medeleg$write_1__SEL_1 ?
	       MUX_rg_medeleg$write_1__VAL_1 :
	       29'd0 ;
  assign rg_medeleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1215 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_mepcc$write_1__SEL_4 or MUX_rg_mepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_mepcc$write_1__SEL_4: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_4;
    default: rg_mepcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24881 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1277 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mideleg
  assign rg_mideleg$D_IN =
	     MUX_rg_mideleg$write_1__SEL_1 ?
	       mav_csr_write_word[11:0] :
	       12'd0 ;
  assign rg_mideleg$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1224 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1275 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN = mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1229 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     x__h19440 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN = mav_scr_write_cap ;
  assign rg_mtdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mcause$write_1__SEL_2 ?
	       MUX_rg_mtval$write_1__VAL_1 :
	       mav_csr_write_word ;
  assign rg_mtval$EN =
	     EN_csr_trap_actions &&
	     (csr_trap_actions_nmi || new_priv__h24881 == 2'b11) ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1323 ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = 1'b1 ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_satp
  assign rg_satp$D_IN =
	     MUX_rg_satp$write_1__SEL_1 ? mav_csr_write_word : 64'd0 ;
  assign rg_satp$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1213 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_scause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_scause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_scause$D_IN = 7'd0;
    MUX_rg_scause$write_1__SEL_2:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_3:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_scause$D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_scause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1205 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sccsr
  assign rg_sccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_sccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b01 &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_sepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_2 or
	  csr_trap_actions_pcc or
	  MUX_rg_sepcc$write_1__SEL_4 or MUX_rg_sepcc$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_sepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_sepcc$write_1__SEL_2: rg_sepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_2:
	rg_sepcc$D_IN = csr_trap_actions_pcc[162:10];
    MUX_rg_sepcc$write_1__SEL_4: rg_sepcc$D_IN = MUX_rg_sepcc$write_1__VAL_4;
    default: rg_sepcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_sepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd15 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1158 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b01 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sscratch
  assign rg_sscratch$D_IN = mav_csr_write_word ;
  assign rg_sscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1156 ;

  // register rg_sscratchc
  assign rg_sscratchc$D_IN = mav_scr_write_cap ;
  assign rg_sscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd14 ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_stcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_stcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_stcc$write_1__SEL_3 or MUX_rg_stcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_stcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_stcc$write_1__SEL_2: rg_stcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_stcc$write_1__SEL_3: rg_stcc$D_IN = MUX_rg_stcc$write_1__VAL_3;
    default: rg_stcc$D_IN =
		 153'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_stcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1104 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd12 &&
	     x__h19440 == 2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_stdc
  assign rg_stdc$D_IN = mav_scr_write_cap ;
  assign rg_stdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd13 ;

  // register rg_stval
  assign rg_stval$D_IN =
	     MUX_rg_stval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       MUX_rg_mtval$write_1__VAL_1 ;
  assign rg_stval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1209 ||
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     new_priv__h24881 == 2'b01 ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? new_csr_value__h16205 : 64'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1333 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1337 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1339 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 64'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1331 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$mav_sie_write_misa = 28'd135532845 ;
  assign csr_mie$mav_sie_write_wordxl = mav_csr_write_word ;
  assign csr_mie$mav_write_misa = 28'd135532845 ;
  assign csr_mie$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1227 ;
  assign csr_mie$EN_mav_sie_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1102 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$mav_sip_write_misa = 28'd135532845 ;
  assign csr_mip$mav_sip_write_wordxl = mav_csr_write_word ;
  assign csr_mip$mav_write_misa = 28'd135532845 ;
  assign csr_mip$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1325 ;
  assign csr_mip$EN_mav_sip_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1211 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_ret_actions_from_priv_EQ_0b11_415_TH_ETC___d2469 =
	     { a_capFat_otype__h28895,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[34:0] :
		 rg_sepcc[34:0] } ;
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2377 =
	     _theResult_____2__h26343[63] ?
	       x__h27503[13:0] >= toBounds__h27313 :
	       x__h27503[13:0] <= toBoundsM1__h27314 ;
  assign IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165 =
	     (new_priv__h24881 == 2'b11) ?
	       { csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157[63:13],
		 csr_trap_actions_from_priv,
		 csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157[10:0] } :
	       { csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157[63:9],
		 csr_trap_actions_from_priv[0],
		 csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157[7:0] } ;
  assign IF_IF_mav_scr_write_cap_BITS_33_TO_28_589_EQ_0_ETC___d1819 =
	     { x1_avValue_reserved__h20084,
	       x1_avValue_otype__h20085,
	       x__h19440 != 2'd0 || mav_scr_write_cap[34],
	       (x__h19440 == 2'd0) ?
		 mav_scr_write_cap[33:0] :
		 34'h344000000 } ;
  assign IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3011 =
	     (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936 &&
	      NOT_csr_mip_mv_read__01_BIT_3_834_937_OR_NOT_c_ETC___d2944 &&
	      NOT_csr_mip_mv_read__01_BIT_7_845_946_OR_NOT_c_ETC___d2953) ?
	       6'd9 :
	       ((NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936 &&
		 NOT_csr_mip_mv_read__01_BIT_3_834_937_OR_NOT_c_ETC___d2944) ?
		  6'd7 :
		  (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936 ?
		     6'd3 :
		     6'd11)) ;
  assign IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3013 =
	     (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963 &&
	      NOT_csr_mip_mv_read__01_BIT_1_867_964_OR_NOT_c_ETC___d2971) ?
	       6'd5 :
	       (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963 ?
		  6'd1 :
		  IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3011) ;
  assign IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3014 =
	     (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963 &&
	      NOT_csr_mip_mv_read__01_BIT_1_867_964_OR_NOT_c_ETC___d2971 &&
	      NOT_csr_mip_mv_read__01_BIT_5_878_973_OR_NOT_c_ETC___d2980) ?
	       6'd8 :
	       IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3013 ;
  assign IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3016 =
	     (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2990 &&
	      NOT_csr_mip_mv_read__01_BIT_0_900_991_OR_NOT_c_ETC___d2998) ?
	       6'd4 :
	       (NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2990 ?
		  6'd0 :
		  IF_NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_N_ETC___d3014) ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1638 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63] ?
	       x__h19716[13:0] >= toBounds__h20208 :
	       x__h19716[13:0] <= toBoundsM1__h20209 ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1677 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63] ?
	       x__h19040[13:0] >= toBounds__h20208 :
	       x__h19040[13:0] <= toBoundsM1__h20209 ;
  assign IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055 =
	     (csr_mstatus_rg_mstatus[12:11] == 2'b10) ?
	       2'b01 :
	       csr_mstatus_rg_mstatus[12:11] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h28161 :
	       _theResult___fst__h28362 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2471 =
	     { a_capFat_addrBits__h28891,
	       (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[71:56] :
		 rg_sepcc[71:56],
	       a_capFat_flags__h28893,
	       a_capFat_reserved__h28894,
	       IF_IF_csr_ret_actions_from_priv_EQ_0b11_415_TH_ETC___d2469 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2472 =
	     { (csr_ret_actions_from_priv == 2'b11) ?
		 rg_mepcc[152] :
		 rg_sepcc[152],
	       a_capFat_address__h28890,
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2471 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2491 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { repBound__h6500,
		 rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc_71__ETC___d2474,
		 rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_71_B_ETC___d376,
		 rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378,
		 IF_rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc__ETC___d2479 } :
	       { repBound__h5948,
		 rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc_97__ETC___d2483,
		 rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_97_B_ETC___d302,
		 rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304,
		 IF_rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc__ETC___d2488 } ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2497 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[12:11],
		 _theResult___fst__h28161 } :
	       { to_y__h28361, _theResult___fst__h28362 } ;
  assign IF_csr_trap_actions_interrupt_AND_NOT_csr_trap_ETC___d2385 =
	     (highOffsetBits__h27304 == 50'd0 &&
	      IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d2377 ||
	      IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 >=
	      6'd50) &&
	     ((new_priv__h24881 == 2'b11) ? rg_mtcc[152] : rg_stcc[152]) ;
  assign IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 =
	     (new_priv__h24881 == 2'b11) ? rg_mtcc[33:28] : rg_stcc[33:28] ;
  assign IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1125 =
	     mav_csr_write_word[63] ?
	       x__h12255[13:0] >= toBounds__h12114 :
	       x__h12255[13:0] <= toBoundsM1__h12115 ;
  assign IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1174 =
	     mav_csr_write_word[63] ?
	       x__h12770[13:0] >= toBounds__h12645 :
	       x__h12770[13:0] <= toBoundsM1__h12646 ;
  assign IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1243 =
	     mav_csr_write_word[63] ?
	       x__h14607[13:0] >= toBounds__h14466 :
	       x__h14607[13:0] <= toBoundsM1__h14467 ;
  assign IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1291 =
	     mav_csr_write_word[63] ?
	       x__h15213[13:0] >= toBounds__h15088 :
	       x__h15213[13:0] <= toBoundsM1__h15089 ;
  assign IF_mav_csr_write_word_BIT_63_106_THEN_NOT_mav__ETC___d1365 =
	     mav_csr_write_word[63] ?
	       x__h16718[13:0] >= toBounds__h16607 :
	       x__h16718[13:0] <= toBoundsM1__h16608 ;
  assign IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397 =
	     result_d_addrBits__h16789[13:11] < repBound__h17014 ;
  assign IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1407 =
	     { IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397,
	       (rg_dpcc_15_BITS_37_TO_35_393_ULT_rg_dpcc_15_BI_ETC___d1394 ==
		IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397) ?
		 2'd0 :
		 ((rg_dpcc_15_BITS_37_TO_35_393_ULT_rg_dpcc_15_BI_ETC___d1394 &&
		   !IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397) ?
		    2'd1 :
		    2'd3),
	       (rg_dpcc_15_BITS_23_TO_21_391_ULT_rg_dpcc_15_BI_ETC___d1395 ==
		IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397) ?
		 2'd0 :
		 ((rg_dpcc_15_BITS_23_TO_21_391_ULT_rg_dpcc_15_BI_ETC___d1395 &&
		   !IF_rg_dpcc_15_BITS_43_TO_38_23_EQ_52_381_THEN__ETC___d1397) ?
		    2'd1 :
		    2'd3) } ;
  assign IF_rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_7_ETC___d383 =
	     (rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_71_B_ETC___d376 ==
	      rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378) ?
	       2'd0 :
	       ((rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_71_B_ETC___d376 &&
		 !rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc__ETC___d2479 =
	     { (rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc_71__ETC___d2474 ==
		rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378) ?
		 2'd0 :
		 ((rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc_71__ETC___d2474 &&
		   !rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_7_ETC___d383 } ;
  assign IF_rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_9_ETC___d309 =
	     (rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_97_B_ETC___d302 ==
	      rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304) ?
	       2'd0 :
	       ((rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_97_B_ETC___d302 &&
		 !rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304) ?
		  2'd1 :
		  2'd3) ;
  assign IF_rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc__ETC___d2488 =
	     { (rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc_97__ETC___d2483 ==
		rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304) ?
		 2'd0 :
		 ((rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc_97__ETC___d2483 &&
		   !rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304) ?
		    2'd1 :
		    2'd3),
	       IF_rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_9_ETC___d309 } ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_498__ETC___d2607 =
	     (!access_permitted_1_csr_addr_ULT_0xC03___d2498 &&
	      access_permitted_1_csr_addr_ULE_0xC1F___d2500 ||
	      access_permitted_1_csr_addr >= 12'hB03 &&
	      access_permitted_1_csr_addr <= 12'hB1F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'h001 ||
	      access_permitted_1_csr_addr == 12'h002 ||
	      access_permitted_1_csr_addr == 12'h003 ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'h100 ||
	      access_permitted_1_csr_addr == 12'h102 ||
	      access_permitted_1_csr_addr == 12'h103 ||
	      access_permitted_1_csr_addr == 12'h104 ||
	      access_permitted_1_csr_addr == 12'h105 ||
	      access_permitted_1_csr_addr == 12'h106 ||
	      access_permitted_1_csr_addr == 12'h140 ||
	      access_permitted_1_csr_addr == 12'h141 ||
	      access_permitted_1_csr_addr == 12'h142 ||
	      access_permitted_1_csr_addr == 12'h143 ||
	      access_permitted_1_csr_addr == 12'h144 ||
	      access_permitted_1_csr_addr == 12'h180 ||
	      access_permitted_1_csr_addr == 12'h302 ||
	      access_permitted_1_csr_addr == 12'h303 ||
	      access_permitted_1_csr_addr == 12'h9C0 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'h320 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3 ||
	      access_permitted_1_csr_addr == 12'h7B0 ||
	      access_permitted_1_csr_addr == 12'h7B1 ||
	      access_permitted_1_csr_addr == 12'h7B2 ||
	      access_permitted_1_csr_addr == 12'h7B3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_1_read_not_write_618_OR_a_ETC___d2633 =
	     (!access_permitted_1_read_not_write ||
	      access_permitted_1_csr_addr_ULT_0xC03___d2498 ||
	      !access_permitted_1_csr_addr_ULE_0xC1F___d2500) &&
	     access_permitted_1_csr_addr != 12'h001 &&
	     access_permitted_1_csr_addr != 12'h002 &&
	     access_permitted_1_csr_addr != 12'h003 &&
	     (access_permitted_1_csr_addr != 12'hC00 ||
	      !access_permitted_1_read_not_write) &&
	     (access_permitted_1_csr_addr != 12'hC02 ||
	      !access_permitted_1_read_not_write) ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_634__ETC___d2743 =
	     (!access_permitted_2_csr_addr_ULT_0xC03___d2634 &&
	      access_permitted_2_csr_addr_ULE_0xC1F___d2636 ||
	      access_permitted_2_csr_addr >= 12'hB03 &&
	      access_permitted_2_csr_addr <= 12'hB1F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'h001 ||
	      access_permitted_2_csr_addr == 12'h002 ||
	      access_permitted_2_csr_addr == 12'h003 ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'h100 ||
	      access_permitted_2_csr_addr == 12'h102 ||
	      access_permitted_2_csr_addr == 12'h103 ||
	      access_permitted_2_csr_addr == 12'h104 ||
	      access_permitted_2_csr_addr == 12'h105 ||
	      access_permitted_2_csr_addr == 12'h106 ||
	      access_permitted_2_csr_addr == 12'h140 ||
	      access_permitted_2_csr_addr == 12'h141 ||
	      access_permitted_2_csr_addr == 12'h142 ||
	      access_permitted_2_csr_addr == 12'h143 ||
	      access_permitted_2_csr_addr == 12'h144 ||
	      access_permitted_2_csr_addr == 12'h180 ||
	      access_permitted_2_csr_addr == 12'h302 ||
	      access_permitted_2_csr_addr == 12'h303 ||
	      access_permitted_2_csr_addr == 12'h9C0 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'h320 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3 ||
	      access_permitted_2_csr_addr == 12'h7B0 ||
	      access_permitted_2_csr_addr == 12'h7B1 ||
	      access_permitted_2_csr_addr == 12'h7B2 ||
	      access_permitted_2_csr_addr == 12'h7B3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_access_permitted_2_read_not_write_752_OR_a_ETC___d2767 =
	     (!access_permitted_2_read_not_write ||
	      access_permitted_2_csr_addr_ULT_0xC03___d2634 ||
	      !access_permitted_2_csr_addr_ULE_0xC1F___d2636) &&
	     access_permitted_2_csr_addr != 12'h001 &&
	     access_permitted_2_csr_addr != 12'h002 &&
	     access_permitted_2_csr_addr != 12'h003 &&
	     (access_permitted_2_csr_addr != 12'hC00 ||
	      !access_permitted_2_read_not_write) &&
	     (access_permitted_2_csr_addr != 12'hC02 ||
	      !access_permitted_2_read_not_write) ;
  assign NOT_cfg_verbosity_read__507_ULE_1_508___d1509 =
	     cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_mv_read__01_BIT_0_900_991_OR_NOT_c_ETC___d2998 =
	     !csr_mip$mv_read[0] || !csr_mie$mv_read[0] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2905 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2906 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936 =
	     !csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2821 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2822 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963 =
	     NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2936 &&
	     NOT_csr_mip_mv_read__01_BIT_3_834_937_OR_NOT_c_ETC___d2944 &&
	     NOT_csr_mip_mv_read__01_BIT_7_845_946_OR_NOT_c_ETC___d2953 &&
	     NOT_csr_mip_mv_read__01_BIT_9_856_955_OR_NOT_c_ETC___d2962 ;
  assign NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2990 =
	     NOT_csr_mip_mv_read__01_BIT_11_816_922_OR_NOT__ETC___d2963 &&
	     NOT_csr_mip_mv_read__01_BIT_1_867_964_OR_NOT_c_ETC___d2971 &&
	     NOT_csr_mip_mv_read__01_BIT_5_878_973_OR_NOT_c_ETC___d2980 &&
	     NOT_csr_mip_mv_read__01_BIT_8_889_982_OR_NOT_c_ETC___d2989 ;
  assign NOT_csr_mip_mv_read__01_BIT_1_867_964_OR_NOT_c_ETC___d2971 =
	     !csr_mip$mv_read[1] || !csr_mie$mv_read[1] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2872 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2873 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_3_834_937_OR_NOT_c_ETC___d2944 =
	     !csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2839 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2840 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_5_878_973_OR_NOT_c_ETC___d2980 =
	     !csr_mip$mv_read[5] || !csr_mie$mv_read[5] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2883 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2884 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_7_845_946_OR_NOT_c_ETC___d2953 =
	     !csr_mip$mv_read[7] || !csr_mie$mv_read[7] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2850 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2851 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_8_889_982_OR_NOT_c_ETC___d2989 =
	     !csr_mip$mv_read[8] || !csr_mie$mv_read[8] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2894 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2895 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_mip_mv_read__01_BIT_9_856_955_OR_NOT_c_ETC___d2962 =
	     !csr_mip$mv_read[9] || !csr_mie$mv_read[9] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2861 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2862 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933) ;
  assign NOT_csr_trap_actions_nmi_187_AND_csr_trap_acti_ETC___d2301 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h27126 != 6'd0 &&
	     exc_code__h27126 != 6'd1 &&
	     exc_code__h27126 != 6'd2 &&
	     exc_code__h27126 != 6'd3 &&
	     exc_code__h27126 != 6'd4 &&
	     exc_code__h27126 != 6'd5 &&
	     exc_code__h27126 != 6'd6 &&
	     exc_code__h27126 != 6'd7 &&
	     exc_code__h27126 != 6'd8 &&
	     exc_code__h27126 != 6'd9 &&
	     exc_code__h27126 != 6'd10 &&
	     exc_code__h27126 != 6'd11 ;
  assign NOT_mav_scr_write_cap_BITS_33_TO_28_589_ULT_50_ETC___d1641 =
	     mav_scr_write_cap[33:28] >= 6'd50 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1720 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1722 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     !mav_scr_write_cap[34] ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1765 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1767 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     !mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1768 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1770 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     !mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1771 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601 ;
  assign NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1772 =
	     mav_scr_write_scr_addr != 5'd12 &&
	     mav_scr_write_scr_addr != 5'd13 &&
	     mav_scr_write_scr_addr != 5'd15 &&
	     mav_scr_write_scr_addr != 5'd14 &&
	     mav_scr_write_scr_addr != 5'd28 &&
	     mav_scr_write_scr_addr != 5'd29 &&
	     mav_scr_write_scr_addr != 5'd31 &&
	     mav_scr_write_scr_addr != 5'd30 &&
	     NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	     !mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617 =
	     x__h21960 | in__h22029[63:0] ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645 =
	     (highOffsetBits__h19462 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1638 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_589_ULT_50_ETC___d1641) &&
	     mav_scr_write_cap[52:35] == 18'd262143 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1682 =
	     (highOffsetBits__h19462 == 50'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_ETC___d1677 ||
	      NOT_mav_scr_write_cap_BITS_33_TO_28_589_ULT_50_ETC___d1641) &&
	     (mav_scr_write_cap[52:35] == 18'd262143 ||
	      !SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[0]) ;
  assign SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430 =
	     x__h7321 | in__h6813[63:0] ;
  assign SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395 =
	     x__h6462 | in__h6578[63:0] ;
  assign SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 =
	     x__h6242 | in__h6358[63:0] ;
  assign SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321 =
	     x__h5910 | in__h6026[63:0] ;
  assign SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292 =
	     x__h5702 | in__h5818[63:0] ;
  assign _0_CONCAT_IF_csr_trap_actions_nmi_THEN_DONTCARE_ETC___d2412 =
	     { result_d_address__h27573,
	       result_d_addrBits__h27574,
	       (new_priv__h24881 == 2'b11) ? rg_mtcc[71:0] : rg_stcc[71:0] } ;
  assign _theResult_____2__h26343 =
	     csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2200 ?
	       exc_pc___1__h26433 :
	       exc_pc__h26341 ;
  assign _theResult____h30196 = rg_mideleg[11] ? 2'b01 : 2'b11 ;
  assign _theResult____h30408 = rg_mideleg[3] ? 2'b01 : 2'b11 ;
  assign _theResult____h30620 = rg_mideleg[7] ? 2'b01 : 2'b11 ;
  assign _theResult____h30832 = rg_mideleg[9] ? 2'b01 : 2'b11 ;
  assign _theResult____h31044 = rg_mideleg[1] ? 2'b01 : 2'b11 ;
  assign _theResult____h31256 = rg_mideleg[5] ? 2'b01 : 2'b11 ;
  assign _theResult____h31468 = rg_mideleg[8] ? 2'b01 : 2'b11 ;
  assign _theResult____h31680 = rg_mideleg[0] ? 2'b01 : 2'b11 ;
  assign _theResult____h31892 = rg_mideleg[4] ? 2'b01 : 2'b11 ;
  assign _theResult___fst__h25019 =
	     (csr_trap_actions_interrupt ?
		deleg_bit___1__h25028 :
		deleg_bit___1__h25043) ?
	       2'b01 :
	       2'b11 ;
  assign _theResult___fst__h28161 =
	     { csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[63:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[10:0] } ;
  assign _theResult___fst__h28362 =
	     { csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[63:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[7:0] } ;
  assign a_capFat_addrBits__h28891 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[85:72] :
	       rg_sepcc[85:72] ;
  assign a_capFat_address__h28890 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[151:86] :
	       rg_sepcc[151:86] ;
  assign a_capFat_flags__h28893 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[55] :
	       rg_sepcc[55] ;
  assign a_capFat_otype__h28895 =
	     (x__h28828 == 18'd262142) ? 18'd262143 : x__h28828 ;
  assign a_capFat_reserved__h28894 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[54:53] :
	       rg_sepcc[54:53] ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d2500 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d2498 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d2636 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d2634 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign addBase__h12419 =
	     { {48{x__h12476[15]}}, x__h12476 } << rg_stcc[33:28] ;
  assign addBase__h12928 =
	     { {48{x__h12985[15]}}, x__h12985 } << rg_sepcc[33:28] ;
  assign addBase__h14765 =
	     { {48{x__h14822[15]}}, x__h14822 } << rg_mtcc[33:28] ;
  assign addBase__h15371 =
	     { {48{x__h15428[15]}}, x__h15428 } << rg_mepcc[33:28] ;
  assign addBase__h16808 =
	     { {48{base__h7308[15]}}, base__h7308 } << rg_dpcc[43:38] ;
  assign addBase__h21026 =
	     { {48{x__h21083[15]}}, x__h21083 } << mav_scr_write_cap[33:28] ;
  assign addBase__h27605 =
	     { {48{x__h27662[15]}}, x__h27662 } <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 ;
  assign addTop__h21148 =
	     { {50{x__h21238[15]}}, x__h21238 } << mav_scr_write_cap[33:28] ;
  assign b__h25106 = csr_mstatus_rg_mstatus[ie_to_x__h25007] ;
  assign b__h28198 = csr_mstatus_rg_mstatus[pie_from_x__h28146] ;
  assign base__h23772 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[23:10] } ;
  assign base__h7308 = { rg_dpcc[1:0], rg_dpcc[23:10] } ;
  assign bot__h12422 =
	     { rg_stcc[149:100] & highBitsfilter__h12104, 14'd0 } +
	     addBase__h12419 ;
  assign bot__h12931 =
	     { rg_sepcc[149:100] & highBitsfilter__h12635, 14'd0 } +
	     addBase__h12928 ;
  assign bot__h14768 =
	     { rg_mtcc[149:100] & highBitsfilter__h14456, 14'd0 } +
	     addBase__h14765 ;
  assign bot__h15374 =
	     { rg_mepcc[149:100] & highBitsfilter__h15078, 14'd0 } +
	     addBase__h15371 ;
  assign bot__h16811 =
	     { rg_dpcc[159:110] & highBitsfilter__h16597, 14'd0 } +
	     addBase__h16808 ;
  assign bot__h21029 =
	     { mav_scr_write_cap[149:100] & mask__h21027, 14'd0 } +
	     addBase__h21026 ;
  assign bot__h27608 =
	     { x__h27615[63:14] & highBitsfilter__h27303, 14'd0 } +
	     addBase__h27605 ;
  assign capUnpacked_capFat_addrBits__h19205 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h19184[12:0] } :
	       newAddrBits__h19184[13:0] ;
  assign capUnpacked_capFat_addrBits__h19856 =
	     (mav_scr_write_cap[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h19835[12:0] } :
	       newAddrBits__h19835[13:0] ;
  assign capUnpacked_capFat_address__h19204 =
	     { 2'd0, bot__h21029 } + { 2'd0, offsetAddr__h18782 } ;
  assign capUnpacked_capFat_address__h19855 =
	     { 2'd0, bot__h21029 } + { 2'd0, offsetAddr__h19458 } ;
  assign csr_mip_mv_read__01_BIT_0_900_AND_csr_mie_mv_r_ETC___d2909 =
	     csr_mip$mv_read[0] && csr_mie$mv_read[0] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2905 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2906 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2833 =
	     csr_mip$mv_read[11] && csr_mie$mv_read[11] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2821 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2822 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2899 =
	     csr_mip_mv_read__01_BIT_11_816_AND_csr_mie_mv__ETC___d2833 ||
	     csr_mip_mv_read__01_BIT_3_834_AND_csr_mie_mv_r_ETC___d2843 ||
	     csr_mip_mv_read__01_BIT_7_845_AND_csr_mie_mv_r_ETC___d2854 ||
	     csr_mip_mv_read__01_BIT_9_856_AND_csr_mie_mv_r_ETC___d2865 ||
	     csr_mip_mv_read__01_BIT_1_867_AND_csr_mie_mv_r_ETC___d2876 ||
	     csr_mip_mv_read__01_BIT_5_878_AND_csr_mie_mv_r_ETC___d2887 ||
	     csr_mip_mv_read__01_BIT_8_889_AND_csr_mie_mv_r_ETC___d2898 ;
  assign csr_mip_mv_read__01_BIT_1_867_AND_csr_mie_mv_r_ETC___d2876 =
	     csr_mip$mv_read[1] && csr_mie$mv_read[1] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2872 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2873 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_3_834_AND_csr_mie_mv_r_ETC___d2843 =
	     csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2839 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2840 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_4_911_AND_csr_mie_mv_r_ETC___d2920 =
	     csr_mip$mv_read[4] && csr_mie$mv_read[4] &&
	     (interrupt_pending_cur_priv < _theResult____h31892 ||
	      interrupt_pending_cur_priv == _theResult____h31892 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_5_878_AND_csr_mie_mv_r_ETC___d2887 =
	     csr_mip$mv_read[5] && csr_mie$mv_read[5] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2883 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2884 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_7_845_AND_csr_mie_mv_r_ETC___d2854 =
	     csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2850 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2851 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_8_889_AND_csr_mie_mv_r_ETC___d2898 =
	     csr_mip$mv_read[8] && csr_mie$mv_read[8] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2894 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2895 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mip_mv_read__01_BIT_9_856_AND_csr_mie_mv_r_ETC___d2865 =
	     csr_mip$mv_read[9] && csr_mie$mv_read[9] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2861 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2862 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830) ;
  assign csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428 =
	     x__h28194 | mask__h28182 ;
  assign csr_mstatus_rg_mstatus_52_AND_INV_1_SL_1_CONCA_ETC___d2157 =
	     x__h25102 | val__h25091 ;
  assign csr_trap_actions_interrupt_AND_NOT_csr_trap_ac_ETC___d2200 =
	     csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	     CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2352 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h27126 != 6'd0 &&
	     exc_code__h27126 != 6'd1 &&
	     exc_code__h27126 != 6'd2 &&
	     exc_code__h27126 != 6'd3 &&
	     exc_code__h27126 != 6'd4 &&
	     exc_code__h27126 != 6'd5 &&
	     exc_code__h27126 != 6'd6 &&
	     exc_code__h27126 != 6'd7 &&
	     exc_code__h27126 != 6'd8 &&
	     exc_code__h27126 != 6'd9 &&
	     exc_code__h27126 != 6'd11 &&
	     exc_code__h27126 != 6'd12 &&
	     exc_code__h27126 != 6'd13 &&
	     exc_code__h27126 != 6'd15 ;
  assign dcsr__h7150 = { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] } ;
  assign deleg_bit___1__h25028 = rg_mideleg[csr_trap_actions_exc_code[3:0]] ;
  assign deleg_bit___1__h25043 = rg_medeleg[csr_trap_actions_exc_code[4:0]] ;
  assign exc_code__h27126 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h26433 = exc_pc__h26341 + vector_offset__h26342 ;
  assign exc_pc__h26341 =
	     csr_trap_actions_nmi ?
	       rg_nmi_vector :
	       y_avValue_snd_snd_snd__h26395 ;
  assign fixed_up_val_23__h10932 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd3,
	       IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h11512 =
	     { csr_mstatus_rg_mstatus[22:20],
	       mav_csr_write_word[19:18],
	       csr_mstatus_rg_mstatus[17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055,
	       csr_mstatus_rg_mstatus[10:9],
	       mav_csr_write_word[8],
	       csr_mstatus_rg_mstatus[7:6],
	       mav_csr_write_word[5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:2],
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign fixed_up_val_23__h13893 =
	     { mav_csr_write_word[22:17],
	       2'd0,
	       mav_csr_write_word[14:13],
	       (mav_csr_write_word[12:11] == 2'b10) ?
		 2'b01 :
		 mav_csr_write_word[12:11],
	       mav_csr_write_word[10:5],
	       1'd0,
	       mav_csr_write_word[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h22543 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       mv_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h23097 =
	     { csr_mstatus_rg_mstatus[22:17],
	       2'd0,
	       ma_update_mstatus_fs_fs,
	       IF_csr_mstatus_rg_mstatus_52_BITS_12_TO_11_053_ETC___d1055,
	       csr_mstatus_rg_mstatus[10:5],
	       1'd0,
	       csr_mstatus_rg_mstatus[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h24930 =
	     { IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[22:17],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[14:13],
	       (IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[12:11],
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[10:5],
	       1'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[3:1],
	       1'd0 } ;
  assign fixed_up_val_23__h28068 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[22:17],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[14:13],
	       (IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[12:11] ==
		2'b10) ?
		 2'b01 :
		 IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[12:11],
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[10:5],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[3:1],
	       1'd0 } ;
  assign highBitsfilter__h12104 = 50'h3FFFFFFFFFFFF << rg_stcc[33:28] ;
  assign highBitsfilter__h12635 = 50'h3FFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign highBitsfilter__h14456 = 50'h3FFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign highBitsfilter__h15078 = 50'h3FFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign highBitsfilter__h16597 = 50'h3FFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign highBitsfilter__h27303 =
	     50'h3FFFFFFFFFFFF <<
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 ;
  assign highOffsetBits__h12105 = x__h16625 & highBitsfilter__h12104 ;
  assign highOffsetBits__h12636 = x__h16625 & highBitsfilter__h12635 ;
  assign highOffsetBits__h14457 = x__h16625 & highBitsfilter__h14456 ;
  assign highOffsetBits__h15079 = x__h16625 & highBitsfilter__h15078 ;
  assign highOffsetBits__h16598 = x__h16625 & highBitsfilter__h16597 ;
  assign highOffsetBits__h19462 = x__h19489 & mask__h21027 ;
  assign highOffsetBits__h27304 = x__h27331 & highBitsfilter__h27303 ;
  assign ie_from_x__h28145 = { 4'd0, csr_ret_actions_from_priv } ;
  assign ie_to_x__h25007 = { 4'd0, new_priv__h24881 } ;
  assign in__h22029 = mav_scr_write_cap[151:86] & y__h22046 ;
  assign in__h23894 = csr_trap_actions_pcc[161:96] & y__h23911 ;
  assign in__h5818 = rg_stcc[151:86] & y__h5835 ;
  assign in__h6026 = rg_sepcc[151:86] & y__h6043 ;
  assign in__h6358 = rg_mtcc[151:86] & y__h6375 ;
  assign in__h6578 = rg_mepcc[151:86] & y__h6595 ;
  assign in__h6813 = rg_dpcc[161:96] & y__h6830 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2822 =
	     interrupt_pending_cur_priv == _theResult____h30196 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2840 =
	     interrupt_pending_cur_priv == _theResult____h30408 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2851 =
	     interrupt_pending_cur_priv == _theResult____h30620 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2862 =
	     interrupt_pending_cur_priv == _theResult____h30832 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2873 =
	     interrupt_pending_cur_priv == _theResult____h31044 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2884 =
	     interrupt_pending_cur_priv == _theResult____h31256 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2895 =
	     interrupt_pending_cur_priv == _theResult____h31468 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_34_ETC___d2906 =
	     interrupt_pending_cur_priv == _theResult____h31680 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2821 =
	     interrupt_pending_cur_priv < _theResult____h30196 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2839 =
	     interrupt_pending_cur_priv < _theResult____h30408 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2850 =
	     interrupt_pending_cur_priv < _theResult____h30620 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2861 =
	     interrupt_pending_cur_priv < _theResult____h30832 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2872 =
	     interrupt_pending_cur_priv < _theResult____h31044 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2883 =
	     interrupt_pending_cur_priv < _theResult____h31256 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2894 =
	     interrupt_pending_cur_priv < _theResult____h31468 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_3_ETC___d2905 =
	     interrupt_pending_cur_priv < _theResult____h31680 ;
  assign length__h21856 = { 50'd0, x__h21861 } << mav_scr_write_cap[33:28] ;
  assign mask__h21027 = 50'h3FFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h21149 = 52'hFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign mask__h25090 = 64'd1 << ie_to_x__h25007 ;
  assign mask__h25107 = 64'd1 << pie_to_x__h25008 ;
  assign mask__h28182 = 64'd1 << pie_from_x__h28146 ;
  assign mask__h28199 = 64'd1 << ie_from_x__h28145 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d1033 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d1029 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULT_0x323_032_OR_NOT_ma_ETC___d1505 =
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr != 12'h001 &&
	     mav_csr_write_csr_addr != 12'h002 &&
	     mav_csr_write_csr_addr != 12'h003 &&
	     mav_csr_write_csr_addr != 12'h100 &&
	     mav_csr_write_csr_addr != 12'h102 &&
	     mav_csr_write_csr_addr != 12'h103 &&
	     mav_csr_write_csr_addr != 12'h104 &&
	     mav_csr_write_csr_addr != 12'h105 &&
	     mav_csr_write_csr_addr != 12'h106 &&
	     mav_csr_write_csr_addr != 12'h140 &&
	     mav_csr_write_csr_addr != 12'h141 &&
	     mav_csr_write_csr_addr != 12'h142 &&
	     mav_csr_write_csr_addr != 12'h143 &&
	     mav_csr_write_csr_addr != 12'h144 &&
	     mav_csr_write_csr_addr != 12'h180 &&
	     mav_csr_write_csr_addr != 12'h302 &&
	     mav_csr_write_csr_addr != 12'h303 &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'h320 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 &&
	     mav_csr_write_csr_addr != 12'h7B0 &&
	     mav_csr_write_csr_addr != 12'h7B1 &&
	     mav_csr_write_csr_addr != 12'h7B2 &&
	     mav_csr_write_csr_addr != 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0x323___d1032 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1040 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1049 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003 ||
	      mav_csr_write_csr_addr == 12'h100 ||
	      mav_csr_write_csr_addr == 12'h300) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1097 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     (mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1102 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h104 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1104 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h105 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1156 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h140 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1158 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h141 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1205 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h142 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1209 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h143 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1211 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h144 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1213 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h180 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1215 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h302 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1224 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h303 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1227 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h304 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1229 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1273 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1275 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h340 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1277 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1321 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1323 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1325 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h344 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1327 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'hB00 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1329 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'hB02 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1331 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7A0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1333 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1337 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7A2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1339 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7A3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1341 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7B0 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1351 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7B1 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1411 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7B2 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1413 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     mav_csr_write_csr_addr == 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_028_OR_NOT_ma_ETC___d1582 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d1032 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d1033) &&
	     (mav_csr_write_csr_addr == 12'h001 ||
	      mav_csr_write_csr_addr == 12'h002 ||
	      mav_csr_write_csr_addr == 12'h003) ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d1028 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_csr_write_word_BITS_14_TO_13_062_EQ_0x3_06_ETC___d1093 =
	     { sd__h13892,
	       40'd5120,
	       (mav_csr_write_csr_addr == 12'h100) ?
		 fixed_up_val_23__h11512 :
		 fixed_up_val_23__h13893 } ;
  assign mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599 =
	     mav_scr_write_cap[13:11] < repBound__h22087 ;
  assign mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2 =
	     mav_scr_write_cap[149:100] +
	     ({ {48{x__h22167[1]}}, x__h22167 } << mav_scr_write_cap[33:28]) ;
  assign mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739 =
	     { mav_scr_write_cap[151:100] & mask__h21149, 14'd0 } +
	     addTop__h21148 ;
  assign mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731 =
	     mav_scr_write_cap[27:25] < repBound__h22087 ;
  assign mav_scr_write_cap_BITS_33_TO_28_589_ULT_51_725_ETC___d1752 =
	     mav_scr_write_cap[33:28] < 6'd51 &&
	     mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739[64:63] -
	     { 1'd0, x__h21332 } >
	     2'd1 ;
  assign mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601 =
	     mav_scr_write_cap[85:83] < repBound__h22087 ;
  assign newAddrBits__h12379 =
	     { 2'd0, rg_stcc[13:0] } + { 2'd0, x__h12255[13:0] } ;
  assign newAddrBits__h12888 =
	     { 2'd0, rg_sepcc[13:0] } + { 2'd0, x__h12770[13:0] } ;
  assign newAddrBits__h14725 =
	     { 2'd0, rg_mtcc[13:0] } + { 2'd0, x__h14607[13:0] } ;
  assign newAddrBits__h15331 =
	     { 2'd0, rg_mepcc[13:0] } + { 2'd0, x__h15213[13:0] } ;
  assign newAddrBits__h16777 =
	     { 2'd0, rg_dpcc[23:10] } + { 2'd0, x__h16718[13:0] } ;
  assign newAddrBits__h19184 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h19040[13:0] } ;
  assign newAddrBits__h19835 =
	     { 2'd0, mav_scr_write_cap[13:0] } + { 2'd0, x__h19716[13:0] } ;
  assign newAddrBits__h27562 =
	     { 2'd0, x__h27533 } + { 2'd0, x__h27503[13:0] } ;
  assign new_csr_value__h16205 = { 4'd0, mav_csr_write_word[59:0] } ;
  assign new_dcsr__h16309 =
	     { rg_dcsr[31:16],
	       mav_csr_write_word[15:9],
	       rg_dcsr[8:5],
	       mav_csr_write_word[4],
	       rg_dcsr[3],
	       mav_csr_write_word[2:0] } ;
  assign new_priv__h24881 =
	     csr_trap_actions_nmi ?
	       2'b11 :
	       ((csr_trap_actions_from_priv == 2'b11) ?
		  csr_trap_actions_from_priv :
		  _theResult___fst__h25019) ;
  assign offsetAddr__h14453 =
	     { mav_csr_write_word[63:2], 1'b0, mav_csr_write_word[0] } ;
  assign offsetAddr__h15075 = { mav_csr_write_word[63:1], 1'd0 } ;
  assign offsetAddr__h18782 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63:1],
	       1'd0 } ;
  assign offsetAddr__h19458 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63:2],
	       1'b0,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[0] } ;
  assign offset__h21948 = { 2'd0, mav_scr_write_cap[85:72] } - x__h21083 ;
  assign offset__h23773 =
	     { 2'd0, csr_trap_actions_pcc[95:82] } - base__h23772 ;
  assign offset__h5690 = { 2'd0, rg_stcc[85:72] } - x__h12476 ;
  assign offset__h5898 = { 2'd0, rg_sepcc[85:72] } - x__h12985 ;
  assign offset__h6230 = { 2'd0, rg_mtcc[85:72] } - x__h14822 ;
  assign offset__h6450 = { 2'd0, rg_mepcc[85:72] } - x__h15428 ;
  assign offset__h7309 = { 2'd0, rg_dpcc[95:82] } - base__h7308 ;
  assign pie_from_x__h28146 = { 4'd1, csr_ret_actions_from_priv } ;
  assign pie_to_x__h25008 = { 4'd1, new_priv__h24881 } ;
  assign repBound__h17014 = rg_dpcc[23:21] - 3'b001 ;
  assign repBound__h22087 = mav_scr_write_cap[13:11] - 3'b001 ;
  assign repBound__h4687 = soc_map$m_pcc_reset_value[13:11] - 3'b001 ;
  assign repBound__h5740 = rg_stcc[13:11] - 3'b001 ;
  assign repBound__h5948 = rg_sepcc[13:11] - 3'b001 ;
  assign repBound__h6280 = rg_mtcc[13:11] - 3'b001 ;
  assign repBound__h6500 = rg_mepcc[13:11] - 3'b001 ;
  assign result__h21796 =
	     { 1'd0,
	       ~mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739[64],
	       mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739[63:0] } ;
  assign result_d_addrBits__h16789 =
	     (rg_dpcc[43:38] == 6'd52) ?
	       { 1'b0, newAddrBits__h16777[12:0] } :
	       newAddrBits__h16777[13:0] ;
  assign result_d_addrBits__h27574 =
	     (IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 ==
	      6'd52) ?
	       { 1'b0, newAddrBits__h27562[12:0] } :
	       newAddrBits__h27562[13:0] ;
  assign result_d_address__h16788 =
	     { 2'd0, bot__h16811 } + { 2'd0, mav_csr_write_word } ;
  assign result_d_address__h27573 =
	     { 2'd0, bot__h27608 } + { 2'd0, _theResult_____2__h26343 } ;
  assign ret__h21152 =
	     { 1'd0,
	       mav_scr_write_cap_BITS_151_TO_100_726_AND_4503_ETC___d1739[64:0] } ;
  assign rg_dpcc_15_BITS_23_TO_21_391_ULT_rg_dpcc_15_BI_ETC___d1395 =
	     rg_dpcc[23:21] < repBound__h17014 ;
  assign rg_dpcc_15_BITS_37_TO_35_393_ULT_rg_dpcc_15_BI_ETC___d1394 =
	     rg_dpcc[37:35] < repBound__h17014 ;
  assign rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_71_B_ETC___d376 =
	     rg_mepcc[13:11] < repBound__h6500 ;
  assign rg_mepcc_71_BITS_27_TO_25_473_ULT_rg_mepcc_71__ETC___d2474 =
	     rg_mepcc[27:25] < repBound__h6500 ;
  assign rg_mepcc_71_BITS_85_TO_83_77_ULT_rg_mepcc_71_B_ETC___d378 =
	     rg_mepcc[85:83] < repBound__h6500 ;
  assign rg_mtcc_40_BITS_13_TO_11_43_ULT_rg_mtcc_40_BIT_ETC___d345 =
	     rg_mtcc[13:11] < repBound__h6280 ;
  assign rg_mtcc_40_BITS_85_TO_83_46_ULT_rg_mtcc_40_BIT_ETC___d347 =
	     rg_mtcc[85:83] < repBound__h6280 ;
  assign rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_97_B_ETC___d302 =
	     rg_sepcc[13:11] < repBound__h5948 ;
  assign rg_sepcc_97_BITS_27_TO_25_482_ULT_rg_sepcc_97__ETC___d2483 =
	     rg_sepcc[27:25] < repBound__h5948 ;
  assign rg_sepcc_97_BITS_85_TO_83_03_ULT_rg_sepcc_97_B_ETC___d304 =
	     rg_sepcc[85:83] < repBound__h5948 ;
  assign rg_stcc_68_BITS_13_TO_11_71_ULT_rg_stcc_68_BIT_ETC___d273 =
	     rg_stcc[13:11] < repBound__h5740 ;
  assign rg_stcc_68_BITS_85_TO_83_74_ULT_rg_stcc_68_BIT_ETC___d275 =
	     rg_stcc[85:83] < repBound__h5740 ;
  assign sd__h13892 = mav_csr_write_word[14:13] == 2'h3 ;
  assign sd__h22542 = mv_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h23096 = ma_update_mstatus_fs_fs == 2'h3 ;
  assign sd__h24929 =
	     IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[14:13] ==
	     2'h3 ;
  assign sd__h28067 =
	     IF_csr_ret_actions_from_priv_EQ_0b11_415_THEN__ETC___d2435[14:13] ==
	     2'h3 ;
  assign signBits__h16595 = {50{mav_csr_write_word[63]}} ;
  assign signBits__h19459 =
	     {50{SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63]}} ;
  assign signBits__h27301 = {50{_theResult_____2__h26343[63]}} ;
  assign soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 =
	     soc_map$m_pcc_reset_value[13:11] < repBound__h4687 ;
  assign soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 =
	     soc_map$m_pcc_reset_value[27:25] < repBound__h4687 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12 =
	     soc_map$m_pcc_reset_value[85:83] < repBound__h4687 ;
  assign soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d22 =
	     { soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12,
	       (soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_27_TO_25_ULT_so_ETC___d9 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3),
	       (soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 ==
		soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		 2'd0 :
		 ((soc_map_m_pcc_reset_value_BITS_13_TO_11_ULT_so_ETC___d10 &&
		   !soc_map_m_pcc_reset_value_BITS_85_TO_83_1_ULT__ETC___d12) ?
		    2'd1 :
		    2'd3) } ;
  assign toBoundsM1__h12115 = { 3'b110, ~rg_stcc[10:0] } ;
  assign toBoundsM1__h12646 = { 3'b110, ~rg_sepcc[10:0] } ;
  assign toBoundsM1__h14467 = { 3'b110, ~rg_mtcc[10:0] } ;
  assign toBoundsM1__h15089 = { 3'b110, ~rg_mepcc[10:0] } ;
  assign toBoundsM1__h16608 = { 3'b110, ~rg_dpcc[20:10] } ;
  assign toBoundsM1__h20209 = { 3'b110, ~mav_scr_write_cap[10:0] } ;
  assign toBoundsM1__h27314 = { 3'b110, ~x__h27533[10:0] } ;
  assign toBounds__h12114 = 14'd14336 - { 3'b0, rg_stcc[10:0] } ;
  assign toBounds__h12645 = 14'd14336 - { 3'b0, rg_sepcc[10:0] } ;
  assign toBounds__h14466 = 14'd14336 - { 3'b0, rg_mtcc[10:0] } ;
  assign toBounds__h15088 = 14'd14336 - { 3'b0, rg_mepcc[10:0] } ;
  assign toBounds__h16607 = 14'd14336 - { 3'b0, rg_dpcc[20:10] } ;
  assign toBounds__h20208 = 14'd14336 - { 3'b0, mav_scr_write_cap[10:0] } ;
  assign toBounds__h27313 = 14'd14336 - { 3'b0, x__h27533[10:0] } ;
  assign to_y__h28361 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_52_AND_INV_1_SL_0_CONCA_ETC___d2428[8] } ;
  assign v__h11461 =
	     { sd__h13892,
	       43'd8192,
	       mav_csr_write_word[19:18],
	       3'd0,
	       mav_csr_write_word[14:13],
	       4'd0,
	       mav_csr_write_word[8],
	       2'd0,
	       mav_csr_write_word[5],
	       3'd0,
	       mav_csr_write_word[1],
	       1'd0 } ;
  assign v__h13693 =
	     { 35'd0,
	       mav_csr_write_word[28:26],
	       10'd0,
	       mav_csr_write_word[15],
	       1'd0,
	       mav_csr_write_word[13:12],
	       2'd0,
	       mav_csr_write_word[9:0] } ;
  assign v__h13805 = { 52'd0, mav_csr_write_word[11:0] } ;
  assign v__h15517 =
	     { mav_csr_write_word[63], 57'd0, mav_csr_write_word[5:0] } ;
  assign v__h16306 = { 32'd0, new_dcsr__h16309 } ;
  assign v__h24886 = { sd__h24929, 40'd5120, fixed_up_val_23__h24930 } ;
  assign val__h25091 = 64'd0 << ie_to_x__h25007 ;
  assign val__h25108 = { 63'd0, b__h25106 } << pie_to_x__h25008 ;
  assign val__h28200 = { 63'd0, b__h28198 } << ie_from_x__h28145 ;
  assign vector_offset__h26342 = { 56'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h10891 = { 41'h10000001400, fixed_up_val_23__h10932 } ;
  assign wordxl1__h13852 = { sd__h13892, 40'd5120, fixed_up_val_23__h13893 } ;
  assign x1_avValue_addrBits__h20081 =
	     (x__h19440 == 2'd0) ?
	       capUnpacked_capFat_addrBits__h19856 :
	       14'd0 ;
  assign x1_avValue_address__h20080 =
	     (x__h19440 == 2'd0) ?
	       capUnpacked_capFat_address__h19855 :
	       66'd0 ;
  assign x1_avValue_flags__h20083 =
	     x__h19440 == 2'd0 && mav_scr_write_cap[55] ;
  assign x1_avValue_otype__h20085 =
	     (x__h19440 == 2'd0) ? mav_scr_write_cap[52:35] : 18'd262143 ;
  assign x1_avValue_perms_soft__h22262 =
	     (x__h19440 == 2'd0) ? mav_scr_write_cap[71:68] : 4'd0 ;
  assign x1_avValue_reserved__h20084 =
	     (x__h19440 == 2'd0) ? mav_scr_write_cap[54:53] : 2'd0 ;
  assign x__h12255 = offsetAddr__h14453 >> rg_stcc[33:28] ;
  assign x__h12476 =
	     { (rg_stcc_68_BITS_13_TO_11_71_ULT_rg_stcc_68_BIT_ETC___d273 ==
		rg_stcc_68_BITS_85_TO_83_74_ULT_rg_stcc_68_BIT_ETC___d275) ?
		 2'd0 :
		 ((rg_stcc_68_BITS_13_TO_11_71_ULT_rg_stcc_68_BIT_ETC___d273 &&
		   !rg_stcc_68_BITS_85_TO_83_74_ULT_rg_stcc_68_BIT_ETC___d275) ?
		    2'd1 :
		    2'd3),
	       rg_stcc[13:0] } ;
  assign x__h12770 = offsetAddr__h15075 >> rg_sepcc[33:28] ;
  assign x__h12985 =
	     { IF_rg_sepcc_97_BITS_13_TO_11_00_ULT_rg_sepcc_9_ETC___d309,
	       rg_sepcc[13:0] } ;
  assign x__h14607 = offsetAddr__h14453 >> rg_mtcc[33:28] ;
  assign x__h14822 =
	     { (rg_mtcc_40_BITS_13_TO_11_43_ULT_rg_mtcc_40_BIT_ETC___d345 ==
		rg_mtcc_40_BITS_85_TO_83_46_ULT_rg_mtcc_40_BIT_ETC___d347) ?
		 2'd0 :
		 ((rg_mtcc_40_BITS_13_TO_11_43_ULT_rg_mtcc_40_BIT_ETC___d345 &&
		   !rg_mtcc_40_BITS_85_TO_83_46_ULT_rg_mtcc_40_BIT_ETC___d347) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[13:0] } ;
  assign x__h15213 = offsetAddr__h15075 >> rg_mepcc[33:28] ;
  assign x__h15428 =
	     { IF_rg_mepcc_71_BITS_13_TO_11_74_ULT_rg_mepcc_7_ETC___d383,
	       rg_mepcc[13:0] } ;
  assign x__h16625 = mav_csr_write_word[63:14] ^ signBits__h16595 ;
  assign x__h16718 = mav_csr_write_word >> rg_dpcc[43:38] ;
  assign x__h19040 = offsetAddr__h18782 >> mav_scr_write_cap[33:28] ;
  assign x__h19440 =
	     (mav_scr_write_cap[33:28] == 6'd0) ?
	       mav_scr_write_cap[1:0] :
	       2'b0 ;
  assign x__h19489 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617[63:14] ^
	     signBits__h19459 ;
  assign x__h19716 = offsetAddr__h19458 >> mav_scr_write_cap[33:28] ;
  assign x__h21083 = { x__h22167, mav_scr_write_cap[13:0] } ;
  assign x__h21238 = { x__h22148, mav_scr_write_cap[27:14] } ;
  assign x__h21332 =
	     (mav_scr_write_cap[33:28] == 6'd50) ?
	       mav_scr_write_cap[13] :
	       mav_scr_write_cap_BITS_149_TO_100_PLUS_SEXT_x2_ETC__q2[49] ;
  assign x__h21861 = x__h21238 - x__h21083 ;
  assign x__h21960 = x__h21962 << mav_scr_write_cap[33:28] ;
  assign x__h21962 = { {48{offset__h21948[15]}}, offset__h21948 } ;
  assign x__h22047 = 66'h3FFFFFFFFFFFFFFFF << mav_scr_write_cap[33:28] ;
  assign x__h22148 =
	     (mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731 ==
	      mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_27_TO_25_730_ULT_mav_sc_ETC___d1731 &&
		 !mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601) ?
		  2'd1 :
		  2'd3) ;
  assign x__h22167 =
	     (mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599 ==
	      mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_13_TO_11_597_ULT_mav_sc_ETC___d1599 &&
		 !mav_scr_write_cap_BITS_85_TO_83_600_ULT_mav_sc_ETC___d1601) ?
		  2'd1 :
		  2'd3) ;
  assign x__h23785 = x__h23787 << csr_trap_actions_pcc[43:38] ;
  assign x__h23787 = { {48{offset__h23773[15]}}, offset__h23773 } ;
  assign x__h23912 = 66'h3FFFFFFFFFFFFFFFF << csr_trap_actions_pcc[43:38] ;
  assign x__h25089 = x__h25119 | val__h25108 ;
  assign x__h25102 = x__h25089 & y__h25103 ;
  assign x__h25119 = csr_mstatus_rg_mstatus & y__h25120 ;
  assign x__h27331 = _theResult_____2__h26343[63:14] ^ signBits__h27301 ;
  assign x__h27503 =
	     _theResult_____2__h26343 >>
	     IF_csr_trap_actions_nmi_THEN_DONTCARE_ELSE_IF__ETC___d2360 ;
  assign x__h27533 =
	     (new_priv__h24881 == 2'b11) ? rg_mtcc[13:0] : rg_stcc[13:0] ;
  assign x__h27615 =
	     (new_priv__h24881 == 2'b11) ? rg_mtcc[151:86] : rg_stcc[151:86] ;
  assign x__h27662 = (new_priv__h24881 == 2'b11) ? x__h14822 : x__h12476 ;
  assign x__h28007 =
	     (csr_trap_actions_nmi || new_priv__h24881 == 2'b11) ?
	       v__h24886 :
	       y_avValue_fst__h26313 ;
  assign x__h28008 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       57'd0,
	       exc_code__h27126 } ;
  assign x__h28181 = x__h28211 | val__h28200 ;
  assign x__h28194 = x__h28181 & y__h28195 ;
  assign x__h28211 = csr_mstatus_rg_mstatus & y__h28212 ;
  assign x__h28828 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[52:35] :
	       rg_sepcc[52:35] ;
  assign x__h4873 = rg_mcycle + 64'd1 ;
  assign x__h5702 = x__h5704 << rg_stcc[33:28] ;
  assign x__h5704 = { {48{offset__h5690[15]}}, offset__h5690 } ;
  assign x__h5836 = 66'h3FFFFFFFFFFFFFFFF << rg_stcc[33:28] ;
  assign x__h5910 = x__h5912 << rg_sepcc[33:28] ;
  assign x__h5912 = { {48{offset__h5898[15]}}, offset__h5898 } ;
  assign x__h6044 = 66'h3FFFFFFFFFFFFFFFF << rg_sepcc[33:28] ;
  assign x__h6242 = x__h6244 << rg_mtcc[33:28] ;
  assign x__h6244 = { {48{offset__h6230[15]}}, offset__h6230 } ;
  assign x__h6376 = 66'h3FFFFFFFFFFFFFFFF << rg_mtcc[33:28] ;
  assign x__h6462 = x__h6464 << rg_mepcc[33:28] ;
  assign x__h6464 = { {48{offset__h6450[15]}}, offset__h6450 } ;
  assign x__h6596 = 66'h3FFFFFFFFFFFFFFFF << rg_mepcc[33:28] ;
  assign x__h6831 = 66'h3FFFFFFFFFFFFFFFF << rg_dpcc[43:38] ;
  assign x__h7256 = { rg_sccsr, 5'd3 } ;
  assign x__h7274 = { rg_mccsr, 5'd3 } ;
  assign x__h7321 = x__h7323 << rg_dpcc[43:38] ;
  assign x__h7323 = { {48{offset__h7309[15]}}, offset__h7309 } ;
  assign x__h9270 =
	     (!mav_csr_write_csr_addr_ULT_0xB03___d1028 &&
	      mav_csr_write_csr_addr_ULE_0xB1F___d1029 ||
	      !mav_csr_write_csr_addr_ULT_0x323___d1032 &&
	      mav_csr_write_csr_addr_ULE_0x33F___d1033) ?
	       64'd0 :
	       y_avValue_fst__h17456 ;
  assign x_addrBits__h12400 =
	     (rg_stcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h12379[12:0] } :
	       newAddrBits__h12379[13:0] ;
  assign x_addrBits__h12909 =
	     (rg_sepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h12888[12:0] } :
	       newAddrBits__h12888[13:0] ;
  assign x_addrBits__h14746 =
	     (rg_mtcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h14725[12:0] } :
	       newAddrBits__h14725[13:0] ;
  assign x_addrBits__h15352 =
	     (rg_mepcc[33:28] == 6'd52) ?
	       { 1'b0, newAddrBits__h15331[12:0] } :
	       newAddrBits__h15331[13:0] ;
  assign x_address__h12399 =
	     { 2'd0, bot__h12422 } + { 2'd0, offsetAddr__h14453 } ;
  assign x_address__h12908 =
	     { 2'd0, bot__h12931 } + { 2'd0, offsetAddr__h15075 } ;
  assign x_address__h14745 =
	     { 2'd0, bot__h14768 } + { 2'd0, offsetAddr__h14453 } ;
  assign x_address__h15351 =
	     { 2'd0, bot__h15374 } + { 2'd0, offsetAddr__h15075 } ;
  assign y__h22046 = ~x__h22047 ;
  assign y__h23911 = ~x__h23912 ;
  assign y__h25103 = ~mask__h25090 ;
  assign y__h25120 = ~mask__h25107 ;
  assign y__h28195 = ~mask__h28182 ;
  assign y__h28212 = ~mask__h28199 ;
  assign y__h5835 = ~x__h5836 ;
  assign y__h6043 = ~x__h6044 ;
  assign y__h6375 = ~x__h6376 ;
  assign y__h6595 = ~x__h6596 ;
  assign y__h6830 = ~x__h6831 ;
  assign y_avValue_fst__h17184 = { 59'd0, mav_csr_write_word[4:0] } ;
  assign y_avValue_fst__h17189 = { 61'd0, mav_csr_write_word[2:0] } ;
  assign y_avValue_fst__h17194 = { 56'd0, mav_csr_write_word[7:0] } ;
  assign y_avValue_fst__h26295 =
	     { sd__h24929,
	       43'd8192,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[19:18],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[14:13],
	       4'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[8],
	       2'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[5],
	       3'd0,
	       IF_IF_csr_trap_actions_nmi_THEN_0b11_ELSE_IF_c_ETC___d2165[1],
	       1'd0 } ;
  assign y_avValue_fst__h26313 =
	     (new_priv__h24881 == 2'b01) ? y_avValue_fst__h26295 : v__h24886 ;
  assign y_avValue_snd_snd_snd__h26395 =
	     { CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1,
	       2'd0 } ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  y_avValue_fst__h17184 or
	  y_avValue_fst__h17189 or
	  y_avValue_fst__h17194 or
	  v__h11461 or
	  csr_mie$mav_sie_write or
	  offsetAddr__h14453 or
	  offsetAddr__h15075 or
	  v__h15517 or
	  csr_mip$mav_sip_write or
	  wordxl1__h13852 or
	  v__h13693 or
	  v__h13805 or
	  csr_mie$mav_write or
	  csr_mip$mav_write or new_csr_value__h16205 or v__h16306)
  begin
    case (mav_csr_write_csr_addr)
      12'h001: y_avValue_fst__h17456 = y_avValue_fst__h17184;
      12'h002, 12'h306: y_avValue_fst__h17456 = y_avValue_fst__h17189;
      12'h003: y_avValue_fst__h17456 = y_avValue_fst__h17194;
      12'h100: y_avValue_fst__h17456 = v__h11461;
      12'h102,
      12'h103,
      12'h106,
      12'h320,
      12'h7A0,
      12'hF11,
      12'hF12,
      12'hF13,
      12'hF14:
	  y_avValue_fst__h17456 = 64'd0;
      12'h104: y_avValue_fst__h17456 = csr_mie$mav_sie_write;
      12'h105, 12'h305: y_avValue_fst__h17456 = offsetAddr__h14453;
      12'h140,
      12'h143,
      12'h180,
      12'h340,
      12'h343,
      12'h7A2,
      12'h7A3,
      12'hB00,
      12'hB02:
	  y_avValue_fst__h17456 = mav_csr_write_word;
      12'h141, 12'h341: y_avValue_fst__h17456 = offsetAddr__h15075;
      12'h142, 12'h342: y_avValue_fst__h17456 = v__h15517;
      12'h144: y_avValue_fst__h17456 = csr_mip$mav_sip_write;
      12'h300: y_avValue_fst__h17456 = wordxl1__h13852;
      12'h301: y_avValue_fst__h17456 = 64'h800000000014112D;
      12'h302: y_avValue_fst__h17456 = v__h13693;
      12'h303: y_avValue_fst__h17456 = v__h13805;
      12'h304: y_avValue_fst__h17456 = csr_mie$mav_write;
      12'h344: y_avValue_fst__h17456 = csr_mip$mav_write;
      12'h7A1: y_avValue_fst__h17456 = new_csr_value__h16205;
      12'h7B0: y_avValue_fst__h17456 = v__h16306;
      default: y_avValue_fst__h17456 = mav_csr_write_word;
    endcase
  end
  always@(new_priv__h24881 or
	  SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 or
	  SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292)
  begin
    case (new_priv__h24881)
      2'b01:
	  CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[63:2];
      2'b11:
	  CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
	      SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2];
      default: CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q1 =
		   SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  capUnpacked_capFat_addrBits__h19205 or x1_avValue_addrBits__h20081)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843 =
	      mav_scr_write_cap[85:72];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843 =
	      capUnpacked_capFat_addrBits__h19205;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843 =
	      x1_avValue_addrBits__h20081;
      default: IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1843 =
		   14'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1682 or
	  x__h19440 or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829 =
	      mav_scr_write_cap[152];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829 =
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1682 &&
	      mav_scr_write_cap[152];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829 =
	      x__h19440 == 2'd0 &&
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1645 &&
	      mav_scr_write_cap[152];
      default: IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1829 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[152];
    endcase
  end
  always@(new_priv__h24881 or
	  SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 or
	  SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292)
  begin
    case (new_priv__h24881)
      2'b01:
	  CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[0];
      2'b11:
	  CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
	      SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0];
      default: CASE_new_priv4881_0b1_SEXT__0_CONCAT_rg_stcc_6_ETC__q3 =
		   SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830 =
	      csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830 =
	      csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2830 =
		   interrupt_pending_cur_priv == 2'b11 &&
		   csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or csr_mstatus_rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933 =
	      !csr_mstatus_rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933 =
	      !csr_mstatus_rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_823_THEN__ETC___d2933 =
		   interrupt_pending_cur_priv != 2'b11 ||
		   !csr_mstatus_rg_mstatus[3];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[71:68];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 = 4'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[55];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[55];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
	      mav_scr_write_cap[54:53];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 = 2'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
	      mav_scr_write_cap[52:35];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
		   18'd262143;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
	      mav_scr_write_cap[34];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[34];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      mav_scr_write_cap[33:0];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
		   34'h344000000;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 or
	  mav_scr_write_cap or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 or
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 or
	  x1_avValue_perms_soft__h22262 or
	  x__h19440 or
	  x1_avValue_flags__h20083 or
	  IF_IF_mav_scr_write_cap_BITS_33_TO_28_589_EQ_0_ETC___d1819)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd15:
	  IF_mav_scr_write_scr_addr_EQ_13_668_OR_mav_scr_ETC___d1879 =
	      mav_scr_write_cap[71:0];
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_668_OR_mav_scr_ETC___d1879 =
	      { x1_avValue_perms_soft__h22262,
		x__h19440 == 2'd0 && mav_scr_write_cap[67],
		x__h19440 == 2'd0 && mav_scr_write_cap[66],
		x__h19440 == 2'd0 && mav_scr_write_cap[65],
		x__h19440 == 2'd0 && mav_scr_write_cap[64],
		x__h19440 == 2'd0 && mav_scr_write_cap[63],
		x__h19440 == 2'd0 && mav_scr_write_cap[62],
		x__h19440 == 2'd0 && mav_scr_write_cap[61],
		x__h19440 == 2'd0 && mav_scr_write_cap[60],
		x__h19440 == 2'd0 && mav_scr_write_cap[59],
		x__h19440 == 2'd0 && mav_scr_write_cap[58],
		x__h19440 == 2'd0 && mav_scr_write_cap[57],
		x__h19440 == 2'd0 && mav_scr_write_cap[56],
		x1_avValue_flags__h20083,
		IF_IF_mav_scr_write_cap_BITS_33_TO_28_589_EQ_0_ETC___d1819 };
      default: IF_mav_scr_write_scr_addr_EQ_13_668_OR_mav_scr_ETC___d1879 =
		   { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4,
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[67],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[66],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[65],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[64],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[63],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[62],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[61],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[60],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[59],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[58],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[57],
		     (mav_scr_write_scr_addr == 5'd29 ||
		      mav_scr_write_scr_addr == 5'd31 ||
		      mav_scr_write_scr_addr == 5'd30) &&
		     mav_scr_write_cap[56],
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8,
		     CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 };
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  capUnpacked_capFat_address__h19204 or x1_avValue_address__h20080)
  begin
    case (mav_scr_write_scr_addr)
      5'd13, 5'd14, 5'd29, 5'd30:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836 =
	      mav_scr_write_cap[151:86];
      5'd15, 5'd31:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836 =
	      capUnpacked_capFat_address__h19204;
      5'd28:
	  IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836 =
	      x1_avValue_address__h20080;
      default: IF_mav_scr_write_scr_addr_EQ_13_668_THEN_mav_s_ETC___d1836 =
		   66'd0;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7150 or
	  SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430 or
	  rg_dscratch0 or x__h7256 or rg_mcycle or rg_minstret or x__h7274)
  begin
    case (read_csr_csr_addr)
      12'h001:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 = 64'd0;
      12'h104:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[0] };
      12'h140:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321;
      12'h142:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_stval;
      12'h144:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 = rg_satp;
      12'h300:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 32'd0, dcsr__h7150 };
      12'h7B1:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430;
      12'h7B2:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 48'd0, x__h7256 };
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
	      { 48'd0, x__h7274 };
      default: IF_read_csr_csr_addr_EQ_0x1_1_THEN_0_CONCAT_rg_ETC___d473 =
		   rg_dscratch1;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7150 or
	  SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430 or
	  rg_dscratch0 or x__h7256 or rg_mcycle or rg_minstret or x__h7274)
  begin
    case (read_csr_port2_csr_addr)
      12'h001:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 = 64'd0;
      12'h104:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[0] };
      12'h140:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321;
      12'h142:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_stval;
      12'h144:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 = rg_satp;
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      64'h800000000014112D;
      12'h302:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 32'd0, dcsr__h7150 };
      12'h7B1:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430;
      12'h7B2:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_dscratch0;
      12'h9C0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 48'd0, x__h7256 };
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      rg_minstret;
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
	      { 48'd0, x__h7274 };
      default: IF_read_csr_port2_csr_addr_EQ_0x1_88_THEN_0_CO_ETC___d728 =
		   rg_dscratch1;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_dscratch1 or
	  rg_fflags or
	  rg_frm or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_sie_read or
	  SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292 or
	  rg_sscratch or
	  SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321 or
	  rg_scause or
	  rg_stval or
	  csr_mip$mv_sip_read or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  dcsr__h7150 or
	  SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430 or
	  rg_dscratch0 or x__h7256 or rg_mcycle or rg_minstret or x__h7274)
  begin
    case (mav_read_csr_csr_addr)
      12'h001:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 59'd0, rg_fflags };
      12'h002:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 61'd0, rg_frm };
      12'h003:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 56'd0, rg_frm, rg_fflags };
      12'h100:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { csr_mstatus_rg_mstatus[63],
		29'd0,
		csr_mstatus_rg_mstatus[33:32],
		12'd0,
		csr_mstatus_rg_mstatus[19:18],
		1'd0,
		csr_mstatus_rg_mstatus[16:13],
		4'd0,
		csr_mstatus_rg_mstatus[8],
		2'd0,
		csr_mstatus_rg_mstatus[5:4],
		2'd0,
		csr_mstatus_rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'h320, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 = 64'd0;
      12'h104:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      csr_mie$mv_sie_read;
      12'h105:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[0] };
      12'h140:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_sscratch;
      12'h141:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321;
      12'h142:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { rg_scause[6], 57'd0, rg_scause[5:0] };
      12'h143:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_stval;
      12'h144:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      csr_mip$mv_sip_read;
      12'h180:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_satp;
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      64'h800000000014112D;
      12'h302:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 35'd0, rg_medeleg };
      12'h303:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      csr_mie$mv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { rg_mcause[6], 57'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_tdata2;
      12'h7A3:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_tdata3;
      12'h7B0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 32'd0, dcsr__h7150 };
      12'h7B1:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      SEXT__0_CONCAT_rg_dpcc_15_BITS_95_TO_82_16_17__ETC___d430;
      12'h7B2:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_dscratch0;
      12'h9C0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 48'd0, x__h7256 };
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      rg_minstret;
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
	      { 48'd0, x__h7274 };
      default: IF_mav_read_csr_csr_addr_EQ_0x1_85_THEN_0_CONC_ETC___d1025 =
		   rg_dscratch1;
    endcase
  end
  always@(read_scr_scr_addr or
	  rg_mepcc or
	  rg_stcc or
	  rg_stdc or
	  rg_sscratchc or rg_sepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd12:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 = rg_stcc;
      5'd13:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 = rg_stdc;
      5'd14:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 =
	      rg_sscratchc;
      5'd15:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 =
	      rg_sepcc;
      5'd28:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_12_31_THEN_rg_stcc_68__ETC___d771 =
		   rg_mepcc;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'h0000000A00002000;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sepcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_sscratchc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stcc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
	rg_stdc <= `BSV_ASSIGNMENT_DELAY
	    153'h00000000000000000000000001FFFFF44000000;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_sepcc$EN) rg_sepcc <= `BSV_ASSIGNMENT_DELAY rg_sepcc$D_IN;
	if (rg_sscratchc$EN)
	  rg_sscratchc <= `BSV_ASSIGNMENT_DELAY rg_sscratchc$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_stcc$EN) rg_stcc <= `BSV_ASSIGNMENT_DELAY rg_stcc$D_IN;
	if (rg_stdc$EN) rg_stdc <= `BSV_ASSIGNMENT_DELAY rg_stdc$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpcc$EN) rg_dpcc <= `BSV_ASSIGNMENT_DELAY rg_dpcc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_fflags$EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags$D_IN;
    if (rg_frm$EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_medeleg$EN) rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
    if (rg_mideleg$EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_nmi_vector$EN)
      rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_scause$EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause$D_IN;
    if (rg_sccsr$EN) rg_sccsr <= `BSV_ASSIGNMENT_DELAY rg_sccsr$D_IN;
    if (rg_sscratch$EN) rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch$D_IN;
    if (rg_stval$EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpcc = 163'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_dscratch0 = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch1 = 64'hAAAAAAAAAAAAAAAA;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_medeleg = 29'h0AAAAAAA;
    rg_mepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_scause = 7'h2A;
    rg_sccsr = 11'h2AA;
    rg_sepcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_sscratchc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_stcc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stdc = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug)
	$display("sstatus = 0x%0h",
		 { csr_mstatus_rg_mstatus[63],
		   29'd0,
		   csr_mstatus_rg_mstatus[33:32],
		   12'd0,
		   csr_mstatus_rg_mstatus[19:18],
		   1'd0,
		   csr_mstatus_rg_mstatus[16:13],
		   4'd0,
		   csr_mstatus_rg_mstatus[8],
		   2'd0,
		   csr_mstatus_rg_mstatus[5:4],
		   2'd0,
		   csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sip     = 0x%0h", csr_mip$mv_sip_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("sie     = 0x%0h", csr_mie$mv_sie_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  (mav_csr_write_csr_addr_ULT_0xB03___d1028 ||
	   !mav_csr_write_csr_addr_ULE_0xB1F___d1029) &&
	  mav_csr_write_csr_addr_ULT_0x323_032_OR_NOT_ma_ETC___d1505 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h23785 | in__h23894[63:0],
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("    priv %0d: ", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd10 &&
	  rg_scause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_scause[6] &&
	  rg_scause[5:0] != 6'd0 &&
	  rg_scause[5:0] != 6'd1 &&
	  rg_scause[5:0] != 6'd2 &&
	  rg_scause[5:0] != 6'd3 &&
	  rg_scause[5:0] != 6'd4 &&
	  rg_scause[5:0] != 6'd5 &&
	  rg_scause[5:0] != 6'd6 &&
	  rg_scause[5:0] != 6'd7 &&
	  rg_scause[5:0] != 6'd8 &&
	  rg_scause[5:0] != 6'd9 &&
	  rg_scause[5:0] != 6'd11 &&
	  rg_scause[5:0] != 6'd12 &&
	  rg_scause[5:0] != 6'd13 &&
	  rg_scause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_scause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" status: 0x%0h",
	       { csr_mstatus_rg_mstatus[63],
		 29'd0,
		 csr_mstatus_rg_mstatus[33:32],
		 12'd0,
		 csr_mstatus_rg_mstatus[19:18],
		 1'd0,
		 csr_mstatus_rg_mstatus[16:13],
		 4'd0,
		 csr_mstatus_rg_mstatus[8],
		 2'd0,
		 csr_mstatus_rg_mstatus[5:4],
		 2'd0,
		 csr_mstatus_rg_mstatus[1:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_stcc_68_BITS_85_TO_72_69_70__ETC___d292[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_sepcc_97_BITS_85_TO_72_98_99_ETC___d321);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tval: 0x%0h", rg_stval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" edeleg: 0x%0h", rg_medeleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ideleg: 0x%0h", rg_mideleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[63:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_mtcc_40_BITS_85_TO_72_41_42__ETC___d364[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_mepcc_71_BITS_85_TO_72_72_73_ETC___d395);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h26343);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("MStatus{",
	       "sd:%0d",
	       x__h28007[14:13] == 2'h3 || x__h28007[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" sxl:%0d uxl:%0d", x__h28007[35:34], x__h28007[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tsr:%0d", x__h28007[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tw:%0d", x__h28007[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" tvm:%0d", x__h28007[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" mxr:%0d", x__h28007[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" sum:%0d", x__h28007[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" mprv:%0d", x__h28007[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" xs:%0d", x__h28007[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" fs:%0d", x__h28007[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" mpp:%0d", x__h28007[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" spp:%0d", x__h28007[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" pies:%0d_%0d%0d", x__h28007[7], x__h28007[5], x__h28007[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" ies:%0d_%0d%0d", x__h28007[3], x__h28007[1], x__h28007[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h27126 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  NOT_csr_trap_actions_nmi_187_AND_csr_trap_acti_ETC___d2301)
	$write("unknown interrupt Exc_Code %d", exc_code__h27126);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h27126 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d2352)
	$write("unknown trap Exc_Code %d", exc_code__h27126);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" new priv %0d", new_priv__h24881);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("valid:%b",
	       mav_scr_write_cap[152],
	       " perms:0x%x",
	       { 15'd0, mav_scr_write_cap[71:56] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" reserved:0x%x", mav_scr_write_cap[54:53]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1720)
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1722)
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("%d", $unsigned(mav_scr_write_cap[33:28]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("'h%h", mav_scr_write_cap[27:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("'h%h", mav_scr_write_cap[13:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" address:0x%x", mav_scr_write_cap[151:86]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" addrBits:0x%x", mav_scr_write_cap[85:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       { 2'd0, bot__h21029 },
	       mav_scr_write_cap_BITS_33_TO_28_589_ULT_51_725_ETC___d1752 ?
		 result__h21796 :
		 ret__h21152,
	       (mav_scr_write_cap[33:28] < 6'd52) ?
		 length__h21856 :
		 66'h3FFFFFFFFFFFFFFFF,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_85_TO_72_ETC___d1617);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("'h%h", repBound__h22087);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1765)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1767)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1768)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1770)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1771)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write &&
	  NOT_mav_scr_write_scr_addr_EQ_12_588_700_AND_N_ETC___d1772)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("%d", $signed(x__h22148));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("%d", $signed(x__h22167), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd12 &&
	  mav_scr_write_scr_addr != 5'd13 &&
	  mav_scr_write_scr_addr != 5'd15 &&
	  mav_scr_write_scr_addr != 5'd14 &&
	  mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__507_ULE_1_508___d1509)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

